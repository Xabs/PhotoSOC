                ;;*****************************************************************************
                ;;*****************************************************************************
                ;;  FILENAME:   LCD.asm
                ;;  Version: 1.4, Updated on 2006/06/09 at 09:53:12
                ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                ;;
                ;;  DESCRIPTION: LCD User Module software implementation file
                ;;               for the M8C based PSoC family of devices.
                ;;
                ;; This set of functions is written for the common 2 and 4 line
                ;; LCDs that use the Hitachi HD44780A controller.
                ;;
                ;;  LCD connections to PSoC port
                ;;
                ;;    PX.0 ==> LCD D4
                ;;    PX.1 ==> LCD D5
                ;;    PX.2 ==> LCD D6
                ;;    PX.3 ==> LCD D7
                ;;    PX.4 ==> LCD E
                ;;    PX.5 ==> LCD RS
                ;;    PX.6 ==> LCD R/W
                ;;
                ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                ;;        arguments and observe the associated "Registers are volatile" policy.
                ;;        This means it is the caller's responsibility to preserve any values
                ;;        in the X and A registers that are still needed after the API functions
                ;;        returns. For Large Memory Model devices it is also the caller's 
                ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                ;;        MVW_PP registers. Even though some of these registers may not be modified
                ;;        now, there is no guarantee that will remain the case in future releases.
                ;;-----------------------------------------------------------------------------
                ;;  Copyright (c) Cypress MicroSystems 2001-2006. All Rights Reserved.
                ;;*****************************************************************************
                ;;*****************************************************************************
                
 00C0           FLAG_PGMODE_MASK:  equ C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 6
 0018           PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
 0019           PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
 001A           PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
 001B           PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBB20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBB20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBB20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBB21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBB21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBB21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCB22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCB23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30DR0:     equ 50h          ; data register 0                          (#)
 0051           DBB30DR1:     equ 51h          ; data register 1                          (W)
 0052           DBB30DR2:     equ 52h          ; data register 2                          (RW)
 0053           DBB30CR0:     equ 53h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31DR0:     equ 54h          ; data register 0                          (#)
 0055           DBB31DR1:     equ 55h          ; data register 1                          (W)
 0056           DBB31DR2:     equ 56h          ; data register 2                          (RW)
 0057           DBB31CR0:     equ 57h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32DR0:     equ 58h          ; data register 0                          (#)
 0059           DCB32DR1:     equ 59h          ; data register 1                          (W)
 005A           DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
 005B           DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33DR0:     equ 5Ch          ; data register 0                          (#)
 005D           DCB33DR1:     equ 5Dh          ; data register 1                          (W)
 005E           DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
 005F           DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 00C0           RDI2RI:       equ C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ C6h          ; Row 2 Output Register 1                  (RW)
 0000           
 00C8           RDI3RI:       equ C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
 00C9           RDI3SYN:      equ C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
 00CA           RDI3IS:       equ CAh          ; Row 3 Input Select Register              (RW)
 00CB           RDI3LT0:      equ CBh          ; Row 3 Look Up Table Register 0           (RW)
 00CC           RDI3LT1:      equ CCh          ; Row 3 Look Up Table Register 1           (RW)
 00CD           RDI3RO0:      equ CDh          ; Row 3 Output Register 0                  (RW)
 00CE           RDI3RO1:      equ CEh          ; Row 3 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ DFh          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ E7h          ; Data Control Register 1                  (RW)
 0000                                          ; Also see DEC_CR2 in bank 1
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 6
 0018           PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
 0019           PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
 001A           PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
 001B           PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBB20IN:      equ 41h          ;    Input Register                        (RW)
 0042           DBB20OU:      equ 42h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBB21IN:      equ 45h          ;    Input Register                        (RW)
 0046           DBB21OU:      equ 46h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCB22IN:      equ 49h          ;    Input Register                        (RW)
 004A           DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
 004E           DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30FN:      equ 50h          ; Function Register                        (RW)
 0051           DBB30IN:      equ 51h          ;    Input Register                        (RW)
 0052           DBB30OU:      equ 52h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31FN:      equ 54h          ; Function Register                        (RW)
 0055           DBB31IN:      equ 55h          ;    Input Register                        (RW)
 0056           DBB31OU:      equ 56h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32FN:      equ 58h          ; Function Register                        (RW)
 0059           DCB32IN:      equ 59h          ;    Input Register                        (RW)
 005A           DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33FN:      equ 5Ch          ; Function Register                        (RW)
 005D           DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
 005E           DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ E7h          ; Decimator Control Register 2             (RW)
 00E8           IMO_TR:       equ E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0007           SYSTEM_STACK_PAGE: equ 7   
 0000           SYSTEM_STACK_BASE_ADDR: equ 0h   
 0001           SYSTEM_LARGE_MEMORY_MODEL: equ 1   
 0000           SYSTEM_SMALL_MEMORY_MODEL: equ 0   
 0001           SYSTEM_TOOLS: equ 1   
 0001           SYSTEM_IDXPG_TRACKS_STK_PP: equ 1   
 0000           SYSTEM_IDXPG_TRACKS_IDX_PP: equ 0   
 0000           SYSTEM_MULTIPAGE_STACK: equ 0 
 0000           
 0000           
 0000           ;  ******* Function Class Definitions *******
 0000           ;
 0000           ;  These definitions are used to describe RAM access patterns. They provide
 0000           ;  documentation and they control prologue and epilogue macros that perform
 0000           ;  the necessary housekeeping functions for large memory model devices like
 0000           ;  the CY8C27x66 and CY8C29x66.
 0000           
 0001           RAM_USE_CLASS_1:               equ 1   ; PUSH, POP & I/O access
 0002           RAM_USE_CLASS_2:               equ 2   ; Indexed address mode on stack page
 0004           RAM_USE_CLASS_3:               equ 4   ; Indexed address mode to any page
 0008           RAM_USE_CLASS_4:               equ 8   ; Direct/Indirect address mode access
 0000           
 0000           
 0000           ;  ******* Page Pointer Manipulation Macros *******
 0000           ;
 0000           ;  Most of the following macros are conditionally compiled so they only
 0000           ;  produce code if the large memory model is selected.
 0000           
 0000              ;-----------------------------------------------
 0000              ;  Set Stack Page Macro
 0000              ;-----------------------------------------------
 0000              ;
 0000              ;  DESC: Modify STK_PP in the large or small memory Models.
 0000              ;
 0000              ; INPUT: Constant (e.g., SYSTEM_STACK_PAGE) that specifies the RAM page on
 0000              ;        which stack operations like PUSH and POP store and retrieve their
 0000              ;        data
 0000              ;
 0000              ;  COST: 8 instruction cycles (in LMM only)
 0000           
 0000              macro RAM_SETPAGE_STK( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[STK_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_CUR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[CUR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[IDX_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVR( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVR_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_MVW( PG_NUMBER )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 mov reg[MVW_PP], @PG_NUMBER
 0000              ENDIF
 0000              macro RAM_SETPAGE_IDX2STK
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 IF ( SYSTEM_MULTIPAGE_STACK )
 0000                    mov   A, reg[STK_PP]
 0000                    mov   reg[IDX_PP], A
 0000                 ELSE
 0000                    RAM_SETPAGE_IDX SYSTEM_STACK_PAGE
 0000                 ENDIF
 0000              ENDIF
 0000              macro RAM_CHANGE_PAGE_MODE( MODE )
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0000                 or    F,  FLAG_PGMODE_MASK & @MODE
 0000              ENDIF
 0000              macro RAM_SET_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 or    F,  FLAG_PGMODE_11b            ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 or    F,  FLAG_PGMODE_10b            ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_RESTORE_NATIVE_PAGING
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000              IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_11b ; LMM w/ IndexPage<==>StackPage
 0000              ENDIF ;  PGMODE LOCKED
 0000              IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                 RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b ; LMM with independent IndexPage
 0000              ENDIF ; PGMODE FREE
 0000              ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_STACKPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 or   F, FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_X_POINTS_TO_INDEXPAGE
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 and  F, ~FLAG_PGMODE_01b
 0000              ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
 0000              macro RAM_PROLOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
 0000                    RAM_X_POINTS_TO_STACKPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
 0000                    RAM_X_POINTS_TO_INDEXPAGE         ; exit native paging mode!
 0000                 ENDIF
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro RAM_EPILOGUE( ACTUAL_CLASS )
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_1 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_1
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_2 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_2
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_3 )
 0000                 RAM_RESTORE_NATIVE_PAGING
 0000              ENDIF ; RAM_USE_CLASS_3
 0000           
 0000              IF ( @ACTUAL_CLASS & RAM_USE_CLASS_4 )
 0000              ; Nothing to do
 0000              ENDIF ; RAM_USE_CLASS_4
 0000           
 0000              macro REG_PRESERVE( IOReg )
 0000              mov   A, reg[ @IOReg ]
 0000              push  A
 0000              macro REG_RESTORE( IOReg )
 0000              pop   A
 0000              mov   reg[ @IOReg ], A
 0000              macro ISR_PRESERVE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_PRESERVE CUR_PP
 0000                 REG_PRESERVE IDX_PP
 0000                 REG_PRESERVE MVR_PP
 0000                 REG_PRESERVE MVW_PP
 0000              ENDIF
 0000              macro ISR_RESTORE_PAGE_POINTERS
 0000              IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0000                 REG_RESTORE MVW_PP
 0000                 REG_RESTORE MVR_PP
 0000                 REG_RESTORE IDX_PP
 0000                 REG_RESTORE CUR_PP
 0000              ENDIF
 00C0           FLAG_PGMODE_MASK:  equ C0h     ; Paging control for > 256 bytes of RAM
 0000           FLAG_PGMODE_0:     equ 00h       ; Direct to Page 0,      indexed to Page 0
 0040           FLAG_PGMODE_1:     equ 40h       ; Direct to Page 0,      indexed to STK_PP page
 0080           FLAG_PGMODE_2:     equ 80h       ; Direct to CUR_PP page, indexed to IDX_PP page
 00C0           FLAG_PGMODE_3:     equ C0h       ; Direct to CUR_PP page, indexed to STK_PP page
 0000           FLAG_PGMODE_00b:   equ 00h       ; Same as PGMODE_0
 0040           FLAG_PGMODE_01b:   equ 40h       ; Same as PGMODE_1
 0080           FLAG_PGMODE_10b:   equ 80h       ; Same as PGMODE_2
 00C0           FLAG_PGMODE_11b:   equ C0h       ; Same as PGMODE_3
 0010           FLAG_XIO_MASK:     equ 10h     ; I/O Bank select for register space
 0008           FLAG_SUPER:        equ 08h     ; Supervisor Mode
 0004           FLAG_CARRY:        equ 04h     ; Carry Condition Flag
 0002           FLAG_ZERO:         equ 02h     ; Zero  Condition Flag
 0001           FLAG_GLOBAL_IE:    equ 01h     ; Glogal Interrupt Enable
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 0
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DR:       equ 00h          ; Port 0 Data Register                     (RW)
 0001           PRT0IE:       equ 01h          ; Port 0 Interrupt Enable Register         (RW)
 0002           PRT0GS:       equ 02h          ; Port 0 Global Select Register            (RW)
 0003           PRT0DM2:      equ 03h          ; Port 0 Drive Mode 2                      (RW)
 0000           ; Port 1
 0004           PRT1DR:       equ 04h          ; Port 1 Data Register                     (RW)
 0005           PRT1IE:       equ 05h          ; Port 1 Interrupt Enable Register         (RW)
 0006           PRT1GS:       equ 06h          ; Port 1 Global Select Register            (RW)
 0007           PRT1DM2:      equ 07h          ; Port 1 Drive Mode 2                      (RW)
 0000           ; Port 2
 0008           PRT2DR:       equ 08h          ; Port 2 Data Register                     (RW)
 0009           PRT2IE:       equ 09h          ; Port 2 Interrupt Enable Register         (RW)
 000A           PRT2GS:       equ 0Ah          ; Port 2 Global Select Register            (RW)
 000B           PRT2DM2:      equ 0Bh          ; Port 2 Drive Mode 2                      (RW)
 0000           ; Port 3
 000C           PRT3DR:       equ 0Ch          ; Port 3 Data Register                     (RW)
 000D           PRT3IE:       equ 0Dh          ; Port 3 Interrupt Enable Register         (RW)
 000E           PRT3GS:       equ 0Eh          ; Port 3 Global Select Register            (RW)
 000F           PRT3DM2:      equ 0Fh          ; Port 3 Drive Mode 2                      (RW)
 0000           ; Port 4
 0010           PRT4DR:       equ 10h          ; Port 4 Data Register                     (RW)
 0011           PRT4IE:       equ 11h          ; Port 4 Interrupt Enable Register         (RW)
 0012           PRT4GS:       equ 12h          ; Port 4 Global Select Register            (RW)
 0013           PRT4DM2:      equ 13h          ; Port 4 Drive Mode 2                      (RW)
 0000           ; Port 5
 0014           PRT5DR:       equ 14h          ; Port 5 Data Register                     (RW)
 0015           PRT5IE:       equ 15h          ; Port 5 Interrupt Enable Register         (RW)
 0016           PRT5GS:       equ 16h          ; Port 5 Global Select Register            (RW)
 0017           PRT5DM2:      equ 17h          ; Port 5 Drive Mode 2                      (RW)
 0000           ; Port 6
 0018           PRT6DR:       equ 18h          ; Port 6 Data Register                     (RW)
 0019           PRT6IE:       equ 19h          ; Port 6 Interrupt Enable Register         (RW)
 001A           PRT6GS:       equ 1Ah          ; Port 6 Global Select Register            (RW)
 001B           PRT6DM2:      equ 1Bh          ; Port 6 Drive Mode 2                      (RW)
 0000           ; Port 7
 001C           PRT7DR:       equ 1Ch          ; Port 7 Data Register                     (RW)
 001D           PRT7IE:       equ 1Dh          ; Port 7 Interrupt Enable Register         (RW)
 001E           PRT7GS:       equ 1Eh          ; Port 7 Global Select Register            (RW)
 001F           PRT7DM2:      equ 1Fh          ; Port 7 Drive Mode 2                      (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 1.
 0000           ;------------------------------------------------
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00DR0:     equ 20h          ; data register 0                          (#)
 0021           DBB00DR1:     equ 21h          ; data register 1                          (W)
 0022           DBB00DR2:     equ 22h          ; data register 2                          (RW)
 0023           DBB00CR0:     equ 23h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01DR0:     equ 24h          ; data register 0                          (#)
 0025           DBB01DR1:     equ 25h          ; data register 1                          (W)
 0026           DBB01DR2:     equ 26h          ; data register 2                          (RW)
 0027           DBB01CR0:     equ 27h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02DR0:     equ 28h          ; data register 0                          (#)
 0029           DCB02DR1:     equ 29h          ; data register 1                          (W)
 002A           DCB02DR2:     equ 2Ah          ; data register 2                          (RW)
 002B           DCB02CR0:     equ 2Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03DR0:     equ 2Ch          ; data register 0                          (#)
 002D           DCB03DR1:     equ 2Dh          ; data register 1                          (W)
 002E           DCB03DR2:     equ 2Eh          ; data register 2                          (RW)
 002F           DCB03CR0:     equ 2Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10DR0:     equ 30h          ; data register 0                          (#)
 0031           DBB10DR1:     equ 31h          ; data register 1                          (W)
 0032           DBB10DR2:     equ 32h          ; data register 2                          (RW)
 0033           DBB10CR0:     equ 33h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11DR0:     equ 34h          ; data register 0                          (#)
 0035           DBB11DR1:     equ 35h          ; data register 1                          (W)
 0036           DBB11DR2:     equ 36h          ; data register 2                          (RW)
 0037           DBB11CR0:     equ 37h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12DR0:     equ 38h          ; data register 0                          (#)
 0039           DCB12DR1:     equ 39h          ; data register 1                          (W)
 003A           DCB12DR2:     equ 3Ah          ; data register 2                          (RW)
 003B           DCB12CR0:     equ 3Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13DR0:     equ 3Ch          ; data register 0                          (#)
 003D           DCB13DR1:     equ 3Dh          ; data register 1                          (W)
 003E           DCB13DR2:     equ 3Eh          ; data register 2                          (RW)
 003F           DCB13CR0:     equ 3Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20DR0:     equ 40h          ; data register 0                          (#)
 0041           DBB20DR1:     equ 41h          ; data register 1                          (W)
 0042           DBB20DR2:     equ 42h          ; data register 2                          (RW)
 0043           DBB20CR0:     equ 43h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21DR0:     equ 44h          ; data register 0                          (#)
 0045           DBB21DR1:     equ 45h          ; data register 1                          (W)
 0046           DBB21DR2:     equ 46h          ; data register 2                          (RW)
 0047           DBB21CR0:     equ 47h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22DR0:     equ 48h          ; data register 0                          (#)
 0049           DCB22DR1:     equ 49h          ; data register 1                          (W)
 004A           DCB22DR2:     equ 4Ah          ; data register 2                          (RW)
 004B           DCB22CR0:     equ 4Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23DR0:     equ 4Ch          ; data register 0                          (#)
 004D           DCB23DR1:     equ 4Dh          ; data register 1                          (W)
 004E           DCB23DR2:     equ 4Eh          ; data register 2                          (RW)
 004F           DCB23CR0:     equ 4Fh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30DR0:     equ 50h          ; data register 0                          (#)
 0051           DBB30DR1:     equ 51h          ; data register 1                          (W)
 0052           DBB30DR2:     equ 52h          ; data register 2                          (RW)
 0053           DBB30CR0:     equ 53h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31DR0:     equ 54h          ; data register 0                          (#)
 0055           DBB31DR1:     equ 55h          ; data register 1                          (W)
 0056           DBB31DR2:     equ 56h          ; data register 2                          (RW)
 0057           DBB31CR0:     equ 57h          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32DR0:     equ 58h          ; data register 0                          (#)
 0059           DCB32DR1:     equ 59h          ; data register 1                          (W)
 005A           DCB32DR2:     equ 5Ah          ; data register 2                          (RW)
 005B           DCB32CR0:     equ 5Bh          ; control & status register 0              (#)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33DR0:     equ 5Ch          ; data register 0                          (#)
 005D           DCB33DR1:     equ 5Dh          ; data register 1                          (W)
 005E           DCB33DR2:     equ 5Eh          ; data register 2                          (RW)
 005F           DCB33CR0:     equ 5Fh          ; control & status register 0              (#)
 0000           
 0000           ;-------------------------------------
 0000           ;  Analog Resource Control Registers
 0000           ;-------------------------------------
 0060           AMX_IN:       equ 60h          ; Analog Input Multiplexor Control         (RW)
 00C0           AMX_IN_ACI3:          equ C0h    ; MASK: column 3 input mux
 0030           AMX_IN_ACI2:          equ 30h    ; MASK: column 2 input mux
 000C           AMX_IN_ACI1:          equ 0Ch    ; MASK: column 1 input mux
 0003           AMX_IN_ACI0:          equ 03h    ; MASK: column 0 input mux
 0000           
 0063           ARF_CR:       equ 63h          ; Analog Reference Control Register        (RW)
 0040           ARF_CR_HBE:           equ 40h    ; MASK: Bias level control
 0038           ARF_CR_REF:           equ 38h    ; MASK: Analog Reference controls
 0007           ARF_CR_REFPWR:        equ 07h    ; MASK: Analog Reference power
 0004           ARF_CR_APWR:          equ 04h    ; MASK: use deprecated; see datasheet
 0003           ARF_CR_SCPWR:         equ 03h    ; MASK: Switched Cap block power
 0000           
 0064           CMP_CR0:      equ 64h          ; Analog Comparator Bus 0 Register         (#)
 0080           CMP_CR0_COMP3:        equ 80h    ; MASK: Column 3 comparator state        (R)
 0040           CMP_CR0_COMP2:        equ 40h    ; MASK: Column 2 comparator state        (R)
 0020           CMP_CR0_COMP1:        equ 20h    ; MASK: Column 1 comparator state        (R)
 0010           CMP_CR0_COMP0:        equ 10h    ; MASK: Column 0 comparator state        (R)
 0008           CMP_CR0_AINT3:        equ 08h    ; MASK: Column 3 interrupt source        (RW)
 0004           CMP_CR0_AINT2:        equ 04h    ; MASK: Column 2 interrupt source        (RW)
 0002           CMP_CR0_AINT1:        equ 02h    ; MASK: Column 1 interrupt source        (RW)
 0001           CMP_CR0_AINT0:        equ 01h    ; MASK: Column 0 interrupt source        (RW)
 0000           
 0065           ASY_CR:       equ 65h          ; Analog Synchronizaton Control            (#)
 0070           ASY_CR_SARCOUNT:      equ 70h    ; MASK: SAR support: resolution count    (W)
 0008           ASY_CR_SARSIGN:       equ 08h    ; MASK: SAR support: sign                (RW)
 0006           ASY_CR_SARCOL:        equ 06h    ; MASK: SAR support: column spec         (RW)
 0001           ASY_CR_SYNCEN:        equ 01h    ; MASK: Stall bit                        (RW)
 0000           
 0066           CMP_CR1:      equ 66h          ; Analog Comparator Bus 1 Register         (RW)
 0080           CMP_CR1_ASYNCH3:      equ 80h    ; MASK: Column 3 comparator bus synch
 0040           CMP_CR1_ASYNCH2:      equ 40h    ; MASK: Column 2 comparator bus synch
 0020           CMP_CR1_ASYNCH1:      equ 20h    ; MASK: Column 1 comparator bus synch
 0010           CMP_CR1_ASYNCH0:      equ 10h    ; MASK: Column 0 comparator bus synch
 0000           
 0000           ;---------------------------------------------------
 0000           ;  Analog PSoC block Registers
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;---------------------------------------------------
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 0
 0070           ACB00CR3:     equ 70h          ; Control register 3                       (RW)
 0071           ACB00CR0:     equ 71h          ; Control register 0                       (RW)
 0072           ACB00CR1:     equ 72h          ; Control register 1                       (RW)
 0073           ACB00CR2:     equ 73h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 1
 0074           ACB01CR3:     equ 74h          ; Control register 3                       (RW)
 0075           ACB01CR0:     equ 75h          ; Control register 0                       (RW)
 0076           ACB01CR1:     equ 76h          ; Control register 1                       (RW)
 0077           ACB01CR2:     equ 77h          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 2
 0078           ACB02CR3:     equ 78h          ; Control register 3                       (RW)
 0079           ACB02CR0:     equ 79h          ; Control register 0                       (RW)
 007A           ACB02CR1:     equ 7Ah          ; Control register 1                       (RW)
 007B           ACB02CR2:     equ 7Bh          ; Control register 2                       (RW)
 0000           
 0000           ; Continuous Time PSoC block Type B Row 0 Col 3
 007C           ACB03CR3:     equ 7Ch          ; Control register 3                       (RW)
 007D           ACB03CR0:     equ 7Dh          ; Control register 0                       (RW)
 007E           ACB03CR1:     equ 7Eh          ; Control register 1                       (RW)
 007F           ACB03CR2:     equ 7Fh          ; Control register 2                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 0
 0080           ASC10CR0:     equ 80h          ; Control register 0                       (RW)
 0081           ASC10CR1:     equ 81h          ; Control register 1                       (RW)
 0082           ASC10CR2:     equ 82h          ; Control register 2                       (RW)
 0083           ASC10CR3:     equ 83h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 1
 0084           ASD11CR0:     equ 84h          ; Control register 0                       (RW)
 0085           ASD11CR1:     equ 85h          ; Control register 1                       (RW)
 0086           ASD11CR2:     equ 86h          ; Control register 2                       (RW)
 0087           ASD11CR3:     equ 87h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 1 Col 2
 0088           ASC12CR0:     equ 88h          ; Control register 0                       (RW)
 0089           ASC12CR1:     equ 89h          ; Control register 1                       (RW)
 008A           ASC12CR2:     equ 8Ah          ; Control register 2                       (RW)
 008B           ASC12CR3:     equ 8Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 1 Col 3
 008C           ASD13CR0:     equ 8Ch          ; Control register 0                       (RW)
 008D           ASD13CR1:     equ 8Dh          ; Control register 1                       (RW)
 008E           ASD13CR2:     equ 8Eh          ; Control register 2                       (RW)
 008F           ASD13CR3:     equ 8Fh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 0
 0090           ASD20CR0:     equ 90h          ; Control register 0                       (RW)
 0091           ASD20CR1:     equ 91h          ; Control register 1                       (RW)
 0092           ASD20CR2:     equ 92h          ; Control register 2                       (RW)
 0093           ASD20CR3:     equ 93h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 1
 0094           ASC21CR0:     equ 94h          ; Control register 0                       (RW)
 0095           ASC21CR1:     equ 95h          ; Control register 1                       (RW)
 0096           ASC21CR2:     equ 96h          ; Control register 2                       (RW)
 0097           ASC21CR3:     equ 97h          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType D Row 2 Col 2
 0098           ASD22CR0:     equ 98h          ; Control register 0                       (RW)
 0099           ASD22CR1:     equ 99h          ; Control register 1                       (RW)
 009A           ASD22CR2:     equ 9Ah          ; Control register 2                       (RW)
 009B           ASD22CR3:     equ 9Bh          ; Control register 3                       (RW)
 0000           
 0000           ; Switched Cap PSoC blockType C Row 2 Col 3
 009C           ASC23CR0:     equ 9Ch          ; Control register 0                       (RW)
 009D           ASC23CR1:     equ 9Dh          ; Control register 1                       (RW)
 009E           ASC23CR2:     equ 9Eh          ; Control register 2                       (RW)
 009F           ASC23CR3:     equ 9Fh          ; Control register 3                       (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global General Purpose Data Registers
 0000           ;-----------------------------------------------
 006C           TMP0_DR:      equ 6Ch          ; deprecated do not use
 006D           TMP1_DR:      equ 6Dh          ; deprecated do not use
 006E           TMP2_DR:      equ 6Eh          ; deprecated do not use
 006F           TMP3_DR:      equ 6Fh          ; deprecated do not use
 0000           
 006C           TMP_DR0:      equ 6Ch          ; Temporary Data Register 0                (RW)
 006D           TMP_DR1:      equ 6Dh          ; Temporary Data Register 1                (RW)
 006E           TMP_DR2:      equ 6Eh          ; Temporary Data Register 2                (RW)
 006F           TMP_DR3:      equ 6Fh          ; Temporary Data Register 3                (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Row Digital Interconnects
 0000           ;
 0000           ;  Note: the following registers are mapped into
 0000           ;  both register bank 0 AND register bank 1.
 0000           ;------------------------------------------------
 0000           
 00B0           RDI0RI:       equ B0h          ; Row Digital Interconnect Row 0 Input Reg (RW)
 00B1           RDI0SYN:      equ B1h          ; Row Digital Interconnect Row 0 Sync Reg  (RW)
 00B2           RDI0IS:       equ B2h          ; Row 0 Input Select Register              (RW)
 00B3           RDI0LT0:      equ B3h          ; Row 0 Look Up Table Register 0           (RW)
 00B4           RDI0LT1:      equ B4h          ; Row 0 Look Up Table Register 1           (RW)
 00B5           RDI0RO0:      equ B5h          ; Row 0 Output Register 0                  (RW)
 00B6           RDI0RO1:      equ B6h          ; Row 0 Output Register 1                  (RW)
 0000           
 00B8           RDI1RI:       equ B8h          ; Row Digital Interconnect Row 1 Input Reg (RW)
 00B9           RDI1SYN:      equ B9h          ; Row Digital Interconnect Row 1 Sync Reg  (RW)
 00BA           RDI1IS:       equ BAh          ; Row 1 Input Select Register              (RW)
 00BB           RDI1LT0:      equ BBh          ; Row 1 Look Up Table Register 0           (RW)
 00BC           RDI1LT1:      equ BCh          ; Row 1 Look Up Table Register 1           (RW)
 00BD           RDI1RO0:      equ BDh          ; Row 1 Output Register 0                  (RW)
 00BE           RDI1RO1:      equ BEh          ; Row 1 Output Register 1                  (RW)
 0000           
 00C0           RDI2RI:       equ C0h          ; Row Digital Interconnect Row 2 Input Reg (RW)
 00C1           RDI2SYN:      equ C1h          ; Row Digital Interconnect Row 2 Sync Reg  (RW)
 00C2           RDI2IS:       equ C2h          ; Row 2 Input Select Register              (RW)
 00C3           RDI2LT0:      equ C3h          ; Row 2 Look Up Table Register 0           (RW)
 00C4           RDI2LT1:      equ C4h          ; Row 2 Look Up Table Register 1           (RW)
 00C5           RDI2RO0:      equ C5h          ; Row 2 Output Register 0                  (RW)
 00C6           RDI2RO1:      equ C6h          ; Row 2 Output Register 1                  (RW)
 0000           
 00C8           RDI3RI:       equ C8h          ; Row Digital Interconnect Row 3 Input Reg (RW)
 00C9           RDI3SYN:      equ C9h          ; Row Digital Interconnect Row 3 Sync Reg  (RW)
 00CA           RDI3IS:       equ CAh          ; Row 3 Input Select Register              (RW)
 00CB           RDI3LT0:      equ CBh          ; Row 3 Look Up Table Register 0           (RW)
 00CC           RDI3LT1:      equ CCh          ; Row 3 Look Up Table Register 1           (RW)
 00CD           RDI3RO0:      equ CDh          ; Row 3 Output Register 0                  (RW)
 00CE           RDI3RO1:      equ CEh          ; Row 3 Output Register 1                  (RW)
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Ram Page Pointers
 0000           ;-----------------------------------------------
 00D0           CUR_PP:      equ D0h           ; Current   Page Pointer
 00D1           STK_PP:      equ D1h           ; Stack     Page Pointer
 00D3           IDX_PP:      equ D3h           ; Index     Page Pointer
 00D4           MVR_PP:      equ D4h           ; MVI Read  Page Pointer
 00D5           MVW_PP:      equ D5h           ; MVI Write Page Pointer
 0000           
 0000           ;------------------------------------------------
 0000           ;  I2C Configuration Registers
 0000           ;------------------------------------------------
 00D6           I2C_CFG:      equ D6h          ; I2C Configuration Register               (RW)
 0040           I2C_CFG_PINSEL:         equ 40h  ; MASK: Select P1[0] and P1[1] for I2C
 0020           I2C_CFG_BUSERR_IE:      equ 20h  ; MASK: Enable interrupt on Bus Error
 0010           I2C_CFG_STOP_IE:        equ 10h  ; MASK: Enable interrupt on Stop
 0000           I2C_CFG_CLK_RATE_100K:  equ 00h  ; MASK: I2C clock set at 100K
 0004           I2C_CFG_CLK_RATE_400K:  equ 04h  ; MASK: I2C clock set at 400K
 0008           I2C_CFG_CLK_RATE_50K:   equ 08h  ; MASK: I2C clock set at 50K
 000C           I2C_CFG_CLK_RATE_1M6:   equ 0Ch  ; MASK: I2C clock set at 1.6M
 000C           I2C_CFG_CLK_RATE:       equ 0Ch  ; MASK: I2C clock rate setting mask
 0002           I2C_CFG_PSELECT_MASTER: equ 02h  ; MASK: Enable I2C Master
 0001           I2C_CFG_PSELECT_SLAVE:  equ 01h  ; MASK: Enable I2C Slave
 0000           
 00D7           I2C_SCR:      equ D7h          ; I2C Status and Control Register          (#)
 0080           I2C_SCR_BUSERR:        equ 80h   ; MASK: I2C Bus Error detected           (RC)
 0040           I2C_SCR_LOSTARB:       equ 40h   ; MASK: I2C Arbitration lost             (RC)
 0020           I2C_SCR_STOP:          equ 20h   ; MASK: I2C Stop detected                (RC)
 0010           I2C_SCR_ACK:           equ 10h   ; MASK: ACK the last byte                (RW)
 0008           I2C_SCR_ADDR:          equ 08h   ; MASK: Address rcv'd is Slave address   (RC)
 0004           I2C_SCR_XMIT:          equ 04h   ; MASK: Set transfer to tranmit mode     (RW)
 0002           I2C_SCR_LRB:           equ 02h   ; MASK: Last recieved bit                (RC)
 0001           I2C_SCR_BYTECOMPLETE:  equ 01h   ; MASK: Transfer of byte complete        (RC)
 0000           
 00D8           I2C_DR:       equ D8h          ; I2C Data Register                        (RW)
 0000           
 00D9           I2C_MSCR:     equ D9h          ; I2C Master Status and Control Register   (#)
 0008           I2C_MSCR_BUSY:         equ 08h   ; MASK: I2C Busy (Start detected)        (R)
 0004           I2C_MSCR_MODE:         equ 04h   ; MASK: Start has been generated         (R)
 0002           I2C_MSCR_RESTART:      equ 02h   ; MASK: Generate a Restart condition     (RW)
 0001           I2C_MSCR_START:        equ 01h   ; MASK: Generate a Start condition       (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;------------------------------------------------
 00DA           INT_CLR0:     equ DAh          ; Interrupt Clear Register 0               (RW)
 0000                                          ; Use INT_MSK0 bit field masks
 00DB           INT_CLR1:     equ DBh          ; Interrupt Clear Register 1               (RW)
 0000                                          ; Use INT_MSK1 bit field masks
 00DC           INT_CLR2:     equ DCh          ; Interrupt Clear Register 2               (RW)
 0000                                          ; Use INT_MSK2 bit field masks
 00DD           INT_CLR3:     equ DDh          ; Interrupt Clear Register 3               (RW)
 0000                                          ; Use INT_MSK3 bit field masks
 0000           
 00DE           INT_MSK3:     equ DEh          ; I2C and Software Mask Register           (RW)
 0080           INT_MSK3_ENSWINT:          equ 80h ; MASK: enable/disable SW interrupt
 0001           INT_MSK3_I2C:              equ 01h ; MASK: enable/disable I2C interrupt
 0000           
 00DF           INT_MSK2:     equ DFh          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK2_DCB33:            equ 80h ; MASK: enable/disable DCB33 block interrupt
 0040           INT_MSK2_DCB32:            equ 40h ; MASK: enable/disable DCB32 block interrupt
 0020           INT_MSK2_DBB31:            equ 20h ; MASK: enable/disable DBB31 block interrupt
 0010           INT_MSK2_DBB30:            equ 10h ; MASK: enable/disable DBB30 block interrupt
 0008           INT_MSK2_DCB23:            equ 08h ; MASK: enable/disable DCB23 block interrupt
 0004           INT_MSK2_DCB22:            equ 04h ; MASK: enable/disable DCB22 block interrupt
 0002           INT_MSK2_DBB21:            equ 02h ; MASK: enable/disable DBB21 block interrupt
 0001           INT_MSK2_DBB20:            equ 01h ; MASK: enable/disable DBB20 block interrupt
 0000           
 00E0           INT_MSK0:     equ E0h          ; General Interrupt Mask Register          (RW)
 0080           INT_MSK0_VC3:              equ 80h ; MASK: enable/disable VC3 interrupt
 0040           INT_MSK0_SLEEP:            equ 40h ; MASK: enable/disable sleep interrupt
 0020           INT_MSK0_GPIO:             equ 20h ; MASK: enable/disable GPIO  interrupt
 0010           INT_MSK0_ACOLUMN_3:        equ 10h ; MASK: enable/disable Analog col 3 interrupt
 0008           INT_MSK0_ACOLUMN_2:        equ 08h ; MASK: enable/disable Analog col 2 interrupt
 0004           INT_MSK0_ACOLUMN_1:        equ 04h ; MASK: enable/disable Analog col 1 interrupt
 0002           INT_MSK0_ACOLUMN_0:        equ 02h ; MASK: enable/disable Analog col 0 interrupt
 0001           INT_MSK0_VOLTAGE_MONITOR:  equ 01h ; MASK: enable/disable Volts interrupt
 0000           
 00E1           INT_MSK1:     equ E1h          ; Digital PSoC block Mask Register         (RW)
 0080           INT_MSK1_DCB13:            equ 80h ; MASK: enable/disable DCB13 block interrupt
 0040           INT_MSK1_DCB12:            equ 40h ; MASK: enable/disable DCB12 block interrupt
 0020           INT_MSK1_DBB11:            equ 20h ; MASK: enable/disable DBB11 block interrupt
 0010           INT_MSK1_DBB10:            equ 10h ; MASK: enable/disable DBB10 block interrupt
 0008           INT_MSK1_DCB03:            equ 08h ; MASK: enable/disable DCB03 block interrupt
 0004           INT_MSK1_DCB02:            equ 04h ; MASK: enable/disable DCB02 block interrupt
 0002           INT_MSK1_DBB01:            equ 02h ; MASK: enable/disable DBB01 block interrupt
 0001           INT_MSK1_DBB00:            equ 01h ; MASK: enable/disable DBB00 block interrupt
 0000           
 00E2           INT_VC:       equ E2h          ; Interrupt vector register                (RC)
 00E3           RES_WDT:      equ E3h          ; Watch Dog Timer Register                 (W)
 0000           
 0000           ; DECIMATOR Registers
 00E4           DEC_DH:       equ E4h          ; Data Register (high byte)                (RC)
 00E5           DEC_DL:       equ E5h          ; Data Register ( low byte)                (RC)
 00E6           DEC_CR0:      equ E6h          ; Data Control Register 0                  (RW)
 00E7           DEC_CR1:      equ E7h          ; Data Control Register 1                  (RW)
 0000                                          ; Also see DEC_CR2 in bank 1
 0000           
 0000           ; Multiplier and MAC (Multiply/Accumulate) Unit
 0000           //   Compatibility Set: Maps onto MAC0
 00E8           MUL_X:        equ E8h          ; Multiplier X Register (write)            (W)
 00E9           MUL_Y:        equ E9h          ; Multiplier Y Register (write)            (W)
 00EA           MUL_DH:       equ EAh          ; Multiplier Result Data (high byte read)  (R)
 00EB           MUL_DL:       equ EBh          ; Multiplier Result Data ( low byte read)  (R)
 00EC           MAC_X:        equ ECh          ; write = MAC X register [also see ACC_DR1]
 00EC           ACC_DR1:      equ MAC_X        ; read =  MAC Accumulator, byte 1          (RW)
 00ED           MAC_Y:        equ EDh          ; write = MAC Y register [also see ACC_DR0]
 00ED           ACC_DR0:      equ MAC_Y        ; read =  MAC Accumulator, byte 0          (RW)
 00EE           MAC_CL0:      equ EEh          ; write = MAC Clear Accum [also see ACC_DR3]
 00EE           ACC_DR3:      equ MAC_CL0      ; read =  MAC Accumulator, byte 3          (RW)
 00EF           MAC_CL1:      equ EFh          ; write = MAC Clear Accum [also see ACC_DR2]
 00EF           ACC_DR2:      equ MAC_CL1      ; read =  MAC Accumulator, byte 2          (RW)
 0000           
 0000           // Multiply/Accumulate Unit 0
 00E8           MUL0_X:       equ E8h          ; Multiplier 0 X Register (write)          (W)
 00E9           MUL0_Y:       equ E9h          ; Multiplier 0 Y Register (write)          (W)
 00EA           MUL0_DH:      equ EAh          ; Multiplier 0 Result Data (high byte read)(R)
 00EB           MUL0_DL:      equ EBh          ; Multiplier 0 Result Data ( low byte read)(R)
 00EC           MAC0_X:       equ ECh          ; write = MAC 0 X register [also see ACC_DR1]
 00EC           ACC0_DR1:     equ MAC0_X       ; read =  MAC 0 Accumulator, byte 1        (RW)
 00ED           MAC0_Y:       equ EDh          ; write = MAC 0 Y register [also see ACC_DR0]
 00ED           ACC0_DR0:     equ MAC0_Y       ; read =  MAC 0 Accumulator, byte 0        (RW)
 00EE           MAC0_CL0:     equ EEh          ; write = MAC 0 Clear Accum [also see ACC_DR3]
 00EE           ACC0_DR3:     equ MAC0_CL0     ; read =  MAC 0 Accumulator, byte 3        (RW)
 00EF           MAC0_CL1:     equ EFh          ; write = MAC 0 Clear Accum [also see ACC_DR2]
 00EF           ACC0_DR2:     equ MAC0_CL1     ; read =  MAC 0 Accumulator, byte 2        (RW)
 0000           
 0000           // Multiply/Accumulate Unit 1
 00A8           MUL1_X:       equ A8h          ; Multiplier 1 X Register (write)          (W)
 00A9           MUL1_Y:       equ A9h          ; Multiplier 1 Y Register (write)          (W)
 00AA           MUL1_DH:      equ AAh          ; Multiplier 1 Result Data (high byte read)(R)
 00AB           MUL1_DL:      equ ABh          ; Multiplier 1 Result Data ( low byte read)(R)
 00AC           MAC1_X:       equ ACh          ; write = MAC 1 X register [also see ACC_DR1]
 00AC           ACC1_DR1:     equ MAC1_X       ; read =  MAC 1 Accumulator, byte 1        (RW)
 00AD           MAC1_Y:       equ ADh          ; write = MAC 1 Y register [also see ACC_DR0]
 00AD           ACC1_DR0:     equ MAC1_Y       ; read =  MAC 1 Accumulator, byte 0        (RW)
 00AE           MAC1_CL0:     equ AEh          ; write = MAC 1 Clear Accum [also see ACC_DR3]
 00AE           ACC1_DR3:     equ MAC1_CL0     ; read =  MAC 1 Accumulator, byte 3        (RW)
 00AF           MAC1_CL1:     equ AFh          ; write = MAC 1 Clear Accum [also see ACC_DR2]
 00AF           ACC1_DR2:     equ MAC1_CL1     ; read =  MAC 1 Accumulator, byte 2        (RW)
 0000           
 0000           ;------------------------------------------------------
 0000           ;  System Status and Control Registers
 0000           ;
 0000           ;  Note: The following registers are mapped into both
 0000           ;        register bank 0 AND register bank 1.
 0000           ;------------------------------------------------------
 00F7           CPU_F:        equ F7h          ; CPU Flag Register Access                 (RO)
 0000                                              ; Use FLAG_ masks defined at top of file
 0000           
 00FE           CPU_SCR1:     equ FEh          ; CPU Status and Control Register #1       (#)
 0080           CPU_SCR1_IRESS:         equ 80h    ; MASK: Boot Phase Re-entry bit
 0010           CPU_SCR1_SLIMO:         equ 10h    ; MASK: Slow Main Oscillator Mode
 0008           CPU_SCR1_ECO_ALWD_WR:   equ 08h    ; MASK: flag, ECO allowed has been written
 0004           CPU_SCR1_ECO_ALLOWED:   equ 04h    ; MASK: ECO allowed to be enabled
 0001           CPU_SCR1_IRAMDIS:       equ 01h    ; MASK: Disable RAM initialization on WDR
 0000           
 00FF           CPU_SCR0:     equ FFh          ; CPU Status and Control Register #2       (#)
 0080           CPU_SCR0_GIE_MASK:      equ 80h    ; MASK: Global Interrupt Enable shadow
 0020           CPU_SCR0_WDRS_MASK:     equ 20h    ; MASK: Watch Dog Timer Reset
 0010           CPU_SCR0_PORS_MASK:     equ 10h    ; MASK: power-on reset bit PORS
 0008           CPU_SCR0_SLEEP_MASK:    equ 08h    ; MASK: Enable Sleep
 0001           CPU_SCR0_STOP_MASK:     equ 01h    ; MASK: Halt CPU bit
 0000           
 0000           
 0000           ;;=============================================================================
 0000           ;;      Register Space, Bank 1
 0000           ;;=============================================================================
 0000           
 0000           ;------------------------------------------------
 0000           ;  Port Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           ; Port 0
 0000           PRT0DM0:      equ 00h          ; Port 0 Drive Mode 0                      (RW)
 0001           PRT0DM1:      equ 01h          ; Port 0 Drive Mode 1                      (RW)
 0002           PRT0IC0:      equ 02h          ; Port 0 Interrupt Control 0               (RW)
 0003           PRT0IC1:      equ 03h          ; Port 0 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 1
 0004           PRT1DM0:      equ 04h          ; Port 1 Drive Mode 0                      (RW)
 0005           PRT1DM1:      equ 05h          ; Port 1 Drive Mode 1                      (RW)
 0006           PRT1IC0:      equ 06h          ; Port 1 Interrupt Control 0               (RW)
 0007           PRT1IC1:      equ 07h          ; Port 1 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 2
 0008           PRT2DM0:      equ 08h          ; Port 2 Drive Mode 0                      (RW)
 0009           PRT2DM1:      equ 09h          ; Port 2 Drive Mode 1                      (RW)
 000A           PRT2IC0:      equ 0Ah          ; Port 2 Interrupt Control 0               (RW)
 000B           PRT2IC1:      equ 0Bh          ; Port 2 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 3
 000C           PRT3DM0:      equ 0Ch          ; Port 3 Drive Mode 0                      (RW)
 000D           PRT3DM1:      equ 0Dh          ; Port 3 Drive Mode 1                      (RW)
 000E           PRT3IC0:      equ 0Eh          ; Port 3 Interrupt Control 0               (RW)
 000F           PRT3IC1:      equ 0Fh          ; Port 3 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 4
 0010           PRT4DM0:      equ 10h          ; Port 4 Drive Mode 0                      (RW)
 0011           PRT4DM1:      equ 11h          ; Port 4 Drive Mode 1                      (RW)
 0012           PRT4IC0:      equ 12h          ; Port 4 Interrupt Control 0               (RW)
 0013           PRT4IC1:      equ 13h          ; Port 4 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 5
 0014           PRT5DM0:      equ 14h          ; Port 5 Drive Mode 0                      (RW)
 0015           PRT5DM1:      equ 15h          ; Port 5 Drive Mode 1                      (RW)
 0016           PRT5IC0:      equ 16h          ; Port 5 Interrupt Control 0               (RW)
 0017           PRT5IC1:      equ 17h          ; Port 5 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 6
 0018           PRT6DM0:      equ 18h          ; Port 6 Drive Mode 0                      (RW)
 0019           PRT6DM1:      equ 19h          ; Port 6 Drive Mode 1                      (RW)
 001A           PRT6IC0:      equ 1Ah          ; Port 6 Interrupt Control 0               (RW)
 001B           PRT6IC1:      equ 1Bh          ; Port 6 Interrupt Control 1               (RW)
 0000           
 0000           ; Port 7
 001C           PRT7DM0:      equ 1Ch          ; Port 7 Drive Mode 0                      (RW)
 001D           PRT7DM1:      equ 1Dh          ; Port 7 Drive Mode 1                      (RW)
 001E           PRT7IC0:      equ 1Eh          ; Port 7 Interrupt Control 0               (RW)
 001F           PRT7IC1:      equ 1Fh          ; Port 7 Interrupt Control 1               (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Digital PSoC(tm) block Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0000           ; Digital PSoC block 00, Basic Type B
 0020           DBB00FN:      equ 20h          ; Function Register                        (RW)
 0021           DBB00IN:      equ 21h          ;    Input Register                        (RW)
 0022           DBB00OU:      equ 22h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 01, Basic Type B
 0024           DBB01FN:      equ 24h          ; Function Register                        (RW)
 0025           DBB01IN:      equ 25h          ;    Input Register                        (RW)
 0026           DBB01OU:      equ 26h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 02, Communications Type B
 0028           DCB02FN:      equ 28h          ; Function Register                        (RW)
 0029           DCB02IN:      equ 29h          ;    Input Register                        (RW)
 002A           DCB02OU:      equ 2Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 03, Communications Type B
 002C           DCB03FN:      equ 2Ch          ; Function Register                        (RW)
 002D           DCB03IN:      equ 2Dh          ;    Input Register                        (RW)
 002E           DCB03OU:      equ 2Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 10, Basic Type B
 0030           DBB10FN:      equ 30h          ; Function Register                        (RW)
 0031           DBB10IN:      equ 31h          ;    Input Register                        (RW)
 0032           DBB10OU:      equ 32h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 11, Basic Type B
 0034           DBB11FN:      equ 34h          ; Function Register                        (RW)
 0035           DBB11IN:      equ 35h          ;    Input Register                        (RW)
 0036           DBB11OU:      equ 36h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 12, Communications Type B
 0038           DCB12FN:      equ 38h          ; Function Register                        (RW)
 0039           DCB12IN:      equ 39h          ;    Input Register                        (RW)
 003A           DCB12OU:      equ 3Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 13, Communications Type B
 003C           DCB13FN:      equ 3Ch          ; Function Register                        (RW)
 003D           DCB13IN:      equ 3Dh          ;    Input Register                        (RW)
 003E           DCB13OU:      equ 3Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 20, Basic Type B
 0040           DBB20FN:      equ 40h          ; Function Register                        (RW)
 0041           DBB20IN:      equ 41h          ;    Input Register                        (RW)
 0042           DBB20OU:      equ 42h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 21, Basic Type B
 0044           DBB21FN:      equ 44h          ; Function Register                        (RW)
 0045           DBB21IN:      equ 45h          ;    Input Register                        (RW)
 0046           DBB21OU:      equ 46h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 22, Communications Type B
 0048           DCB22FN:      equ 48h          ; Function Register                        (RW)
 0049           DCB22IN:      equ 49h          ;    Input Register                        (RW)
 004A           DCB22OU:      equ 4Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 23, Communications Type B
 004C           DCB23FN:      equ 4Ch          ; Function Register                        (RW)
 004D           DCB23IN:      equ 4Dh          ;    Input Register                        (RW)
 004E           DCB23OU:      equ 4Eh          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 30, Basic Type B
 0050           DBB30FN:      equ 50h          ; Function Register                        (RW)
 0051           DBB30IN:      equ 51h          ;    Input Register                        (RW)
 0052           DBB30OU:      equ 52h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 31, Basic Type B
 0054           DBB31FN:      equ 54h          ; Function Register                        (RW)
 0055           DBB31IN:      equ 55h          ;    Input Register                        (RW)
 0056           DBB31OU:      equ 56h          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 32, Communications Type B
 0058           DCB32FN:      equ 58h          ; Function Register                        (RW)
 0059           DCB32IN:      equ 59h          ;    Input Register                        (RW)
 005A           DCB32OU:      equ 5Ah          ;   Output Register                        (RW)
 0000           
 0000           ; Digital PSoC block 33, Communications Type B
 005C           DCB33FN:      equ 5Ch          ; Function Register                        (RW)
 005D           DCB33IN:      equ 5Dh          ;    Input Register                        (RW)
 005E           DCB33OU:      equ 5Eh          ;   Output Register                        (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  System and Global Resource Registers
 0000           ;  Note: Also see this address range in Bank 0.
 0000           ;------------------------------------------------
 0000           
 0060           CLK_CR0:      equ 60h          ; Analog Column Clock Select Register 0    (RW)
 00C0           CLK_CR0_ACOLUMN_3:    equ C0h    ; MASK: Specify clock for analog cloumn
 0030           CLK_CR0_ACOLUMN_2:    equ 30h    ; MASK: Specify clock for analog cloumn
 000C           CLK_CR0_ACOLUMN_1:    equ 0Ch    ; MASK: Specify clock for analog cloumn
 0003           CLK_CR0_ACOLUMN_0:    equ 03h    ; MASK: Specify clock for analog cloumn
 0000           
 0061           CLK_CR1:      equ 61h          ; Analog Clock Source Select Register 1    (RW)
 0040           CLK_CR1_SHDIS:        equ 40h    ; MASK: Sample and Hold Disable (all Columns)
 0038           CLK_CR1_ACLK1:        equ 38h    ; MASK: Digital PSoC block for analog source
 0007           CLK_CR1_ACLK2:        equ 07h    ; MASK: Digital PSoC block for analog source
 0000           
 0062           ABF_CR0:      equ 62h          ; Analog Output Buffer Control Register 0  (RW)
 0080           ABF_CR0_ACOL1MUX:     equ 80h    ; MASK: Analog Column 1 Mux control
 0040           ABF_CR0_ACOL2MUX:     equ 40h    ; MASK: Analog Column 2 Mux control
 0020           ABF_CR0_ABUF1EN:      equ 20h    ; MASK: Enable ACol 1 analog buffer (P0[5])
 0010           ABF_CR0_ABUF2EN:      equ 10h    ; MASK: Enable ACol 2 analog buffer (P0[4])
 0008           ABF_CR0_ABUF0EN:      equ 08h    ; MASK: Enable ACol 0 analog buffer (P0[3])
 0004           ABF_CR0_ABUF3EN:      equ 04h    ; MASK: Enable ACol 3 analog buffer (P0[2])
 0002           ABF_CR0_BYPASS:       equ 02h    ; MASK: Bypass the analog buffers
 0001           ABF_CR0_PWR:          equ 01h    ; MASK: High power mode on all analog buffers
 0000           
 0063           AMD_CR0:      equ 63h          ; Analog Modulator Control Register 0      (RW)
 0070           AMD_CR0_AMOD2:        equ 70h    ; MASK: Modulation source for analog column 2
 0007           AMD_CR0_AMOD0:        equ 07h    ; MASK: Modulation source for analog column 1
 0000           
 0066           AMD_CR1:      equ 66h          ; Analog Modulator Control Register 1      (RW)
 0070           AMD_CR1_AMOD3:        equ 70h    ; MASK: Modulation ctrl for analog column 3
 0007           AMD_CR1_AMOD1:        equ 07h    ; MASK: Modulation ctrl for analog column 1
 0000           
 0067           ALT_CR0:      equ 67h          ; Analog Look Up Table (LUT) Register 0    (RW)
 00F0           ALT_CR0_LUT1:         equ F0h    ; MASK: Look up table 1 selection
 000F           ALT_CR0_LUT0:         equ 0Fh    ; MASK: Look up table 0 selection
 0000           
 0068           ALT_CR1:      equ 68h          ; Analog Look Up Table (LUT) Register 1    (RW)
 00F0           ALT_CR1_LUT3:         equ F0h    ; MASK: Look up table 3 selection
 000F           ALT_CR1_LUT2:         equ 0Fh    ; MASK: Look up table 2 selection
 0000           
 0069           CLK_CR2:      equ 69h          ; Analog Clock Source Control Register 2   (RW)
 0008           CLK_CR2_ACLK1R:       equ 08h    ; MASK: Analog Clock 1 selection range
 0001           CLK_CR2_ACLK0R:       equ 01h    ; MASK: Analog Clock 0 selection range
 0000           
 0000           ;------------------------------------------------
 0000           ;  Global Digital Interconnects
 0000           ;------------------------------------------------
 0000           
 00D0           GDI_O_IN:     equ D0h          ; Global Dig Interconnect Odd Inputs Reg   (RW)
 00D1           GDI_E_IN:     equ D1h          ; Global Dig Interconnect Even Inputs Reg  (RW)
 00D2           GDI_O_OU:     equ D2h          ; Global Dig Interconnect Odd Outputs Reg  (RW)
 00D3           GDI_E_OU:     equ D3h          ; Global Dig Interconnect Even Outputs Reg (RW)
 0000           
 0000           ;------------------------------------------------
 0000           ;  Clock and System Control Registers
 0000           ;------------------------------------------------
 0000           
 00DD           OSC_GO_EN:    equ DDh          ; Oscillator to Global Outputs Enable Register (RW)
 0080           OSC_GOEN_SLPINT:      equ 80h	 ; Enable Sleep Timer onto GOE[7]
 0040           OSC_GOEN_VC3:         equ 40h    ; Enable VC3 onto GOE[6]
 0020           OSC_GOEN_VC2:         equ 20h    ; Enable VC2 onto GOE[5]
 0010           OSC_GOEN_VC1:         equ 10h    ; Enable VC1 onto GOE[4]
 0008           OSC_GOEN_SYSCLKX2:    equ 08h    ; Enable 2X SysClk onto GOE[3]
 0004           OSC_GOEN_SYSCLK:      equ 04h    ; Enable 1X SysClk onto GOE[2]
 0002           OSC_GOEN_CLK24M:      equ 02h    ; Enable 24 MHz clock onto GOE[1]
 0001           OSC_GOEN_CLK32K:      equ 01h    ; Enable 32 kHz clock onto GOE[0]
 0000           
 00DE           OSC_CR4:      equ DEh          ; Oscillator Control Register 4            (RW)
 0003           OSC_CR4_VC3:          equ 03h    ; MASK: System VC3 Clock source
 0000           
 00DF           OSC_CR3:      equ DFh          ; Oscillator Control Register 3            (RW)
 0000           
 00E0           OSC_CR0:      equ E0h          ; System Oscillator Control Register 0     (RW)
 0080           OSC_CR0_32K_SELECT:   equ 80h    ; MASK: Enable/Disable External XTAL Osc
 0040           OSC_CR0_PLL_MODE:     equ 40h    ; MASK: Enable/Disable PLL
 0020           OSC_CR0_NO_BUZZ:      equ 20h    ; MASK: Bandgap always powered/BUZZ bandgap
 0018           OSC_CR0_SLEEP:        equ 18h    ; MASK: Set Sleep timer freq/period
 0000           OSC_CR0_SLEEP_512Hz:  equ 00h    ;     Set sleep bits for 1.95ms period
 0008           OSC_CR0_SLEEP_64Hz:   equ 08h    ;     Set sleep bits for 15.6ms period
 0010           OSC_CR0_SLEEP_8Hz:    equ 10h    ;     Set sleep bits for 125ms period
 0018           OSC_CR0_SLEEP_1Hz:    equ 18h    ;     Set sleep bits for 1 sec period
 0007           OSC_CR0_CPU:          equ 07h    ; MASK: Set CPU Frequency
 0000           OSC_CR0_CPU_3MHz:     equ 00h    ;     set CPU Freq bits for 3MHz Operation
 0001           OSC_CR0_CPU_6MHz:     equ 01h    ;     set CPU Freq bits for 6MHz Operation
 0002           OSC_CR0_CPU_12MHz:    equ 02h    ;     set CPU Freq bits for 12MHz Operation
 0003           OSC_CR0_CPU_24MHz:    equ 03h    ;     set CPU Freq bits for 24MHz Operation
 0004           OSC_CR0_CPU_1d5MHz:   equ 04h    ;     set CPU Freq bits for 1.5MHz Operation
 0005           OSC_CR0_CPU_750kHz:   equ 05h    ;     set CPU Freq bits for 750kHz Operation
 0006           OSC_CR0_CPU_187d5kHz: equ 06h    ;     set CPU Freq bits for 187.5kHz Operation
 0007           OSC_CR0_CPU_93d7kHz:  equ 07h    ;     set CPU Freq bits for 93.7kHz Operation
 0000           
 00E1           OSC_CR1:      equ E1h          ; System VC1/VC2 Divider Control Register  (RW)
 00F0           OSC_CR1_VC1:          equ F0h    ; MASK: System VC1 24MHz/External Clk divider
 000F           OSC_CR1_VC2:          equ 0Fh    ; MASK: System VC2 24MHz/External Clk divider
 0000           
 00E2           OSC_CR2:      equ E2h          ; Oscillator Control Register 2            (RW)
 0004           OSC_CR2_EXTCLKEN:     equ 04h    ; MASK: Enable/Disable External Clock
 0002           OSC_CR2_IMODIS:       equ 02h    ; MASK: Enable/Disable System (IMO) Clock Net
 0001           OSC_CR2_SYSCLKX2DIS:  equ 01h    ; MASK: Enable/Disable 48MHz clock source
 0000           
 00E3           VLT_CR:       equ E3h          ; Voltage Monitor Control Register         (RW)
 0080           VLT_CR_SMP:           equ 80h    ; MASK: Enable Switch Mode Pump
 0030           VLT_CR_PORLEV:        equ 30h    ; MASK: Mask for Power on Reset level control
 0000           VLT_CR_POR_LOW:       equ 00h    ;   Lowest  Precision Power-on Reset trip point
 0010           VLT_CR_POR_MID:       equ 10h    ;   Middle  Precision Power-on Reset trip point
 0020           VLT_CR_POR_HIGH:      equ 20h    ;   Highest Precision Power-on Reset trip point
 0008           VLT_CR_LVDTBEN:       equ 08h    ; MASK: Enable the CPU Throttle Back on LVD
 0007           VLT_CR_VM:            equ 07h    ; MASK: Mask for Voltage Monitor level setting
 0000           VLT_CR_3V0_POR:       equ 00h    ; -- deprecated symbols --
 0010           VLT_CR_4V5_POR:       equ 10h    ;    deprecated
 0020           VLT_CR_4V75_POR:      equ 20h    ;    deprecated
 0030           VLT_CR_DISABLE:       equ 30h    ;    deprecated
 0000           
 00E4           VLT_CMP:      equ E4h          ; Voltage Monitor Comparators Register     (R)
 0004           VLT_CMP_PUMP:         equ 04h    ; MASK: Vcc below SMP trip level
 0002           VLT_CMP_LVD:          equ 02h    ; MASK: Vcc below LVD trip level
 0001           VLT_CMP_PPOR:         equ 01h    ; MASK: Vcc below PPOR trip level
 0000           
 00E7           DEC_CR2:      equ E7h          ; Decimator Control Register 2             (RW)
 00E8           IMO_TR:       equ E8h          ; Internal Main Oscillator Trim Register   (W)
 00E9           ILO_TR:       equ E9h          ; Internal Low-speed Oscillator Trim       (W)
 00EA           BDG_TR:       equ EAh          ; Band Gap Trim Register                   (W)
 00EB           ECO_TR:       equ EBh          ; External Oscillator Trim Register        (W)
 0000           
 0000           ;;=============================================================================
 0000           ;;      M8C System Macros
 0000           ;;  These macros should be used when their functions are needed.
 0000           ;;=============================================================================
 0000           
 0000           ;----------------------------------------------------
 0000           ;  Swapping Register Banks
 0000           ;----------------------------------------------------
 0000               macro M8C_SetBank0
 0000               and   F, ~FLAG_XIO_MASK
 0000               macro M8C_SetBank1
 0000               or    F, FLAG_XIO_MASK
 0000               macro M8C_EnableGInt
 0000               or    F, FLAG_GLOBAL_IE
 0000               macro M8C_DisableGInt
 0000               and   F, ~FLAG_GLOBAL_IE
 0000               macro M8C_DisableIntMask
 0000               and   reg[@0], ~@1              ; disable specified interrupt enable bit
 0000               macro M8C_EnableIntMask
 0000               or    reg[@0], @1               ; enable specified interrupt enable bit
 0000               macro M8C_ClearIntFlag
 0000               mov   reg[@0], ~@1              ; clear specified interrupt enable bit
 0000               macro M8C_EnableWatchDog
 0000               and   reg[CPU_SCR0], ~CPU_SCR0_PORS_MASK
 0000               macro M8C_ClearWDT
 0000               mov   reg[RES_WDT], 00h
 0000               macro M8C_ClearWDTAndSleep
 0000               mov   reg[RES_WDT], 38h
 0000               macro M8C_Stall
 0000               or    reg[ASY_CR], ASY_CR_SYNCEN
 0000               macro M8C_Unstall
 0000               and   reg[ASY_CR], ~ASY_CR_SYNCEN
 0000               macro M8C_Sleep
 0000               or    reg[CPU_SCR0], CPU_SCR0_SLEEP_MASK
 0000               ; The next instruction to be executed depends on the state of the
 0000               ; various interrupt enable bits. If some interrupts are enabled
 0000               ; and the global interrupts are disabled, the next instruction will
 0000               ; be the one that follows the invocation of this macro. If global
 0000               ; interrupts are also enabled then the next instruction will be
 0000               ; from the interrupt vector table. If no interrupts are enabled
 0000               ; then the CPU sleeps forever.
 0000               macro M8C_Stop
 0000               ; In general, you probably don't want to do this, but here's how:
 0000               or    reg[CPU_SCR0], CPU_SCR0_STOP_MASK
 0000               ; Next instruction to be executed is located in the interrupt
 0000               ; vector table entry for Power-On Reset.
 0000               macro M8C_Reset
 0000               ; Restore CPU to the power-on reset state.
 0000               mov A, 0
 0000               SSC
 0000               ; Next non-supervisor instruction will be at interrupt vector 0.
 0000               macro Suspend_CodeCompressor
 0000               or   F, 0
 0000               macro Resume_CodeCompressor
 0000               add  SP, 0
 0008           LCD_Port:                              equ   PRT2DR
 0008           LCD_PortMode0:                         equ   PRT2DM0
 0009           LCD_PortMode1:                         equ   PRT2DM1
 0000           
 0001           LCD_BARGRAPH_ENABLE:                   equ   1
 0000           
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Constants for LCD
 0000           ;-----------------------------------------------
 0000           ; LCD commands
 0000           
 000C           LCD_DISP_ON:                      equ   0Ch
 0008           LCD_DISP_OFF:                     equ   08h
 000E           LCD_CURSOR_ON:                    equ   0Eh
 000C           LCD_CURSOR_OFF:                   equ   0Ch
 000F           LCD_CURSOR_BLINK:                 equ   0Fh
 000D           LCD_CURSOR_WINK:                  equ   0Dh
 0010           LCD_CURSOR_SH_LEFT:               equ   10h
 0014           LCD_CURSOR_SH_RIGHT:              equ   14h
 0002           LCD_CURSOR_HOME:                  equ   02h
 0004           LCD_CURSOR_LEFT:                  equ   04h
 0006           LCD_CURSOR_RIGHT:                 equ   06h
 0001           LCD_DISP_CLEAR_HOME:              equ   01h
 0000           
 0000           LCD_SOLID_BG:                     equ   00h
 0001           LCD_LINE_BG:                      equ   01h
 0000           
 007F           LCD_PORT_MASK:                    equ   7Fh
 0000           
 0000           ICE_PORT_SYNC:     equ   0   ; This flag must be set to one to work around
 0000                                        ; the async read issue with the ICE with the 
 0000                                        ; 25/26xxx family of devices.  It will help
 0000                                        ; to eliminate "Invalid memory reference" errors.
 0000                                        ; It is not required when running without the ICE
 0000           							 ; or when using any other family besides the 
 0000           							 ; 25/26xxx family. If not using the ICE, this flag 
 0000           							 ; may be set to 0.
 0000           
 0000           ; end of file LCD.inc
 0000           
 0000           
 0000           ;-----------------------------------------------
 0000           ;  Global Symbols
 0000           ;-----------------------------------------------
 0000           
                export   LCD_Start
                export  _LCD_Start
                export   LCD_Init
                export  _LCD_Init
                
                export   LCD_WriteData
                export  _LCD_WriteData
                
                export   LCD_Control
                export  _LCD_Control
                
                export  LCD_PrString
                export _LCD_PrString
                
                export  LCD_PrCString
                export _LCD_PrCString
                
                export  LCD_Position
                export _LCD_Position
                
                export  LCD_PrHexByte
                export _LCD_PrHexByte
                
                export  LCD_PrHexInt
                export _LCD_PrHexInt
                
                export  LCD_Delay50uTimes
                export _LCD_Delay50uTimes
                
                export  LCD_Delay50u
                export _LCD_Delay50u
                
                ;-----------------------------------------------
                ; If bargraph functions not required, don't
                ; export the function names.
                ;-----------------------------------------------
                
                IF (LCD_BARGRAPH_ENABLE)
                export  LCD_InitBG
                export _LCD_InitBG
                
                export  LCD_InitVBG
                export _LCD_InitVBG
                
                ; NOTE: The two functions,
                ;
                ;    LCD_DrawVBG and
                ;    LCD_DrawBG
                ;
                ; are implemented using both fastcall16 and legacy fastcall16 because they
                ; fall into a special and rare case where the calling sequences specified
                ; by the two disciplines are incompatible. The fastcall16 versions are
                ; provided for both C and Assembly users in all memory models. The legacy
                ; fastcall16 versions are provided only to support existing small memory
                ; model assembly language code---they do not work in the large memory
                ; model.
                ;
                ; ** The legacy fastcall16 versions are provided on a temporary basis to
                ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                ; ** deprecated and thier status is "No Further Maintenance".
                ;
                ; The fastcall16 versions of these functions are distinguished by a
                ; leading underscore in the name. The legacy fastcall16 names (which appear
                ; in this comment) do not have the leading underscore. Details on the
                ; calling sequence to be used for fastcall16 are given in the user module
                ; datasheet.
                ;
                ; Fastcall16 versions:
                export _LCD_DrawVBG
                export _LCD_DrawBG
                
                IF SYSTEM_SMALL_MEMORY_MODEL
                ; Legacy Fastcall versions:
                export  LCD_DrawVBG
                export  LCD_DrawBG
                ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                
                ENDIF  ; BARGRAPH_ENABLE
                
                ;
                ; The following functions are deprecated and will be eliminated in a future
                ; version of PSoC Designer.
                ;
                export   LCD_Write_Data
                export  _LCD_Write_Data
                
                
                ;-----------------------------------------------
                ;  EQUATES
                ;-----------------------------------------------
                
 0008           LCD_Port:           equ    PRT2DR
 0008           LCD_PortMode0:      equ    PRT2DM0
 0009           LCD_PortMode1:      equ    PRT2DM1
 0000           
 0000           
                IF LCD_UM_CONSTANTS
                ;; Already defined in another instance
                ELSE
                LCD_UM_CONSTANTS:  equ 1
                
                LCD_E:              equ    10h
                LCD_RW:             equ    40h
                LCD_RS:             equ    20h
                
                LCD_DATA_MASK:      equ    0Fh
                LCD_READY_BIT:      equ    08h
                
                LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                LCD_PORT_WRITE:     equ    7Fh
                LCD_PORT_MASK:      equ    7Fh
                
                DISP_INC:           equ    03h
                DISP_OFF:           equ    08h
                DISP_ON:            equ    0Ch
                LCD_4BIT_2LINE:     equ    2Ch
                
                
                ;-----------------------------------------------
                ;      Bargraph definitions
                ;-----------------------------------------------
                
                LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                
                                                  ; Offsets for 2x16, 2x20, 4x20
                                                  ; Change these values for a custome LCD
                
                LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                
                LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                
                CG_RAM_OFFSET:      equ    40h    ; Offset to character RAM
                ENDIF
                
                AREA UserModules (ROM, REL)
                
 0000           .SECTION
 0000           ;-----------------------------------------------------------------------------
 0000           ;  FUNCTION NAME: LCD_PrCString
 0000           ;
 0000           ;  DESCRIPTION:
 0000           ;    Print constant (ROM) string to LCD
 0000           ;-----------------------------------------------------------------------------
 0000           ;
 0000           ;  ARGUMENTS:
 0000           ;     A:X  Pointer to String
 0000           ;          A contains MSB of string address
 0000           ;          X contains LSB of string address
 0000           ;
 0000           ;  RETURNS:  none
 0000           ;
 0000           ;  SIDE EFFECTS:
 0000           ;    The A and X registers may be modified by this or future implementations
 0000           ;    of this function.  The same is true for all RAM page pointer registers in
 0000           ;    the Large Memory Model.  When necessary, it is the calling function's
 0000           ;    responsibility to perserve their values across calls to fastcall16 
 0000           ;    functions.
 0000           ;          
 0000           ;    Currently only the page pointer registers listed below are modified: 
 0000           ;          CUR_PP
 0000           ;
 0000            LCD_PrCString:
 0000           _LCD_PrCString:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0000            Loop_PrCString:
 0000 08            push  A                            ; Store ROM pointer
 0001 10            push  X
 0002 28            romx                               ; Get character from ROM
 0003 B004          jnz   LCD_PrCString_WR             ; print character and advance pointer
 0005 20            pop   X                            ; Restore the stack
 0006 18            pop   A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0007 7F            ret                                ; Return
 0008           
 0008           LCD_PrCString_WR:
 0008 9044          call  LCD_WriteData                ; Write data to LCD
 000A 20            pop   X                            ; Get ROM pointer
 000B 18            pop   A
 000C 75            inc   X                            ; Inc LSB of pointer
 000D DFF2          jnc   Loop_PrCString
 000F 74            inc   A                            ; Inc MSB of pointer if LSB overflow
 0010 8FEF          jmp   Loop_PrCString
 0012           
 0012           .ENDSECTION
 0012           
 0012           ;-----------------------------------------------------------------------------
 0012           ;  FUNCTION NAME: LCD_PrHexByte
 0012           ;
 0012           ;  DESCRIPTION:
 0012           ;     Print a byte in Hex (two characters) to current LCD position
 0012           ;
 0012           ;-----------------------------------------------------------------------------
 0012           ;
 0012           ;  ARGUMENTS:
 0012           ;     A  => (BYTE) Data/char to be printed
 0012           ;
 0012           ;  RETURNS: none
 0012           ;
 0012           ;  SIDE EFFECTS:
 0012           ;    The A and X registers may be modified by this or future implementations
 0012           ;    of this function.  The same is true for all RAM page pointer registers in
 0012           ;    the Large Memory Model.  When necessary, it is the calling function's
 0012           ;    responsibility to perserve their values across calls to fastcall16 
 0012           ;    functions.
 0012           ;          
 0012           ;    Currently only the page pointer registers listed below are modified: 
 0012           ;          CUR_PP
 0012           ;
 0012           .LITERAL
 0012           LCD_HEX_STR::
 0012 30313233343536373839414243444546      DS    "0123456789ABCDEF"
 0022           .ENDLITERAL
 0022           .SECTION
 0022           
 0022            LCD_PrHexByte:
 0022           _LCD_PrHexByte:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0022 08            push  A                            ; Save lower nibble
 0023 67            asr   A                            ; Shift high nibble to right
 0024 67            asr   A
 0025 67            asr   A
 0026 67            asr   A
 0027 210F          and   A,0Fh                        ; Mask off nibble
 0029 FFE7          index LCD_HEX_STR                  ; Get Hex value
 002B 9021          call  LCD_WriteData                ; Write data to screen
 002D 18            pop   A                            ; Restore value
 002E 210F          and   A,0Fh                        ; Mask off lower nibble
 0030 FFE0          index LCD_HEX_STR                  ; Get Hex value
 0032 901A          call  LCD_WriteData                ; Write data to screen
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0034 7F            ret
 0035           .ENDSECTION
 0035           
 0035           .SECTION
 0035           ;-----------------------------------------------------------------------------
 0035           ;  FUNCTION NAME: LCD_PrHexInt
 0035           ;
 0035           ;  DESCRIPTION:
 0035           ;     Print an Int in Hex (four characters) to current LCD position
 0035           ;
 0035           ;-----------------------------------------------------------------------------
 0035           ;
 0035           ;  ARGUMENTS:
 0035           ;     A:X Integer value
 0035           ;         A  contains LSB of Int
 0035           ;         X  contains MSB of Int
 0035           ;
 0035           ;  RETURNS: none
 0035           ;
 0035           ;  SIDE EFFECTS:
 0035           ;    The A and X registers may be modified by this or future implementations
 0035           ;    of this function.  The same is true for all RAM page pointer registers in
 0035           ;    the Large Memory Model.  When necessary, it is the calling function's
 0035           ;    responsibility to perserve their values across calls to fastcall16 
 0035           ;    functions.
 0035           ;          
 0035           ;    Currently only the page pointer registers listed below are modified: 
 0035           ;          CUR_PP
 0035           ;
 0035            LCD_PrHexInt:
 0035           _LCD_PrHexInt:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0035 4B            swap  A,X
 0036 9FEA          call  LCD_PrHexByte                ; Print MSB
 0038 5B            mov   A,X                          ; Move LSB into position
 0039 9FE7          call  LCD_PrHexByte                ; Print LSB
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 003B 7F            ret
 003C           .ENDSECTION
 003C           
 003C           .SECTION
 003C           ;-----------------------------------------------------------------------------
 003C           ;  FUNCTION NAME: LCD_PrString
 003C           ;
 003C           ;  DESCRIPTION:
 003C           ;     Print (RAM) ASCII string to LCD
 003C           ;
 003C           ;-----------------------------------------------------------------------------
 003C           ;
 003C           ;  ARGUMENTS:
 003C           ;     A:X contains pointer to string
 003C           ;         X  contains LSB of string pointer
 003C           ;         A  contains MSB or page of string pointer (not used at this time)
 003C           ;
 003C           ;  RETURNS:
 003C           ;
 003C           ;  SIDE EFFECTS:
 003C           ;    The A and X registers may be modified by this or future implementations
 003C           ;    of this function.  The same is true for all RAM page pointer registers in
 003C           ;    the Large Memory Model.  When necessary, it is the calling function's
 003C           ;    responsibility to perserve their values across calls to fastcall16 
 003C           ;    functions.
 003C           ;          
 003C           ;    Currently only the page pointer registers listed below are modified: 
 003C           ;          CUR_PP
 003C           ;          IDX_PP
 003C           ;
 003C           ;
 003C            LCD_PrString:
 003C           _LCD_PrString:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 003C 70BF            and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 003E 60D3            mov reg[IDX_PP], A
                   ENDIF
 0040            Loop_PrString:
 0040 5200          mov   A,[X]                        ; Get value pointed to by X
 0042 A006          jz    End_LCD_PrString             ; Check for end of string
 0044               ;LCD_writeData is known not to modify X so no need to perserve
 0044 9008          call  LCD_WriteData                ; Write data to screen
 0046 75            inc   X                            ; Advance pointer to next character
 0047 8FF8          jmp   Loop_PrString                ; Go get next character
 0049           End_LCD_PrString:
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0049 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 004B 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_3 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 004D 7F            ret
 004E           .ENDSECTION
 004E           
 004E           .SECTION
 004E           ;-----------------------------------------------------------------------------
 004E           ;  FUNCTION NAME: LCD_WriteData
 004E           ;
 004E           ;  DESCRIPTION:
 004E           ;     Write a byte to the LCD's data register.
 004E           ;
 004E           ;-----------------------------------------------------------------------------
 004E           ;
 004E           ;  ARGUMENTS:
 004E           ;    A contains byte to be written to LCD data register
 004E           ;
 004E           ;  RETURNS: none
 004E           ;
 004E           ;  SIDE EFFECTS:
 004E           ;    The A and X registers may be modified by this or future implementations
 004E           ;    of this function.  The same is true for all RAM page pointer registers in
 004E           ;    the Large Memory Model.  When necessary, it is the calling function's
 004E           ;    responsibility to perserve their values across calls to fastcall16 
 004E           ;    functions.
 004E           ;          
 004E           ;    Currently only the page pointer registers listed below are modified: 
 004E           ;          CUR_PP
 004E           ;
 004E            LCD_WriteData:
 004E           _LCD_WriteData:
 004E            LCD_Write_Data:   ; Do not use
 004E           _LCD_Write_Data:   ; Do not use
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 004E 9065          call  LCD_Check_Ready              ; Make sure controller is ready
 0050                                                  ; A is preserved in LCD_Check_Ready
 0050 08            push  A                            ; Save copy of character
 0051 67            asr   A                            ; Shift high nibble to right
 0052 67            asr   A
 0053 67            asr   A
 0054 67            asr   A
 0055 210F          and   A,0Fh                        ; Mask off high nibble
 0057 903B          call  LCD_WDATA_Nibble             ; Write Upper nibble
 0059 18            pop   A                            ; Retrieve copy of character
 005A 210F          and   A,0Fh                        ; Mask off high nibble
 005C 40            nop
 005D 40            nop
 005E 40            nop
 005F 9033          call  LCD_WDATA_Nibble   ; Write Lower nibble
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0061 7F            ret
 0062           .ENDSECTION
 0062           
 0062           .SECTION
 0062           ;-----------------------------------------------------------------------------
 0062           ;  FUNCTION NAME: LCD_Control
 0062           ;
 0062           ;  DESCRIPTION:
 0062           ;     Write a byte to the LCD's control register.
 0062           ;
 0062           ;-----------------------------------------------------------------------------
 0062           ;
 0062           ;  ARGUMENTS:
 0062           ;     A contains data to be written to LCD control register.
 0062           ;
 0062           ;  RETURNS: none
 0062           ;
 0062           ;  SIDE EFFECTS:
 0062           ;    The A and X registers may be modified by this or future implementations
 0062           ;    of this function.  The same is true for all RAM page pointer registers in
 0062           ;    the Large Memory Model.  When necessary, it is the calling function's
 0062           ;    responsibility to perserve their values across calls to fastcall16 
 0062           ;    functions.
 0062           ;          
 0062           ;    Currently only the page pointer registers listed below are modified: 
 0062           ;          CUR_PP
 0062           ;
 0062            LCD_Control:
 0062           _LCD_Control:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0062 9051          call  LCD_Check_Ready              ; Make sure controller is ready
 0064                                                  ; A is preserved in LCD_Check_Ready
 0064 08            push  A                            ; Save copy of byte
 0065 67            asr   A                            ; Shift Upper Nibble to right
 0066 67            asr   A
 0067 67            asr   A
 0068 67            asr   A
 0069 210F          and   A,0Fh                        ; Mask off, just in case
 006B 9009          call  LCD_WCNTL_Nibble             ; Write high nibble
 006D 18            pop   A                            ; Restore copy of byte
 006E 210F          and   A,0Fh                        ; Mask off high nibble
 0070 40            nop
 0071 40            nop
 0072 40            nop
 0073 9001          call  LCD_WCNTL_Nibble             ; Write Lower nibble
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0075 7F            ret
 0076           .ENDSECTION
 0076           
 0076           .SECTION
 0076           ;-----------------------------------------------------------------------------
 0076           ;  FUNCTION NAME: LCD_WCNTL_Nibble
 0076           ;
 0076           ;  DESCRIPTION:
 0076           ;     Write a single nibble to the LCD's command register
 0076           ;
 0076           ;-----------------------------------------------------------------------------
 0076           ;
 0076           ;  ARGUMENTS:
 0076           ;     A[3:0]   Contains Nibble to be written to command register
 0076           ;
 0076           ;  RETURNS: none
 0076           ;
 0076           ;  SIDE EFFECTS:
 0076           ;    The A and X registers may be modified by this or future implementations
 0076           ;    of this function.  The same is true for all RAM page pointer registers in
 0076           ;    the Large Memory Model.  When necessary, it is the calling function's
 0076           ;    responsibility to perserve their values across calls to fastcall16 
 0076           ;    functions.
 0076           ;          
 0076           ;    Currently only the page pointer registers listed below are modified: 
 0076           ;          CUR_PP
 0076           ;
 0076            LCD_WCNTL_Nibble:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0076 08            push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0077 62D000          mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
 007A 260080        and   [Port_2_Data_SHADE],~LCD_PORT_MASK
 007D 5100          mov   A,[Port_2_Data_SHADE]
 007F 6008          mov   reg[LCD_Port],A                        ; Reset control lines
 0081           
 0081 18            pop   A
 0082 210F          and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
 0084 2910          or    A,LCD_E                                ; Bring "E" Enable line high
 0086 2A00          or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
 0088 6008          mov   reg[LCD_Port], A                       ; Write data
 008A 5300          mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
 008C 40            nop
 008D 218F          and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
 008F 5300          mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
 0091 6008          mov   reg[LCD_Port],A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0093 7F            ret
 0094           .ENDSECTION
 0094           
 0094           .SECTION
 0094           ;-----------------------------------------------------------------------------
 0094           ;  FUNCTION NAME: LCD_WDATA_Nibble
 0094           ;
 0094           ;  DESCRIPTION:
 0094           ;     Write a single nibble to the LCD's DATA register
 0094           ;
 0094           ;-----------------------------------------------------------------------------
 0094           ;
 0094           ;  ARGUMENTS:
 0094           ;     A[3:0]   Contains Nibble to be written to data register
 0094           ;
 0094           ;  RETURNS: none
 0094           ;
 0094           ;  SIDE EFFECTS:
 0094           ;    The A and X registers may be modified by this or future implementations
 0094           ;    of this function.  The same is true for all RAM page pointer registers in
 0094           ;    the Large Memory Model.  When necessary, it is the calling function's
 0094           ;    responsibility to perserve their values across calls to fastcall16 
 0094           ;    functions.
 0094           ;          
 0094           ;    Currently only the page pointer registers listed below are modified: 
 0094           ;          CUR_PP
 0094           ;
 0094           LCD_WDATA_Nibble:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0094 08            push  A
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0095 62D000          mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
 0098 260080        and   [Port_2_Data_SHADE],~LCD_PORT_MASK
 009B 2E0020        or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
 009E 5100          mov   A,[Port_2_Data_SHADE]
 00A0 6008          mov   reg[LCD_Port],A
 00A2           
 00A2 18            pop   A
 00A3 210F          and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
 00A5 2930          or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
 00A7 2A00          or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
 00A9 6008          mov   reg[LCD_Port], A                            ; Write data
 00AB 5300          mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
 00AD 40            NOP
 00AE 21AF          and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
 00B0 5300          mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
 00B2 6008          mov   reg[LCD_Port],A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00B4 7F            ret
 00B5           .ENDSECTION
 00B5           
 00B5           .SECTION
 00B5           ;-----------------------------------------------------------------------------
 00B5           ;  FUNCTION NAME: LCD_Check_Ready
 00B5           ;
 00B5           ;  DESCRIPTION:
 00B5           ;     Wait until LCD has completed last command.
 00B5           ;
 00B5           ;-----------------------------------------------------------------------------
 00B5           ;
 00B5           ;  ARGUMENTS: none
 00B5           ;
 00B5           ;  RETURNS: none
 00B5           ;
 00B5           ;  SIDE EFFECTS:
 00B5           ;    The A and X registers may be modified by this or future implementations
 00B5           ;    of this function.  The same is true for all RAM page pointer registers in
 00B5           ;    the Large Memory Model.  When necessary, it is the calling function's
 00B5           ;    responsibility to perserve their values across calls to fastcall16 
 00B5           ;    functions.
 00B5           ;          
 00B5           ;    Currently only the page pointer registers listed below are modified: 
 00B5           ;          CUR_PP
 00B5           ;
 00B5           ;     If LCD is not present, this routine may never return.
 00B5           ;
 00B5           LCD_Check_Ready:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 00B5 08            push  A                                                     ; Save Accumulator
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 00B6 62D000          mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
 00B9 260080        and   [Port_2_Data_SHADE],~LCD_PORT_MASK                    ; Mask of all LCD bits
 00BC 5100          mov   A,[Port_2_Data_SHADE]
 00BE 6008          mov   reg[LCD_Port],A                                       ; Zero LCD port bits
 00C0           
 00C0 2600F0        and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK             ; Clear out LCD mode bits.
 00C3 5100          mov   A,[Port_2_DriveMode_0_SHADE]
 00C5 7110          or    F, FLAG_XIO_MASK
 00C7 6008          mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for reading
 00C9 70EF          and   F, ~FLAG_XIO_MASK
 00CB           
 00CB 2E0040        or    [Port_2_Data_SHADE],LCD_RW                            ; Raise RW to signify Read operation
 00CE 5100          mov   A,[Port_2_Data_SHADE]
 00D0 6008          mov   reg[LCD_Port],A
 00D2 40            NOP
 00D3           
 00D3           LCD_RDY_LOOP:
 00D3 2E0050        or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
 00D6 5100          mov   A,[Port_2_Data_SHADE]
 00D8 6008          mov   reg[LCD_Port],A
 00DA           
 00DA 40            nop                                                         ; Wait 2 nops to make sure data is ready
 00DB 40            nop
 00DC 5D08          mov   A,reg[LCD_Port]
 00DE           
 00DE           ; The code below is used to work around the async read issue with the ICE with the 
 00DE           ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
 00DE           ; errors.  It is not required when running without the ICE or when using any other 
 00DE           ; family besides the 25/26xxx family. If not using the ICE or with any other family
 00DE           ; the ICE_PORT_SYNC flag should be set to 0.
                IF(ICE_PORT_SYNC)                          
                    mov   reg[ 0xfa], A                    
                    mov   A, reg[0xfa]                     
                ENDIF   
                                                   
 00DE 08            push  A
 00DF 2600C0        and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
 00E2 5100          mov   A,[Port_2_Data_SHADE]
 00E4 6008          mov   reg[LCD_Port],A
 00E6           
 00E6 40            nop                                    ; Add delay for the slowest part and the
 00E7 40            nop                                    ; fastest PSoC
 00E8 40            nop
 00E9                                                                           ; Get the LSBs
 00E9 2E0050        or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
 00EC 5100          mov   A,[Port_2_Data_SHADE]
 00EE 6008          mov   reg[LCD_Port],A
 00F0           
 00F0 40            nop
 00F1 40            nop
 00F2           
 00F2 2600C0        and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
 00F5 5100          mov   A,[Port_2_Data_SHADE]
 00F7 6008          mov   reg[LCD_Port],A
 00F9           
 00F9 18            pop   A
 00FA 2108          and   A,LCD_READY_BIT                                       ; Check busy
 00FC BFD6          jnz   LCD_RDY_LOOP                                          ; If LCD still busy, read again
 00FE           
 00FE 2E007F        or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Revert Data bit to Write mode
 0101 5100          mov   A,[Port_2_DriveMode_0_SHADE]
 0103 7110          or    F, FLAG_XIO_MASK
 0105 6008          mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
 0107 70EF          and   F, ~FLAG_XIO_MASK
 0109 18            pop   A
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 010A 7F            ret
 010B           .ENDSECTION
 010B           
 010B           .SECTION
 010B           ;-----------------------------------------------------------------------------
 010B           ;  FUNCTION NAME: LCD_Start
 010B           ;  FUNCTION NAME: LCD_Init
 010B           ;
 010B           ;  DESCRIPTION:
 010B           ;     Initialize LCD
 010B           ;
 010B           ;-----------------------------------------------------------------------------
 010B           ;
 010B           ;  ARGUMENTS: none
 010B           ;
 010B           ;  RETURNS: none
 010B           ;
 010B           ;  SIDE EFFECTS:
 010B           ;    The A and X registers may be modified by this or future implementations
 010B           ;    of this function.  The same is true for all RAM page pointer registers in
 010B           ;    the Large Memory Model.  When necessary, it is the calling function's
 010B           ;    responsibility to perserve their values across calls to fastcall16 
 010B           ;    functions.
 010B           ;          
 010B           ;    Currently only the page pointer registers listed below are modified: 
 010B           ;          CUR_PP
 010B           ;
 010B           ;  THEORY of OPERATION or PROCEDURE:
 010B           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 010B           ;    This initialization is a bit long, but it should work for
 010B           ;    most 2 and 4 line LCDs.
 010B           ;
 010B            LCD_Start:
 010B           _LCD_Start:
 010B            LCD_Init:
 010B           _LCD_Init:
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 010B 62D000          mov reg[CUR_PP], >Port_2_Data_SHADE
                   ENDIF
                
 010E 260080        and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
 0111 2E007F        or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
 0114 260080        and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
 0117           
 0117 5100          mov   A,[Port_2_DriveMode_0_SHADE]
 0119 7110          or    F, FLAG_XIO_MASK
 011B 6008          mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
 011D 5100          mov   A,[Port_2_DriveMode_1_SHADE]
 011F 6009          mov   reg[LCD_PortMode1],A
 0121 70EF          and   F, ~FLAG_XIO_MASK
 0123           
 0123 50FA          mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
 0125 9067          call  LCD_Delay50uTimes
 0127 50FA          mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
 0129 9063          call  LCD_Delay50uTimes
 012B           
 012B 5003          mov   A,03h
 012D 9F47          call  LCD_WCNTL_Nibble
 012F           
 012F 5052          mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
 0131 905B          call  LCD_Delay50uTimes
 0133           
 0133 5003          mov   A,03h
 0135 9F3F          call  LCD_WCNTL_Nibble
 0137           
 0137 9063          call  LCD_Delay50u
 0139 9061          call  LCD_Delay50u
 013B 905F          call  LCD_Delay50u
 013D           
 013D 5003          mov   A,03h
 013F 9F35          call  LCD_WCNTL_Nibble
 0141           
 0141 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 0143 9049          call  LCD_Delay50uTimes
 0145           
 0145 5002          mov   A,02h
 0147 9F2D          call  LCD_WCNTL_Nibble
 0149           
 0149 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 014B 9041          call  LCD_Delay50uTimes
 014D           
 014D 5008          mov   A,08h
 014F 9F11          call  LCD_Control
 0151 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 0153 9039          call  LCD_Delay50uTimes
 0155           
 0155 5001          mov   A,01h
 0157 9F09          call  LCD_Control
 0159 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 015B 9031          call  LCD_Delay50uTimes
 015D           
 015D 5006          mov   A,06h
 015F 9F01          call  LCD_Control
 0161           
 0161 500E          mov   A,0Eh
 0163 9EFD          call  LCD_Control
 0165           
 0165 502C          mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
 0167 9EF9          call  LCD_Control
 0169           
 0169 5008          mov   A,DISP_OFF
 016B 9EF5          call  LCD_Control
 016D           
 016D 500C          mov   A,DISP_ON
 016F 9EF1          call  LCD_Control
 0171           
 0171 5003          mov   A,DISP_INC
 0173 9EED          call  LCD_Control
 0175           
 0175 505A          mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
 0177 9015          call  LCD_Delay50uTimes
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_4 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0179 7F            ret
 017A           .ENDSECTION
 017A           
 017A           ;-----------------------------------------------------------------------------
 017A           ;  FUNCTION NAME: LCD_Position
 017A           ;
 017A           ;  DESCRIPTION:
 017A           ;     Position Cursor at Row and Col location
 017A           ;
 017A           ;-----------------------------------------------------------------------------
 017A           ;
 017A           ;  ARGUMENTS:
 017A           ;     A => Row  0 to 3
 017A           ;     X => Col  0 to 39+
 017A           ;
 017A           ;  RETURNS:  none
 017A           ;
 017A           ;  SIDE EFFECTS:
 017A           ;    The A and X registers may be modified by this or future implementations
 017A           ;    of this function.  The same is true for all RAM page pointer registers in
 017A           ;    the Large Memory Model.  When necessary, it is the calling function's
 017A           ;    responsibility to perserve their values across calls to fastcall16 
 017A           ;    functions.
 017A           ;
 017A           .LITERAL
 017A           LCD_ROW_OFFSET::
 017A 80C094D4       DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
 017E           .ENDLITERAL
 017E           
 017E           .SECTION
 017E            LCD_Position:
 017E           _LCD_Position:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 017E 2103          and   A,03h                        ; Mask off 2 bits for row address 0 to 3
 0180 10            push  X                            ; Store COL
 0181 FFF7          index LCD_ROW_OFFSET ; Get ROW memory offset from table
 0183 4F            mov   X,SP                         ; Get Stack pointer
 0184 03FF          add   A,[X+(-1)]                   ; Add the COL to the display pointer
 0186 20            pop   X
 0187           
 0187           LCD_POS_IT:
 0187 9ED9          call  LCD_Control                  ; Write control byte
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 0189 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 018B 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 018D 7F            ret
 018E           .ENDSECTION
 018E           
 018E           .SECTION
 018E           ;-----------------------------------------------------------------------------
 018E           ;  FUNCTION NAME: LCD_Delay50uTimes
 018E           ;
 018E           ;  DESCRIPTION:
 018E           ;     Delay increments of 50uSeconds
 018E           ;
 018E           ;-----------------------------------------------------------------------------
 018E           ;
 018E           ;  ARGUMENTS:
 018E           ;     A contains the delay multiplier
 018E           ;
 018E           ;  RETURNS:
 018E           ;
 018E           ;  SIDE EFFECTS:
 018E           ;    The A and X registers may be modified by this or future implementations
 018E           ;    of this function.  The same is true for all RAM page pointer registers in
 018E           ;    the Large Memory Model.  When necessary, it is the calling function's
 018E           ;    responsibility to perserve their values across calls to fastcall16 
 018E           ;    functions.
 018E           ;
 018E           ;
 018E            LCD_Delay50uTimes:
 018E           _LCD_Delay50uTimes:
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 018E 900C          call  LCD_Delay50u
 0190 78            dec   A
 0191 BFFC          jnz   LCD_Delay50uTimes
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0193 7F            ret
 0194           
 0194           .ENDSECTION
 0194           
 0194           ;-----------------------------------------------------------------------------
 0194           ;  FUNCTION NAME: LCD_Delay50u
 0194           ;
 0194           ;  DESCRIPTION:
 0194           ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
 0194           ;     Slower clock frequencies the delay will be;
 0194           ;           1.5
 0194           ;        -------------- * 50uSec
 0194           ;        clock_freq(MHz)
 0194           ;
 0194           ;
 0194           ;-----------------------------------------------------------------------------
 0194           ;
 0194           ;  ARGUMENTS: none
 0194           ;
 0194           ;  RETURNS: none
 0194           ;
 0194           ;  SIDE EFFECTS:
 0194           ;    The A and X registers may be modified by this or future implementations
 0194           ;    of this function.  The same is true for all RAM page pointer registers in
 0194           ;    the Large Memory Model.  When necessary, it is the calling function's
 0194           ;    responsibility to perserve their values across calls to fastcall16 
 0194           ;    functions.
 0194           ;
 0194           ;  THEORY of OPERATION or PROCEDURE:
 0194           ;
 0194           .LITERAL
 0194            LCD_Delay50u_Table::
 0194 08193A7C01010101      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
 019C           ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
 019C           .ENDLITERAL
 019C           .SECTION
 019C           
 019C             LCD_Delay50u:
 019C            _LCD_Delay50u:                        ; [11]  Call
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 019C 08            push  A
 019D 7110          or    F, FLAG_XIO_MASK
 019F 5DE0          mov   A, reg[OSC_CR0]                ; [6] Get delay value
 01A1 70EF          and   F, ~FLAG_XIO_MASK
 01A3 2107          and   A,07h                          ; [4] Mask off only the clock bits
 01A5 3905          cmp   A,05h
 01A7 D006          jnc   Delay50u_End
 01A9 FFE9          index LCD_Delay50u_Table ; [13] Get delay value
 01AB           Delay50u_Loop:                           ;
 01AB 78            dec   A                              ; [4]
 01AC BFFE          jnz   Delay50u_Loop                  ; [5]
 01AE           Delay50u_End:
 01AE 18            pop   A
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_1 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01AF 7F            ret
 01B0           .ENDSECTION
 01B0           
 01B0           
 01B0           ;-----------------------------------------------------------------------------
 01B0           ;      If bargraph is not enabled, the following functions are not required.
 01B0           ;-----------------------------------------------------------------------------
 01B0           
                IF (LCD_BARGRAPH_ENABLE)
                
                IF SYSTEM_SMALL_MEMORY_MODEL
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: LCD_DrawBG
                ;
                ;  DESCRIPTION:
                ;  This legacy fastcall version are provided only to support existing small
                ;  memory model assembly language code---it does not work in the large memory
                ;  model.
                ;
                ;  ** This legacy fastcall version is provided on a temporary basis to
                ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                ;  ** deprecated and its status is "No Further Maintenance". If you call this
                ;  ** function in assembly you should convert to _LCD_DrawVBG
                ;  ** (with a leading underscore) and the fastcall16 interface
                ;
                ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                ;  is a legacy function that is intended to support existing Assembly
                ;  language programs that call this function.  This should not be used for
                ;  new code or with Large Memory Model programs.
                ;-----------------------------------------------------------------------------
                ;
                ;  LEGACY FASTCALL ARGUMENTS:
                ;    A    => Starting row for bargraph 0 to 3
                ;   [X]   => Starting Column for bargraph 0 to 39+
                ;   [x-1] => Length of bargraph in chars 1 to 40+
                ;   [X-2] => Position of pointer in segments 5 times Length
                ;
                ;
                ;  RETURNS:  none
                ;
                ;  SIDE EFFECTS:
                ;    The A and X registers may be modified by this or future implementations
                ;    of this function.  The same is true for all RAM page pointer registers in
                ;    the Large Memory Model.  When necessary, it is the calling function's
                ;    responsibility to perserve their values across calls to fastcall16 
                ;    functions.
                ;
                ;    If LCD_Init is not called before this function, the
                ;    bargraph will not be drawn properly.
                ;
                ; Stack offset constants
                BG_COLX:       equ  0                   ; Stack position of Column
                BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                BG_LENGTHX:    equ -2                   ; Stack postion of bargraph pointer position
                
                
                LCD_DrawBG:
                    push  X
                    mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                    call  LCD_Position                 ; Set cursor position
                    pop   X                            ; Restore pointer
                
                LCD_BG_LOOP1X:
                    cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                    jnz   LCD_CHECK1X
                    mov   A,00h                        ; Load empty character
                    jmp   LCD_BG_DOITX                  ;
                
                LCD_CHECK1X:
                    cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                    jnc   LCD_CHECK2X                   ; Note yet, use full character
                    mov   A,[X+BG_LENGTHX]
                    sub   [X+BG_LENGTHX],A
                    jmp   LCD_BG_DOITX
                
                LCD_CHECK2X:                            ; Put index to full character
                    mov   A, 06h
                    sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                
                LCD_BG_DOITX:
                    call  LCD_WriteData                ; Display BG character
                
                    dec   [X+BG_CHAR_LENX]              ; Dec Char count
                    jnz   LCD_BG_LOOP1X                 ; Do it all over again
                    ret
                .ENDSECTION
                ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                
 01B0           .SECTION
 01B0           ;-----------------------------------------------------------------------------
 01B0           ;  FUNCTION NAME: LCD_DrawBG
 01B0           ;
 01B0           ;  DESCRIPTION:
 01B0           ;     Draw a horizontal bargraph on the LCD with the given parameters.
 01B0           ;
 01B0           ;
 01B0           ;-----------------------------------------------------------------------------
 01B0           ;
 01B0           ;  FASTCALL16 ARGUMENTS:
 01B0           ;   [SP-3] => Starting row for bargraph 0 to 3
 01B0           ;   [SP-4] => Starting Column for bargraph 0 to 39+
 01B0           ;   [SP-5] => Length of bargraph in chars 1 to 40+
 01B0           ;   [SP-6] => Position of pointer in segments 5 times Length
 01B0           ;
 01B0           ;
 01B0           ;  RETURNS:  none
 01B0           ;
 01B0           ;  SIDE EFFECTS:
 01B0           ;    The A and X registers may be modified by this or future implementations
 01B0           ;    of this function.  The same is true for all RAM page pointer registers in
 01B0           ;    the Large Memory Model.  When necessary, it is the calling function's
 01B0           ;    responsibility to perserve their values across calls to fastcall16 
 01B0           ;    functions.
 01B0           ;          
 01B0           ;    Currently only the page pointer registers listed below are modified: 
 01B0           ;          CUR_PP
 01B0           ;
 01B0           ;    If LCD_Init is not called before this function, the
 01B0           ;    bargraph will not be drawn properly.
 01B0           ;
 01B0           ; Stack offset constants
 FFFFFFFD           BG_ROW:       equ -3
 FFFFFFFC           BG_COL:       equ -4                   ; Stack position of Column
 FFFFFFFB           BG_CHAR_LEN:  equ -5                   ; Stack position of Length
 FFFFFFFA           BG_LENGTH:    equ -6                   ; Stack postion of bargraph pointer position
 01B0           
 01B0           
 01B0           _LCD_DrawBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01B0 4F            mov   X, SP
 01B1 10            push  X
 01B2 52FD          mov   A,[X+BG_ROW]                 ; Row in A
 01B4 59FC          mov   X,[X+BG_COL]                 ; Col in X
 01B6 9FC6          call  LCD_Position                 ; Set cursor position
 01B8 20            pop  X
 01B9           
 01B9           LCD_BG_LOOP1:
 01B9 3DFA00        cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
 01BC B005          jnz   LCD_CHECK1
 01BE 5000          mov   A,00h                        ; Load empty character
 01C0 8011          jmp   LCD_BG_DOIT                  ;
 01C2           
 01C2           LCD_CHECK1:
 01C2 3DFA06        cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
 01C5 D007          jnc   LCD_CHECK2                   ; Note yet, use full character
 01C7 52FA          mov   A,[X+BG_LENGTH]
 01C9 15FA          sub   [X+BG_LENGTH],A
 01CB 8006          jmp   LCD_BG_DOIT
 01CD           
 01CD           LCD_CHECK2:                            ; Put index to full character
 01CD 5006          mov   A, 06h
 01CF 17FA05        sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
 01D2           
 01D2           LCD_BG_DOIT:
 01D2 9E7A          call  LCD_WriteData                ; Display BG character
 01D4           
 01D4 7BFB          dec   [X+BG_CHAR_LEN]              ; Dec Char count
 01D6 BFE2          jnz   LCD_BG_LOOP1                 ; Do it all over again
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 01D8 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 01DA 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01DC 7F            ret
 01DD           .ENDSECTION
 01DD           
                IF SYSTEM_SMALL_MEMORY_MODEL
                .SECTION
                ;-----------------------------------------------------------------------------
                ;  FUNCTION NAME: LCD_DrawVBG
                ;
                ;  DESCRIPTION:
                ;  This legacy fastcall version are provided only to support existing small
                ;  memory model assembly language code---it does not work in the large memory
                ;  model.
                ;
                ;  ** This legacy fastcall version is provided on a temporary basis to
                ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                ;  ** deprecated and its status is "No Further Maintenance". If you call this
                ;  ** function in assembly you should convert to _LCD_DrawVBG
                ;  ** (with a leading underscore) and the fastcall16 interface
                ;
                ;  Draw a vertical bargraph on the LCD with the given parameters. This
                ;  is a legacy function that is intended to support existing Assembly
                ;  language programs that call this function.  This should not be used for
                ;  new code or with Large Memory Model programs.
                ;-----------------------------------------------------------------------------
                ;
                ;  LEGACY FASTCALL ARGUMENTS:
                ;    A    => Starting row for bargraph 0 to 3
                ;   [X]   => Starting Column for bargraph 0 to 40+
                ;   [x-1] => Height of bargraph in chars 1 - 4
                ;   [X-2] => Position of pointer in segments 8 times height
                ;  RETURNS:
                ;
                ;  SIDE EFFECTS:
                ;    The A and X registers may be modified by this or future implementations
                ;    of this function.  The same is true for all RAM page pointer registers in
                ;    the Large Memory Model.  When necessary, it is the calling function's
                ;    responsibility to perserve their values across calls to fastcall16 
                ;    functions.
                ;    
                ;    If LCD_Init is not called before this function, the
                ;    bargraph will not be drawn properly.
                ;
                ; Stack offset constants
                VBG_COLX:            equ  0
                VBG_CHAR_HEIGHTX:    equ -1
                VBG_SEG_HEIGHTX:     equ -2
                
                LCD_DrawVBG:
                
                    and   A,03h                        ; Make sure only rows 0 - 3 are valid
                VBG_LOOPX:
                    push  A
                    index LCD_ROW_OFFSET  ; Get row offset
                    add   A,[X+VBG_COLX]                ; Add column offset to position
                    call  LCD_Control                  ; Position Cursor
                    cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                    jnz   VBG_NZ_SEGX
                    mov   A,' '                        ; Load space character
                    jmp   VBG_WRITE_CHARX
                VBG_NZ_SEGX:
                    cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                    jnc   VBG_FULL_SEGX
                                                        ; Partial segment between 1 and 8
                    mov   A,[X+VBG_SEG_HEIGHTX]
                    dec   A
                    mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                    jmp   VBG_WRITE_CHARX
                
                VBG_FULL_SEGX:                          ; Bargaph
                    sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                    mov   A,07h                        ; Load full segment
                
                VBG_WRITE_CHARX:                        ; Write character to display
                    call  LCD_WriteData                ; Write value
                    pop   A
                    dec   A
                    dec   [X+VBG_CHAR_HEIGHTX]
                    jnz   VBG_LOOPX
                    ret
                .ENDSECTION
                ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                
 01DD           .SECTION
 01DD           ;-----------------------------------------------------------------------------
 01DD           ;  FUNCTION NAME: LCD_DrawVBG
 01DD           ;
 01DD           ;  DESCRIPTION:
 01DD           ;     Draw a vertical bargraph on the LCD with the given parameters.
 01DD           ;
 01DD           ;
 01DD           ;-----------------------------------------------------------------------------
 01DD           ;
 01DD           ;  FASTCALL16 ARGUMENTS:
 01DD           ;
 01DD           ;   [SP-3] => Starting row for bargraph 0 to 3
 01DD           ;   [SP-4] => Starting Column for bargraph 0 to 40+
 01DD           ;   [SP-5] => Height of bargraph in chars 1 - 4
 01DD           ;   [SP-6] => Position of pointer in segments 8 times height
 01DD           ;  RETURNS:
 01DD           ;
 01DD           ;  SIDE EFFECTS:
 01DD           ;    The A and X registers may be modified by this or future implementations
 01DD           ;    of this function.  The same is true for all RAM page pointer registers in
 01DD           ;    the Large Memory Model.  When necessary, it is the calling function's
 01DD           ;    responsibility to perserve their values across calls to fastcall16 
 01DD           ;    functions.
 01DD           ;          
 01DD           ;    Currently only the page pointer registers listed below are modified: 
 01DD           ;          CUR_PP
 01DD           ;
 01DD           ;    If LCD_Init is not called before this function, the
 01DD           ;    bargraph will not be drawn properly.
 01DD           ;
 01DD           ; Stack offset constants
 FFFFFFFD           VBG_ROW:        equ -3
 FFFFFFFC           VBG_COL:            equ -4
 FFFFFFFB           VBG_CHAR_HEIGHT:    equ -5
 FFFFFFFA           VBG_SEG_HEIGHT:     equ -6
 01DD           
 01DD           _LCD_DrawVBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 01DD 4F            mov   X, SP
 01DE 52FD          mov   A, [X+VBG_ROW]
 01E0 2103          and   A,03h                        ; Make sure only rows 0 - 3 are valid
 01E2           VBG_LOOP:
 01E2 08            push  A
 01E3 FF95          index LCD_ROW_OFFSET  ; Get row offset
 01E5 03FC          add   A,[X+VBG_COL]                ; Add column offset to position
 01E7 9E79          call  LCD_Control                  ; Position Cursor
 01E9 3DFA00        cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
 01EC B005          jnz   VBG_NZ_SEG
 01EE 5020          mov   A,' '                        ; Load space character
 01F0 8013          jmp   VBG_WRITE_CHAR
 01F2           VBG_NZ_SEG:
 01F2 3DFA09        cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
 01F5 D009          jnc   VBG_FULL_SEG
 01F7                                                  ; Partial segment between 1 and 8
 01F7 52FA          mov   A,[X+VBG_SEG_HEIGHT]
 01F9 78            dec   A
 01FA 56FA00        mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
 01FD 8006          jmp   VBG_WRITE_CHAR
 01FF           
 01FF           VBG_FULL_SEG:                          ; Bargaph
 01FF 17FA08        sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
 0202 5007          mov   A,07h                        ; Load full segment
 0204           
 0204           VBG_WRITE_CHAR:                        ; Write character to display
 0204 9E48          call  LCD_WriteData                ; Write value
 0206 18            pop   A
 0207 78            dec   A
 0208 7BFB          dec   [X+VBG_CHAR_HEIGHT]
 020A BFD7          jnz   VBG_LOOP
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 020C 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 020E 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0210 7F            ret
 0211           .ENDSECTION
 0211           
 0211           .SECTION
 0211           ;-----------------------------------------------------------------------------
 0211           ;  FUNCTION NAME: LCD_InitVBG
 0211           ;
 0211           ;  DESCRIPTION:
 0211           ;     Initialize the vertical bargraph characters.
 0211           ;
 0211           ;-----------------------------------------------------------------------------
 0211           ;
 0211           ;  ARGUMENTS:  none
 0211           ;
 0211           ;  RETURNS:  none
 0211           ;
 0211           ;  SIDE EFFECTS:
 0211           ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
 0211           ;    Only one type of bargraph (horizontal or vertical) may be used
 0211           ;    at a time since they each require their own set of characters.
 0211           ;
 0211           ;  SIDE EFFECTS:
 0211           ;    The A and X registers may be modified by this or future implementations
 0211           ;    of this function.  The same is true for all RAM page pointer registers in
 0211           ;    the Large Memory Model.  When necessary, it is the calling function's
 0211           ;    responsibility to perserve their values across calls to fastcall16 
 0211           ;    functions.
 0211           ;          
 0211           ;    Currently only the page pointer registers listed below are modified: 
 0211           ;          CUR_PP
 0211           ;
 0211           ; Stack offset constants
 0000           VBGDATA_CTR:      equ    00h           ; Char data count stack offset
 0001           VBG_BYTES:        equ    01h           ; Byte counter stack offset
 0211           
 0211            LCD_InitVBG:
 0211           _LCD_InitVBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0211 4F            mov   X,SP                         ; Get location of stack
 0212 08            push  A                            ; Create 2 locations
 0213 08            push  A
 0214           
 0214 5040          mov   A,CG_RAM_OFFSET              ; Setup pointer
 0216 9E4A          call  LCD_Control                  ; Position the CG pointer
 0218 560001        mov   [X+VBGDATA_CTR],01h          ; Reset data counter
 021B           
 021B            VBG_Loop1:                            ; loop once for each 8 characters
 021B 560108        mov   [X+VBG_BYTES],08h            ; Load cycle pointer
 021E            VBG_Loop2:                            ; Loop once for each line in character (8 times)
 021E 5200          mov   A,[X+VBGDATA_CTR]
 0220 3B01          cmp   A,[X+VBG_BYTES]
 0222 D005          jnc   VBG_SOLID
 0224 5000          mov   A,00h                        ; Empty line
 0226 8003          jmp   VBG_Load                     ; Jump to load the bargraph
 0228           VBG_SOLID:
 0228 50FF          mov   A,FFh                        ; Load solid line
 022A           VBG_Load:
 022A 9E22          call  LCD_WriteData                ; character data
 022C 7B01          dec   [X+VBG_BYTES]                ; Dec byte counter
 022E BFEF          jnz   VBG_Loop2                    ; End Loop 2
 0230 7700          inc   [X+VBGDATA_CTR]
 0232 3D0009        cmp   [X+VBGDATA_CTR],09h
 0235 BFE5          jnz   VBG_Loop1                    ; End Loop1
 0237           
 0237 18            pop  A
 0238 18            pop  A
 0239 500C          mov  A,DISP_ON                    ; Turn on display, don't really
 023B 9E25          call LCD_Control                   ; need this.
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 023D 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 023F 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0241 7F            ret
 0242           .ENDSECTION
 0242           
 0242           ;-----------------------------------------------------------------------------
 0242           ;  FUNCTION NAME: LCD_InitBG
 0242           ;
 0242           ;  DESCRIPTION:
 0242           ;     Initialize horizontal bargraph characters
 0242           ;
 0242           ;-----------------------------------------------------------------------------
 0242           ;
 0242           ;  ARGUMENTS:
 0242           ;     A = type  0 = full                   |||||||||........
 0242           ;               1 = single vertical line   ..........|......
 0242           ;
 0242           ;  RETURNS:
 0242           ;
 0242           ;  SIDE EFFECTS:
 0242           ;    The A and X registers may be modified by this or future implementations
 0242           ;    of this function.  The same is true for all RAM page pointer registers in
 0242           ;    the Large Memory Model.  When necessary, it is the calling function's
 0242           ;    responsibility to perserve their values across calls to fastcall16 
 0242           ;    functions.
 0242           ;          
 0242           ;    Currently only the page pointer registers listed below are modified: 
 0242           ;          CUR_PP
 0242           ;
 0242           ;    Only one type of bargraph (horizontal or vertical) may be used
 0242           ;    at a time since they each require their own set of characters.
 0242           ;
 0242           ;  THEORY of OPERATION or PROCEDURE:
 0242           ;    This function writes to the LCD character RAM to generate 8 custom
 0242           ;    characters used to generated one of two horizontal bargraphs.
 0242           ;
 0242           .LITERAL
 0242            LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
 0242 0010181C1E1F1F      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
 0249            LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
 0249 00100804020100     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
 0250           .ENDLITERAL
 0250           
 0250           .SECTION
 0250           ; Stack offset constants
 0000           BGDATA_PTR:   equ    00h               ; Stack offsets
 0001           BGCHARS:      equ    01h
 0002           BGTYPE:       equ    02h
 0250           
 0250            LCD_InitBG:
 0250           _LCD_InitBG:
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                      IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      or   F, FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                      IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and  F, ~FLAG_PGMODE_01b
                   ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                      ENDIF
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0250 4F            mov   X,SP                         ; Get location of stack
 0251 3803          add   SP,3
 0253 5402          mov   [X+BGTYPE],A                 ; Store the bargraph type
 0255           
 0255 5040          mov   A,CG_RAM_OFFSET              ; Setup pointer
 0257 9E09          call  LCD_Control                  ; Position the CG pointer
 0259 560000        mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
 025C           
 025C            BG_Loop1:
 025C 560108        mov   [X+BGCHARS],08h              ; Load cycle pointer
 025F            BG_Loop2:
 025F 5200          mov   A,[X+BGDATA_PTR]
 0261 3D0200        cmp   [X+BGTYPE],00h               ; Check which bargraph
 0264 B005          jnz   BG_OTHER
 0266 FFDA          index LCD_BG_TYPE1
 0268 8003          jmp   BG_Load
 026A            BG_OTHER:
 026A FFDD          index LCD_BG_TYPE2
 026C            BG_Load:
 026C 9DE0          call  LCD_WriteData
 026E 7B01          dec   [X+BGCHARS]                  ; Character builder counter
 0270 BFEE          jnz   BG_Loop2
 0272 7700          inc   [X+BGDATA_PTR]               ; Advance to next character
 0274 3D0007        cmp   [X+BGDATA_PTR],07h
 0277 BFE4          jnz   BG_Loop1
 0279           
 0279 38FD          add   SP,-3
 027B 500C          mov   A,DISP_ON
 027D 9DE3          call  LCD_Control
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_1 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_1
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_2 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
 027F 703F            and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
 0281 71C0            or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_2
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_3 )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                   IF ( SYSTEM_IDXPG_TRACKS_STK_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_11b
                   ENDIF
                   ENDIF ;  PGMODE LOCKED
                   IF ( SYSTEM_IDXPG_TRACKS_IDX_PP )
                   IF ( SYSTEM_LARGE_MEMORY_MODEL )
                      and   F, ~FLAG_PGMODE_MASK        ; NOTE: transition thru 00b state
                      or    F,  FLAG_PGMODE_MASK & FLAG_PGMODE_10b
                   ENDIF
                   ENDIF ; PGMODE FREE
                   ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                   ENDIF ; RAM_USE_CLASS_3
                
                   IF ( RAM_USE_CLASS_2 & RAM_USE_CLASS_4 )
                   ; Nothing to do
                   ENDIF ; RAM_USE_CLASS_4
                
 0283 7F            ret
 0284           .ENDSECTION
 0284           
                ENDIF
                
                ; End of File LCD.asm
