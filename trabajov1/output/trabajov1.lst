0000: 80 67    JMP   0x0068
0002: 30       HALT  
0003: 30       HALT  

FILE: .\boot.asm
                                   (0001) ; Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0002) ;
                                   (0003) ;@Id: boot.tpl#103 @
                                   (0004) ;=============================================================================
                                   (0005) ;  FILENAME:   boot.asm
                                   (0006) ;  VERSION:    4.16
                                   (0007) ;  DATE:       6 October 2005
                                   (0008) ;
                                   (0009) ;  DESCRIPTION:
                                   (0010) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                   (0011) ;
                                   (0012) ;  Copyright (C) Cypress Semiconductor 2000-2005. All rights reserved.
                                   (0013) ;
                                   (0014) ; NOTES:
                                   (0015) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                   (0016) ; the project's root directory to create BOOT.ASM. Any changes made to
                                   (0017) ; BOOT.ASM will be  overwritten every time the project is generated; therfore
                                   (0018) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                   (0019) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                   (0020) ; are not accidentally modified.
                                   (0021) ;
                                   (0022) ;=============================================================================
                                   (0023) 
                                   (0024) include ".\lib\GlobalParams.inc"
                                   (0025) include "m8c.inc"
                                   (0026) include "m8ssc.inc"
                                   (0027) include "memory.inc"
                                   (0028) 
                                   (0029) ;--------------------------------------
                                   (0030) ; Export Declarations
                                   (0031) ;--------------------------------------
                                   (0032) 
                                   (0033) export __Start
                                   (0034) export __bss_start
                                   (0035) export __data_start
                                   (0036) export __idata_start
                                   (0037) export __func_lit_start
                                   (0038) export __text_start
                                   (0039) export  _bGetPowerSetting
                                   (0040) export   bGetPowerSetting
                                   (0041) 
                                   (0042) 
                                   (0043) ;--------------------------------------
                                   (0044) ; Optimization flags
                                   (0045) ;--------------------------------------
                                   (0046) ;
                                   (0047) ; To change the value of these flags, modify the file boot.tpl, not
                                   (0048) ; boot.asm. See the notes in the banner comment at the beginning of
                                   (0049) ; this file.
                                   (0050) 
                                   (0051) ; Optimization for Assembly language (only) projects and C-language projects
                                   (0052) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                   (0053) ;   Set to 1: Support for C Run-time Environment initialization
                                   (0054) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                   (0055) ;
                                   (0056) C_LANGUAGE_SUPPORT:              equ 1
                                   (0057) 
                                   (0058) 
                                   (0059) ; The following equate is required for proper operation. Reseting its value
                                   (0060) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                   (0061) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                   (0062) ; and PLL_Lock must take place within user code. See the family data sheet for
                                   (0063) ; the requirements of starting the ECO and PLL lock mode.
                                   (0064) ;
                                   (0065) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                   (0066) ;                invoking main
                                   (0067) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                   (0068) ;               the time code in main starts executing.
                                   (0069) ;
                                   (0070) WAIT_FOR_32K:                    equ 1
                                   (0071) 
                                   (0072) 
                                   (0073) ; For historical reasons, by default the boot code uses an lcall instruction
                                   (0074) ; to invoke the user's _main code. If _main executes a return instruction,
                                   (0075) ; boot provides an infinite loop. By changing the following equate from zero
                                   (0076) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                   (0077) ; bytes on the stack which are otherwise required for the return address. If
                                   (0078) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                   (0079) ; release, the C compiler automatically places an infinite loop at the end
                                   (0080) ; of main, rather than a return instruction.)
                                   (0081) ;
                                   (0082) ENABLE_LJMP_TO_MAIN:             equ 0
                                   (0083) 
                                   (0084) 
                                   (0085) ;-----------------------------------------------------------------------------
                                   (0086) ; Interrupt Vector Table
                                   (0087) ;-----------------------------------------------------------------------------
                                   (0088) ;
                                   (0089) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                   (0090) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                   (0091) ; very short ISRs could be encoded within the table itself. Normally,
                                   (0092) ; vector jump targets are modified automatically according to the user
                                   (0093) ; modules selected. This occurs when the 'Generate Application' opera-
                                   (0094) ; tion is run causing PSoC Designer to create boot.asm and the other
                                   (0095) ; configuration files. If you need to hard code a vector, update the
                                   (0096) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                   (0097) ; of this file.
                                   (0098) ;-----------------------------------------------------------------------------
                                   (0099) 
                                   (0100)     AREA TOP (ROM, ABS, CON)
                                   (0101) 
                                   (0102)     org   0                        ;Reset Interrupt Vector
                                   (0103)     jmp   __Start                  ;First instruction executed following a Reset
                                   (0104) 
                                   (0105)     org   04h                      ;Supply Monitor Interrupt Vector
0004: 30       HALT                (0106)     halt                           ;Stop execution if power falls too low
0005: 30       HALT  
0006: 30       HALT  
0007: 30       HALT  
                                   (0107) 
                                   (0108)     org   08h                      ;Analog Column 0 Interrupt Vector
                                   (0109)     // call	void_handler
0008: 7E       RETI                (0110)     reti
0009: 30       HALT  
000A: 30       HALT  
000B: 30       HALT  
                                   (0111) 
                                   (0112)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                   (0113)     // call	void_handler
000C: 7E       RETI                (0114)     reti
000D: 30       HALT  
000E: 30       HALT  
000F: 30       HALT  
                                   (0115) 
                                   (0116)     org   10h                      ;Analog Column 2 Interrupt Vector
                                   (0117)     // call	void_handler
0010: 7E       RETI                (0118)     reti
0011: 30       HALT  
0012: 30       HALT  
0013: 30       HALT  
                                   (0119) 
                                   (0120)     org   14h                      ;Analog Column 3 Interrupt Vector
                                   (0121)     // call	void_handler
0014: 7E       RETI                (0122)     reti
0015: 30       HALT  
0016: 30       HALT  
0017: 30       HALT  
                                   (0123) 
                                   (0124)     org   18h                      ;VC3 Interrupt Vector
                                   (0125)     // call	void_handler
0018: 7E       RETI                (0126)     reti
0019: 30       HALT  
001A: 30       HALT  
001B: 30       HALT  
                                   (0127) 
                                   (0128)     org   1Ch                      ;GPIO Interrupt Vector
                                   (0129)     // call	void_handler
001C: 7E       RETI                (0130)     reti
001D: 30       HALT  
001E: 30       HALT  
001F: 30       HALT  
                                   (0131) 
                                   (0132)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 05 DB LJMP  0x05DB        (0133)     ljmp	_Timer8_ISR
0023: 7E       RETI                (0134)     reti
                                   (0135) 
                                   (0136)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                   (0137)     // call	void_handler
0024: 7E       RETI                (0138)     reti
0025: 30       HALT  
0026: 30       HALT  
0027: 30       HALT  
                                   (0139) 
                                   (0140)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 03 7C LJMP  0x037C        (0141)     ljmp	_UART_TX_ISR
002B: 7E       RETI                (0142)     reti
                                   (0143) 
                                   (0144)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 7D LJMP  0x037D        (0145)     ljmp	_UART_RX_ISR
002F: 7E       RETI                (0146)     reti
                                   (0147) 
                                   (0148)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                   (0149)     // call	void_handler
0030: 7E       RETI                (0150)     reti
0031: 30       HALT  
0032: 30       HALT  
0033: 30       HALT  
                                   (0151) 
                                   (0152)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                   (0153)     // call	void_handler
0034: 7E       RETI                (0154)     reti
0035: 30       HALT  
0036: 30       HALT  
0037: 30       HALT  
                                   (0155) 
                                   (0156)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                   (0157)     // call	void_handler
0038: 7E       RETI                (0158)     reti
0039: 30       HALT  
003A: 30       HALT  
003B: 30       HALT  
                                   (0159) 
                                   (0160)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                   (0161)     // call	void_handler
003C: 7E       RETI                (0162)     reti
003D: 30       HALT  
003E: 30       HALT  
003F: 30       HALT  
                                   (0163) 
                                   (0164)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                   (0165)     // call	void_handler
0040: 7E       RETI                (0166)     reti
0041: 30       HALT  
0042: 30       HALT  
0043: 30       HALT  
                                   (0167) 
                                   (0168)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                   (0169)     // call	void_handler
0044: 7E       RETI                (0170)     reti
0045: 30       HALT  
0046: 30       HALT  
0047: 30       HALT  
                                   (0171) 
                                   (0172)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                   (0173)     // call	void_handler
0048: 7E       RETI                (0174)     reti
0049: 30       HALT  
004A: 30       HALT  
004B: 30       HALT  
                                   (0175) 
                                   (0176)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                   (0177)     // call	void_handler
004C: 7E       RETI                (0178)     reti
004D: 30       HALT  
004E: 30       HALT  
004F: 30       HALT  
                                   (0179) 
                                   (0180)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                   (0181)     // call	void_handler
0050: 7E       RETI                (0182)     reti
0051: 30       HALT  
0052: 30       HALT  
0053: 30       HALT  
                                   (0183) 
                                   (0184)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                   (0185)     // call	void_handler
0054: 7E       RETI                (0186)     reti
0055: 30       HALT  
0056: 30       HALT  
0057: 30       HALT  
                                   (0187) 
                                   (0188)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                   (0189)     // call	void_handler
0058: 7E       RETI                (0190)     reti
0059: 30       HALT  
005A: 30       HALT  
005B: 30       HALT  
                                   (0191) 
                                   (0192)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                   (0193)     // call	void_handler
005C: 7E       RETI                (0194)     reti
005D: 30       HALT  
005E: 30       HALT  
005F: 30       HALT  
                                   (0195) 
                                   (0196)     org   60h                      ;PSoC I2C Interrupt Vector
                                   (0197)     // call	void_handler
0060: 7E       RETI                (0198)     reti
0061: 30       HALT  
0062: 30       HALT  
0063: 30       HALT  
                                   (0199) 
                                   (0200)     org   64h                      ;Sleep Timer Interrupt Vector
                                   (0201)     // call	void_handler
0064: 7E       RETI                (0202)     reti
0065: 30       HALT  
0066: 30       HALT  
0067: 30       HALT  
                                   (0203) 
                                   (0204) ;-----------------------------------------------------------------------------
                                   (0205) ;  Start of Execution.
                                   (0206) ;-----------------------------------------------------------------------------
                                   (0207) ;  The Supervisory ROM SWBootReset function has already completed the
                                   (0208) ;  calibrate1 process, loading trim values for 5 volt operation.
                                   (0209) ;
                                   (0210)     org 68h
                                   (0211) __Start:
                                   (0212) 
                                   (0213)     ; initialize SMP values for voltage stabilization, if required,
                                   (0214)     ; leaving power-on reset (POR) level at the default (low) level, at
                                   (0215)     ; least for now. 
                                   (0216)     ;
0068: 71 10    OR    F,16          (0217)     M8C_SetBank1
006A: 62 E3 87 MOV   REG[227],135  (0218)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
006D: 70 EF    AND   F,239         (0219)     M8C_SetBank0
                                   (0220) 
                                   (0221)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
006F: 50 20    MOV   A,32          (0222)     mov   A, 20h
0071: 28       ROMX                (0223)     romx
0072: 50 40    MOV   A,64          (0224)     mov   A, 40h
0074: 28       ROMX                (0225)     romx
0075: 50 60    MOV   A,96          (0226)     mov   A, 60h
0077: 28       ROMX                (0227)     romx
                                   (0228)     ; %45%20%46%46% End workaround
                                   (0229) 
                                   (0230) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                   (0231)     M8C_EnableWatchDog
                                   (0232) ENDIF
                                   (0233) 
                                   (0234) IF ( SELECT_32K )
                                   (0235)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                   (0236) ELSE
0078: 41 FE FB AND   REG[254],251  (0237)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                   (0238) ENDIF
                                   (0239) 
                                   (0240)     ;---------------------------
                                   (0241)     ; Set up the Temporary stack
                                   (0242)     ;---------------------------
                                   (0243)     ; A temporary stack is set up for the SSC instructions.
                                   (0244)     ; The real stack start will be assigned later.
                                   (0245)     ;
                                   (0246) _stack_start:          equ 80h
007B: 50 80    MOV   A,128         (0247)     mov   A, _stack_start          ; Set top of stack to end of used RAM
007D: 4E       SWAP  SP,A          (0248)     swap  SP, A                    ; This is only temporary if going to LMM
                                   (0249) 
                                   (0250)     ;-----------------------------------------------
                                   (0251)     ; Set Power-related Trim & the AGND Bypass bit.
                                   (0252)     ;-----------------------------------------------
                                   (0253) 
                                   (0254) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                   (0255)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0256)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0257)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0258)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0259)   IF ( AGND_BYPASS )
                                   (0260)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0261)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                   (0262)     ; bit in the write-only BDG_TR register. Recalculate the register
                                   (0263)     ; value using the proper trim values.
                                   (0264)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0265)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                   (0266)   ENDIF
                                   (0267)  ENDIF
                                   (0268) ENDIF ; 5.0 V Operation
                                   (0269) 
                                   (0270) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                   (0271)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                   (0272)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                   (0273)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0274)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                   (0275)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                   (0276)  ENDIF
                                   (0277) ENDIF ; 3.3 Volt Operation
                                   (0278) 
007E: 55 F8 00 MOV   [248],0       (0279)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0081: 55 F9 00 MOV   [249],0       (0280)     mov  [bSSC_KEYSP], 0
                                   (0281) 
                                   (0282)     ;---------------------------------------
                                   (0283)     ; Initialize Crystal Oscillator and PLL
                                   (0284)     ;---------------------------------------
                                   (0285) 
                                   (0286) IF ( SELECT_32K & WAIT_FOR_32K )
                                   (0287)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                   (0288)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                   (0289)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                   (0290)     ; the ECO to stabilize.
                                   (0291)     ;
                                   (0292)     M8C_SetBank1
                                   (0293)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                   (0294)     M8C_SetBank0
                                   (0295)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                   (0296)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                   (0297)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                   (0298) .WaitFor1s:
                                   (0299)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                   (0300)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                   (0301)                                           ;   since interrupts are not globally enabled
                                   (0302) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                   (0303)     ; Either no ECO, or waiting for stable clock is to be done in main
0084: 71 10    OR    F,16          (0304)     M8C_SetBank1
0086: 62 E0 02 MOV   REG[224],2    (0305)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0089: 70 EF    AND   F,239         (0306)     M8C_SetBank0
008B: 62 E3 38 MOV   REG[227],56   (0307)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                   (0308) 
                                   (0309) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                   (0310) 
                                   (0311) IF ( PLL_MODE )
                                   (0312)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                   (0313)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                   (0314)     ;
                                   (0315)     M8C_SetBank1
                                   (0316)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                   (0317)     M8C_SetBank0
                                   (0318)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                   (0319)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                   (0320) 
                                   (0321) .WaitFor16ms:
                                   (0322)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                   (0323)     jz   .WaitFor16ms
                                   (0324)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                   (0325)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                   (0326)     M8C_SetBank0
                                   (0327) 
                                   (0328) IF      ( WAIT_FOR_32K )
                                   (0329) ELSE ; !( WAIT_FOR_32K )
                                   (0330)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                   (0331)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                   (0332) ENDIF ;(WAIT_FOR_32K)
                                   (0333) ENDIF ;(PLL_MODE)
                                   (0334) 
                                   (0335)     ;------------------------
                                   (0336)     ; Close CT leakage path.
                                   (0337)     ;------------------------
008E: 62 71 05 MOV   REG[113],5    (0338)     mov   reg[ACB00CR0], 05h
0091: 62 75 05 MOV   REG[117],5    (0339)     mov   reg[ACB01CR0], 05h
0094: 62 79 05 MOV   REG[121],5    (0340)     mov   reg[ACB02CR0], 05h
0097: 62 7D 05 MOV   REG[125],5    (0341)     mov   reg[ACB03CR0], 05h
                                   (0342) 
                                   (0343)     ;---------------------------------------------
                                   (0344)     ; Enter the Large Memory Model, if applicable
                                   (0345)     ;---------------------------------------------
                                   (0346) IF ( SYSTEM_LARGE_MEMORY_MODEL )
009A: 62 D1 07 MOV   REG[209],7    (0347)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
009D: 50 00    MOV   A,0           (0348)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
009F: 4E       SWAP  SP,A          (0349)     swap  A, SP
00A0: 62 D3 07 MOV   REG[211],7    (0350)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
00A3: 62 D0 00 MOV   REG[208],0    (0351)     RAM_SETPAGE_CUR 0
00A6: 62 D5 00 MOV   REG[213],0    (0352)     RAM_SETPAGE_MVW 0
00A9: 62 D4 00 MOV   REG[212],0    (0353)     RAM_SETPAGE_MVR 0
                                   (0354) 
                                   (0355)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00AC: 71 C0    OR    F,192         (0356)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                   (0357)   ELSE
                                   (0358)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                   (0359)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                   (0360) ELSE
                                   (0361)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                   (0362)     swap  SP, A
                                   (0363) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                   (0364) 
                                   (0365)     ;-------------------------
                                   (0366)     ; Load Base Configuration
                                   (0367)     ;-------------------------
                                   (0368)     ; Load global parameter settings and load the user modules in the
                                   (0369)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                   (0370)     ; to minimize start up time; (2) We may still need to play with the
                                   (0371)     ; Sleep Timer.
                                   (0372)     ;
00AE: 7C 03 72 LCALL 0x0372        (0373)     lcall LoadConfigInit
                                   (0374) 
                                   (0375)     ;-----------------------------------
                                   (0376)     ; Initialize C Run-Time Environment
                                   (0377)     ;-----------------------------------
                                   (0378) IF ( C_LANGUAGE_SUPPORT )
                                   (0379) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                   (0380)     mov  A,0                           ; clear the 'bss' segment to zero
                                   (0381)     mov  [__r0],<__bss_start
                                   (0382) BssLoop:
                                   (0383)     cmp  [__r0],<__bss_end
                                   (0384)     jz   BssDone
                                   (0385)     mvi  [__r0],A
                                   (0386)     jmp  BssLoop
                                   (0387) BssDone:
                                   (0388)     mov  A,>__idata_start              ; copy idata to data segment
                                   (0389)     mov  X,<__idata_start
                                   (0390)     mov  [__r0],<__data_start
                                   (0391) IDataLoop:
                                   (0392)     cmp  [__r0],<__data_end
                                   (0393)     jz   C_RTE_Done
                                   (0394)     push A
                                   (0395)     romx
                                   (0396)     mvi  [__r0],A
                                   (0397)     pop  A
                                   (0398)     inc  X
                                   (0399)     adc  A,0
                                   (0400)     jmp  IDataLoop
                                   (0401) 
                                   (0402) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                   (0403) 
                                   (0404) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00B1: 62 D0 00 MOV   REG[208],0    (0405)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                   (0406)                                        ; to use the Virtual Register page.
                                   (0407) 
                                   (0408)     ; Dereference the constant (flash) pointer pXIData to access the start
                                   (0409)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                   (0410)     ; text segment and may have been relocated by the Code Compressor.
                                   (0411)     ;
00B4: 50 01    MOV   A,1           (0412)     mov   A, >__pXIData                ; Get the address of the flash
00B6: 57 A0    MOV   X,160         (0413)     mov   X, <__pXIData                ;   pointer to the xidata area.
00B8: 08       PUSH  A             (0414)     push  A
00B9: 28       ROMX                (0415)     romx                               ; get the MSB of xidata's address
00BA: 53 13    MOV   [__r0],A      (0416)     mov   [__r0], A
00BC: 18       POP   A             (0417)     pop   A
00BD: 75       INC   X             (0418)     inc   X
00BE: 09 00    ADC   A,0           (0419)     adc   A, 0
00C0: 28       ROMX                (0420)     romx                               ; get the LSB of xidata's address
00C1: 4B       SWAP  A,X           (0421)     swap  A, X
00C2: 51 13    MOV   A,[19]        (0422)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                   (0423)                                        ;   XIData structure list in flash
00C4: 80 04    JMP   0x00C9        (0424)     jmp   .AccessStruct
                                   (0425) 
                                   (0426)     ; Unpack one element in the xidata "structure list" that specifies the
                                   (0427)     ; values of C variables. Each structure contains 3 member elements.
                                   (0428)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                   (0429)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                   (0430)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                   (0431)     ; contains 0xFF. There are two formats for the struct depending on the
                                   (0432)     ; value in the second member element, an unsigned byte:
                                   (0433)     ; (1) If the value of the second element is non-zero, it represents
                                   (0434)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                   (0435)     ; third member of the struct is an array of bytes of length 'size' and
                                   (0436)     ; the bytes are copied to the block of RAM.
                                   (0437)     ; (2) If the value of the second element is zero, the block of RAM is
                                   (0438)     ; to be cleared to zero. In this case, the third member of the struct
                                   (0439)     ; is an unsigned byte containing the number of bytes to clear.
                                   (0440) 
                                   (0441) .AccessNextStructLoop:
00C6: 75       INC   X             (0442)     inc   X                            ; pXIData++
00C7: 09 00    ADC   A,0           (0443)     adc   A, 0
                                   (0444) .AccessStruct:                         ; Entry point for first block
                                   (0445)     ;
                                   (0446)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                   (0447)     ;
00C9: 62 E3 00 MOV   REG[227],0    (0448)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00CC: 08       PUSH  A             (0449)     push  A
00CD: 28       ROMX                (0450)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00CE: 60 D5    MOV   REG[213],A    (0451)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D0: 74       INC   A             (0452)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00D1: A0 4B    JZ    0x011D        (0453)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00D3: 18       POP   A             (0454)     pop   A                            ; restore pXIData to [A,X]
00D4: 75       INC   X             (0455)     inc   X                            ; pXIData++
00D5: 09 00    ADC   A,0           (0456)     adc   A, 0
00D7: 08       PUSH  A             (0457)     push  A
00D8: 28       ROMX                (0458)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00D9: 53 13    MOV   [__r0],A      (0459)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00DB: 18       POP   A             (0460)     pop   A                            ; restore pXIData to [A,X]
00DC: 75       INC   X             (0461)     inc   X                            ; pXIData++ (point to size)
00DD: 09 00    ADC   A,0           (0462)     adc   A, 0
00DF: 08       PUSH  A             (0463)     push  A
00E0: 28       ROMX                (0464)     romx                               ; Get the size (CPU.A <- *pXIData)
00E1: A0 1C    JZ    0x00FE        (0465)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00E3: 53 12    MOV   [__r1],A      (0466)     mov   [__r1], A                    ;             else downcount in __r1
00E5: 18       POP   A             (0467)     pop   A                            ; restore pXIData to [A,X]
                                   (0468) 
                                   (0469) .CopyNextByteLoop:
                                   (0470)     ; For each byte in the structure's array member, copy from flash to RAM.
                                   (0471)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                   (0472)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                   (0473)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                   (0474)     ;
00E6: 75       INC   X             (0475)     inc   X                            ; pXIData++ (point to next data byte)
00E7: 09 00    ADC   A,0           (0476)     adc   A, 0
00E9: 08       PUSH  A             (0477)     push  A
00EA: 28       ROMX                (0478)     romx                               ; Get the data value (CPU.A <- *pXIData)
00EB: 3F 13    MVI   [__r0],A      (0479)     mvi   [__r0], A                    ; Transfer the data to RAM
00ED: 47 13 FF TST   [19],255      (0480)     tst   [__r0], 0xff                 ; Check for page crossing
00F0: B0 06    JNZ   0x00F7        (0481)     jnz   .CopyLoopTail                ;   No crossing, keep going
00F2: 5D D5    MOV   A,REG[213]    (0482)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00F4: 74       INC   A             (0483)     inc   A
00F5: 60 D5    MOV   REG[213],A    (0484)     mov   reg[ MVW_PP], A
                                   (0485) .CopyLoopTail:
00F7: 18       POP   A             (0486)     pop   A                            ; restore pXIData to [A,X]
00F8: 7A 12    DEC   [__r1]        (0487)     dec   [__r1]                       ; End of this array in flash?
00FA: BF EB    JNZ   0x00E6        (0488)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
00FC: 8F C9    JMP   0x00C6        (0489)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                   (0490) 
                                   (0491) .ClearRAMBlockToZero:
00FE: 18       POP   A             (0492)     pop   A                            ; restore pXIData to [A,X]
00FF: 75       INC   X             (0493)     inc   X                            ; pXIData++ (point to next data byte)
0100: 09 00    ADC   A,0           (0494)     adc   A, 0
0102: 08       PUSH  A             (0495)     push  A
0103: 28       ROMX                (0496)     romx                               ; Get the run length (CPU.A <- *pXIData)
0104: 53 12    MOV   [__r1],A      (0497)     mov   [__r1], A                    ; Initialize downcounter
0106: 50 00    MOV   A,0           (0498)     mov   A, 0                         ; Initialize source data
                                   (0499) 
                                   (0500) .ClearRAMBlockLoop:
                                   (0501)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                   (0502)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                   (0503)     ;
0108: 3F 13    MVI   [__r0],A      (0504)     mvi   [__r0], A                    ; Clear a byte
010A: 47 13 FF TST   [19],255      (0505)     tst   [__r0], 0xff                 ; Check for page crossing
010D: B0 08    JNZ   0x0116        (0506)     jnz   .ClearLoopTail               ;   No crossing, keep going
010F: 5D D5    MOV   A,REG[213]    (0507)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0111: 74       INC   A             (0508)     inc   A
0112: 60 D5    MOV   REG[213],A    (0509)     mov   reg[ MVW_PP], A
0114: 50 00    MOV   A,0           (0510)     mov   A, 0                         ; Restore the zero used for clearing
                                   (0511) .ClearLoopTail:
0116: 7A 12    DEC   [__r1]        (0512)     dec   [__r1]                       ; Was this the last byte?
0118: BF EF    JNZ   0x0108        (0513)     jnz   .ClearRAMBlockLoop           ;   No,  continue
011A: 18       POP   A             (0514)     pop   A                            ;   Yes, restore pXIData to [A,X] and
011B: 8F AA    JMP   0x00C6        (0515)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                   (0516) 
                                   (0517) .C_RTE_WrapUp:
011D: 18       POP   A             (0518)     pop   A                            ; balance stack
                                   (0519) 
                                   (0520) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                   (0521) 
                                   (0522) C_RTE_Done:
                                   (0523) 
                                   (0524) ENDIF ; C_LANGUAGE_SUPPORT
                                   (0525) 
                                   (0526)     ;-------------------------------
                                   (0527)     ; Voltage Stabilization for SMP
                                   (0528)     ;-------------------------------
                                   (0529) 
                                   (0530) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                   (0531) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                   (0532)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0533)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                   (0534)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                   (0535)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                   (0536)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                   (0537)     M8C_SetBank1
                                   (0538)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                   (0539)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                   (0540)     M8C_SetBank0
                                   (0541)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                   (0542)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                   (0543) .WaitFor2ms:
                                   (0544)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                   (0545)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                   (0546) ENDIF ; SMP is operational
                                   (0547) ENDIF ; 5.0V Operation
                                   (0548) 
                                   (0549)     ;-------------------------------
                                   (0550)     ; Set Power-On Reset (POR) Level
                                   (0551)     ;-------------------------------
011E: 71 10    OR    F,16          (0552)     M8C_SetBank1
                                   (0553) 
                                   (0554) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                   (0555)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                   (0556)  ELSE                                       ;    No, fast mode
                                   (0557)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                   (0558)                                             ;       no, set midpoint POR in user code, if desired
                                   (0559)   ELSE ; 24HMz                              ;
                                   (0560)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                   (0561)   ENDIF ; 24MHz
                                   (0562)  ENDIF ; Slow Mode
                                   (0563) ENDIF ; 5.0V Operation
                                   (0564) 
0120: 70 EF    AND   F,239         (0565)     M8C_SetBank0
                                   (0566) 
                                   (0567)     ;----------------------------
                                   (0568)     ; Wrap up and invoke "main"
                                   (0569)     ;----------------------------
                                   (0570) 
                                   (0571)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                   (0572)     ; no interrupts should be enabled now, so may as well clear the register.
                                   (0573)     ;
0122: 62 E0 00 MOV   REG[224],0    (0574)     mov  reg[INT_MSK0],0
                                   (0575) 
                                   (0576)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                   (0577)     ; And put decimator in full mode so it does not consume too much current.
                                   (0578)     ;
0125: 71 10    OR    F,16          (0579)     M8C_SetBank1
0127: 62 E0 00 MOV   REG[224],0    (0580)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
012A: 43 E7 80 OR    REG[231],128  (0581)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
012D: 70 EF    AND   F,239         (0582)     M8C_SetBank0
                                   (0583) 
                                   (0584)     ; Global Interrupt are NOT enabled, this should be done in main().
                                   (0585)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                   (0586)     ; Global Interrupts should be enabled as soon as possible in main().
                                   (0587)     ;
012F: 62 E2 00 MOV   REG[226],0    (0588)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                   (0589)                                    ; have been set during the boot process.
                                   (0590) IF ENABLE_LJMP_TO_MAIN
                                   (0591)     ljmp  _main                    ; goto main (no return)
                                   (0592) ELSE
0132: 7C 07 83 LCALL _main         (0593)     lcall _main                    ; call main
                                   (0594) .Exit:
0135: 8F FF    JMP   0x0135        (0595)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                   (0596) ENDIF
                                   (0597) 
                                   (0598)     ;---------------------------------
                                   (0599)     ; Library Access to Global Parms
                                   (0600)     ;---------------------------------
                                   (0601)     ;
                                   (0602)  bGetPowerSetting:
                                   (0603) _bGetPowerSetting:
                                   (0604)     ; Returns value of POWER_SETTING in the A register.
                                   (0605)     ; No inputs. No Side Effects.
                                   (0606)     ;
0137: 50 10    MOV   A,16          (0607)     mov   A, POWER_SETTING
0139: 7F       RET                 (0608)     ret
013A: 30       HALT  
013B: 30       HALT  
013C: 30       HALT  
013D: 30       HALT  
013E: 30       HALT  
013F: 30       HALT  
0140: 30       HALT  
0141: 30       HALT  
0142: 30       HALT  
0143: 30       HALT  
0144: 30       HALT  
0145: 30       HALT  
0146: 30       HALT  
0147: 30       HALT  
0148: 30       HALT  
0149: 30       HALT  
014A: 30       HALT  
014B: 30       HALT  
014C: 30       HALT  
014D: 30       HALT  
014E: 30       HALT  
014F: 30       HALT  
0150: 30       HALT  
0151: 30       HALT  
0152: 30       HALT  
0153: 30       HALT  
0154: 30       HALT  
0155: 30       HALT  
0156: 30       HALT  
0157: 30       HALT  
0158: 30       HALT  
0159: 30       HALT  
015A: 30       HALT  
015B: 30       HALT  
015C: 30       HALT  
015D: 30       HALT  
015E: 30       HALT  
015F: 30       HALT  
0160: 30       HALT  
0161: 30       HALT  
0162: 30       HALT  
0163: 30       HALT  
0164: 30       HALT  
0165: 30       HALT  
0166: 30       HALT  
0167: 30       HALT  
0168: 30       HALT  
0169: 30       HALT  
016A: 30       HALT  
016B: 30       HALT  
016C: 30       HALT  
016D: 30       HALT  
016E: 30       HALT  
016F: 30       HALT  
0170: 30       HALT  
0171: 30       HALT  
0172: 30       HALT  
0173: 30       HALT  
0174: 30       HALT  
0175: 30       HALT  
0176: 30       HALT  
0177: 30       HALT  
0178: 30       HALT  
0179: 30       HALT  
017A: 30       HALT  
017B: 30       HALT  
017C: 30       HALT  
017D: 30       HALT  
017E: 30       HALT  
017F: 30       HALT  
0180: 30       HALT  
0181: 30       HALT  
0182: 30       HALT  
0183: 30       HALT  
0184: 30       HALT  
0185: 30       HALT  
0186: 30       HALT  
0187: 30       HALT  
0188: 30       HALT  
0189: 30       HALT  
018A: 30       HALT  
018B: 30       HALT  
018C: 30       HALT  
018D: 30       HALT  
018E: 30       HALT  
018F: 30       HALT  
0190: 30       HALT  
0191: 30       HALT  
0192: 30       HALT  
0193: 30       HALT  
0194: 30       HALT  
0195: 30       HALT  
0196: 30       HALT  
0197: 30       HALT  
0198: 30       HALT  
0199: 30       HALT  
019A: 30       HALT  
019B: 30       HALT  
019C: 30       HALT  
019D: 30       HALT  
019E: 30       HALT  
019F: 30       HALT  
01A0: 07 A4 71 ADD   [X-92],113

FILE: lib\psocconfigtbl.asm
                                   (0001) ; Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0002) ;
                                   (0003) include "m8c.inc"
                                   (0004) ;  Personalization tables 
                                   (0005) export LoadConfigTBL_trabajov1
                                   (0006) AREA psoc_config(rom, rel)
                                   (0007) LoadConfigTBL_trabajov1:
                                   (0008) ;  Ordered Global Register values
01A3: 10       PUSH  X             (0009) 	M8C_SetBank1
01A4: 62 00 57 MOV   REG[0],87     (0010) 	mov	reg[00h], 57h		; Port_0_DriveMode_0 register (PRT0DM0)
01A7: 62 01 AA MOV   REG[1],170    (0011) 	mov	reg[01h], aah		; Port_0_DriveMode_1 register (PRT0DM1)
01AA: 70 EF    AND   F,239         (0012) 	M8C_SetBank0
01AC: 62 03 08 MOV   REG[3],8      (0013) 	mov	reg[03h], 08h		; Port_0_DriveMode_2 register (PRT0DM2)
01AF: 62 02 00 MOV   REG[2],0      (0014) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
01B2: 71 10    OR    F,16          (0015) 	M8C_SetBank1
01B4: 62 02 00 MOV   REG[2],0      (0016) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
01B7: 62 03 00 MOV   REG[3],0      (0017) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
01BA: 70 EF    AND   F,239         (0018) 	M8C_SetBank0
01BC: 62 01 00 MOV   REG[1],0      (0019) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
01BF: 71 10    OR    F,16          (0020) 	M8C_SetBank1
01C1: 62 04 10 MOV   REG[4],16     (0021) 	mov	reg[04h], 10h		; Port_1_DriveMode_0 register (PRT1DM0)
01C4: 62 05 EF MOV   REG[5],239    (0022) 	mov	reg[05h], efh		; Port_1_DriveMode_1 register (PRT1DM1)
01C7: 70 EF    AND   F,239         (0023) 	M8C_SetBank0
01C9: 62 07 AF MOV   REG[7],175    (0024) 	mov	reg[07h], afh		; Port_1_DriveMode_2 register (PRT1DM2)
01CC: 62 06 50 MOV   REG[6],80     (0025) 	mov	reg[06h], 50h		; Port_1_GlobalSelect register (PRT1GS)
01CF: 71 10    OR    F,16          (0026) 	M8C_SetBank1
01D1: 62 06 00 MOV   REG[6],0      (0027) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
01D4: 62 07 00 MOV   REG[7],0      (0028) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
01D7: 70 EF    AND   F,239         (0029) 	M8C_SetBank0
01D9: 62 05 00 MOV   REG[5],0      (0030) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
01DC: 71 10    OR    F,16          (0031) 	M8C_SetBank1
01DE: 62 08 55 MOV   REG[8],85     (0032) 	mov	reg[08h], 55h		; Port_2_DriveMode_0 register (PRT2DM0)
01E1: 62 09 AA MOV   REG[9],170    (0033) 	mov	reg[09h], aah		; Port_2_DriveMode_1 register (PRT2DM1)
01E4: 70 EF    AND   F,239         (0034) 	M8C_SetBank0
01E6: 62 0B AA MOV   REG[11],170   (0035) 	mov	reg[0bh], aah		; Port_2_DriveMode_2 register (PRT2DM2)
01E9: 62 0A 00 MOV   REG[10],0     (0036) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
01EC: 71 10    OR    F,16          (0037) 	M8C_SetBank1
01EE: 62 0A 00 MOV   REG[10],0     (0038) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
01F1: 62 0B 00 MOV   REG[11],0     (0039) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
01F4: 70 EF    AND   F,239         (0040) 	M8C_SetBank0
01F6: 62 09 00 MOV   REG[9],0      (0041) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
01F9: 71 10    OR    F,16          (0042) 	M8C_SetBank1
01FB: 62 0C 00 MOV   REG[12],0     (0043) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
01FE: 62 0D 00 MOV   REG[13],0     (0044) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0201: 70 EF    AND   F,239         (0045) 	M8C_SetBank0
0203: 62 0F 00 MOV   REG[15],0     (0046) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0206: 62 0E 00 MOV   REG[14],0     (0047) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0209: 71 10    OR    F,16          (0048) 	M8C_SetBank1
020B: 62 0E 00 MOV   REG[14],0     (0049) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
020E: 62 0F 00 MOV   REG[15],0     (0050) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0211: 70 EF    AND   F,239         (0051) 	M8C_SetBank0
0213: 62 0D 00 MOV   REG[13],0     (0052) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0216: 71 10    OR    F,16          (0053) 	M8C_SetBank1
0218: 62 10 00 MOV   REG[16],0     (0054) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
021B: 62 11 00 MOV   REG[17],0     (0055) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
021E: 70 EF    AND   F,239         (0056) 	M8C_SetBank0
0220: 62 13 00 MOV   REG[19],0     (0057) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0223: 62 12 00 MOV   REG[18],0     (0058) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0226: 71 10    OR    F,16          (0059) 	M8C_SetBank1
0228: 62 12 00 MOV   REG[18],0     (0060) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
022B: 62 13 00 MOV   REG[19],0     (0061) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
022E: 70 EF    AND   F,239         (0062) 	M8C_SetBank0
0230: 62 11 00 MOV   REG[17],0     (0063) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0233: 71 10    OR    F,16          (0064) 	M8C_SetBank1
0235: 62 14 00 MOV   REG[20],0     (0065) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0238: 62 15 00 MOV   REG[21],0     (0066) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
023B: 70 EF    AND   F,239         (0067) 	M8C_SetBank0
023D: 62 17 00 MOV   REG[23],0     (0068) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0240: 62 16 00 MOV   REG[22],0     (0069) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0243: 71 10    OR    F,16          (0070) 	M8C_SetBank1
0245: 62 16 00 MOV   REG[22],0     (0071) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0248: 62 17 00 MOV   REG[23],0     (0072) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
024B: 70 EF    AND   F,239         (0073) 	M8C_SetBank0
024D: 62 15 00 MOV   REG[21],0     (0074) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0250: 71 10    OR    F,16          (0075) 	M8C_SetBank1
0252: 62 18 00 MOV   REG[24],0     (0076) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0255: 62 19 00 MOV   REG[25],0     (0077) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0258: 70 EF    AND   F,239         (0078) 	M8C_SetBank0
025A: 62 1B 00 MOV   REG[27],0     (0079) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
025D: 62 1A 00 MOV   REG[26],0     (0080) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0260: 71 10    OR    F,16          (0081) 	M8C_SetBank1
0262: 62 1A 00 MOV   REG[26],0     (0082) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0265: 62 1B 00 MOV   REG[27],0     (0083) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0268: 70 EF    AND   F,239         (0084) 	M8C_SetBank0
026A: 62 19 00 MOV   REG[25],0     (0085) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
026D: 71 10    OR    F,16          (0086) 	M8C_SetBank1
026F: 62 1C 00 MOV   REG[28],0     (0087) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0272: 62 1D 00 MOV   REG[29],0     (0088) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0275: 70 EF    AND   F,239         (0089) 	M8C_SetBank0
0277: 62 1F 00 MOV   REG[31],0     (0090) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
027A: 62 1E 00 MOV   REG[30],0     (0091) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
027D: 71 10    OR    F,16          (0092) 	M8C_SetBank1
027F: 62 1E 00 MOV   REG[30],0     (0093) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0282: 62 1F 00 MOV   REG[31],0     (0094) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0285: 70 EF    AND   F,239         (0095) 	M8C_SetBank0
0287: 62 1D 00 MOV   REG[29],0     (0096) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
028A: 70 EF    AND   F,239         (0097) 	M8C_SetBank0
                                   (0098) ;  Global Register values
028C: 62 60 28 MOV   REG[96],40    (0099) 	mov	reg[60h], 28h		; AnalogColumnInputSelect register (AMX_IN)
028F: 62 66 00 MOV   REG[102],0    (0100) 	mov	reg[66h], 00h		; AnalogComparatorControl1 register (CMP_CR1)
0292: 62 63 05 MOV   REG[99],5     (0101) 	mov	reg[63h], 05h		; AnalogReferenceControl register (ARF_CR)
0295: 62 65 00 MOV   REG[101],0    (0102) 	mov	reg[65h], 00h		; AnalogSyncControl register (ASY_CR)
0298: 62 E6 00 MOV   REG[230],0    (0103) 	mov	reg[e6h], 00h		; DecimatorControl_0 register (DEC_CR0)
029B: 62 E7 00 MOV   REG[231],0    (0104) 	mov	reg[e7h], 00h		; DecimatorControl_1 register (DEC_CR1)
029E: 62 D6 00 MOV   REG[214],0    (0105) 	mov	reg[d6h], 00h		; I2CConfig register (I2CCFG)
02A1: 62 B0 30 MOV   REG[176],48   (0106) 	mov	reg[b0h], 30h		; Row_0_InputMux register (RDI0RI)
02A4: 62 B1 00 MOV   REG[177],0    (0107) 	mov	reg[b1h], 00h		; Row_0_InputSync register (RDI0SYN)
02A7: 62 B2 00 MOV   REG[178],0    (0108) 	mov	reg[b2h], 00h		; Row_0_LogicInputAMux register (RDI0IS)
02AA: 62 B3 33 MOV   REG[179],51   (0109) 	mov	reg[b3h], 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
02AD: 62 B4 33 MOV   REG[180],51   (0110) 	mov	reg[b4h], 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
02B0: 62 B5 08 MOV   REG[181],8    (0111) 	mov	reg[b5h], 08h		; Row_0_OutputDrive_0 register (RDI0SRO0)
02B3: 62 B6 00 MOV   REG[182],0    (0112) 	mov	reg[b6h], 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
02B6: 62 B8 55 MOV   REG[184],85   (0113) 	mov	reg[b8h], 55h		; Row_1_InputMux register (RDI1RI)
02B9: 62 B9 00 MOV   REG[185],0    (0114) 	mov	reg[b9h], 00h		; Row_1_InputSync register (RDI1SYN)
02BC: 62 BA 10 MOV   REG[186],16   (0115) 	mov	reg[bah], 10h		; Row_1_LogicInputAMux register (RDI1IS)
02BF: 62 BB 33 MOV   REG[187],51   (0116) 	mov	reg[bbh], 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
02C2: 62 BC 33 MOV   REG[188],51   (0117) 	mov	reg[bch], 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
02C5: 62 BD 00 MOV   REG[189],0    (0118) 	mov	reg[bdh], 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
02C8: 62 BE 00 MOV   REG[190],0    (0119) 	mov	reg[beh], 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
02CB: 62 C0 00 MOV   REG[192],0    (0120) 	mov	reg[c0h], 00h		; Row_2_InputMux register (RDI2RI)
02CE: 62 C1 00 MOV   REG[193],0    (0121) 	mov	reg[c1h], 00h		; Row_2_InputSync register (RDI2SYN)
02D1: 62 C2 20 MOV   REG[194],32   (0122) 	mov	reg[c2h], 20h		; Row_2_LogicInputAMux register (RDI2IS)
02D4: 62 C3 33 MOV   REG[195],51   (0123) 	mov	reg[c3h], 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
02D7: 62 C4 33 MOV   REG[196],51   (0124) 	mov	reg[c4h], 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
02DA: 62 C5 00 MOV   REG[197],0    (0125) 	mov	reg[c5h], 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
02DD: 62 C6 00 MOV   REG[198],0    (0126) 	mov	reg[c6h], 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
02E0: 62 C8 55 MOV   REG[200],85   (0127) 	mov	reg[c8h], 55h		; Row_3_InputMux register (RDI3RI)
02E3: 62 C9 00 MOV   REG[201],0    (0128) 	mov	reg[c9h], 00h		; Row_3_InputSync register (RDI3SYN)
02E6: 62 CA 30 MOV   REG[202],48   (0129) 	mov	reg[cah], 30h		; Row_3_LogicInputAMux register (RDI3IS)
02E9: 62 CB 33 MOV   REG[203],51   (0130) 	mov	reg[cbh], 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
02EC: 62 CC 33 MOV   REG[204],51   (0131) 	mov	reg[cch], 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
02EF: 62 CD 00 MOV   REG[205],0    (0132) 	mov	reg[cdh], 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
02F2: 62 CE 00 MOV   REG[206],0    (0133) 	mov	reg[ceh], 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
02F5: 62 6C 00 MOV   REG[108],0    (0134) 	mov	reg[6ch], 00h		; TMP_DR0 register (TMP_DR0)
02F8: 62 6D 00 MOV   REG[109],0    (0135) 	mov	reg[6dh], 00h		; TMP_DR1 register (TMP_DR1)
02FB: 62 6E 00 MOV   REG[110],0    (0136) 	mov	reg[6eh], 00h		; TMP_DR2 register (TMP_DR2)
02FE: 62 6F 00 MOV   REG[111],0    (0137) 	mov	reg[6fh], 00h		; TMP_DR3 register (TMP_DR3)
                                   (0138) ;  Instance name Timer8, User Module Timer8
                                   (0139) ;       Instance name Timer8, Block Name TIMER8(DBB00)
0301: 62 23 04 MOV   REG[35],4     (0140) 	mov	reg[23h], 04h		;Timer8_CONTROL_REG(DBB00CR0)
0304: 62 21 00 MOV   REG[33],0     (0141) 	mov	reg[21h], 00h		;Timer8_PERIOD_REG(DBB00DR1)
0307: 62 22 00 MOV   REG[34],0     (0142) 	mov	reg[22h], 00h		;Timer8_COMPARE_REG(DBB00DR2)
                                   (0143) ;  Instance name UART, User Module UART
                                   (0144) ;       Instance name UART, Block Name RX(DCB03)
030A: 62 2F 00 MOV   REG[47],0     (0145) 	mov	reg[2fh], 00h		;UART_RX_CONTROL_REG(DCB03CR0)
030D: 62 2D 00 MOV   REG[45],0     (0146) 	mov	reg[2dh], 00h		;UART_(DCB03DR1)
0310: 62 2E 00 MOV   REG[46],0     (0147) 	mov	reg[2eh], 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                   (0148) ;       Instance name UART, Block Name TX(DCB02)
0313: 62 2B 00 MOV   REG[43],0     (0149) 	mov	reg[2bh], 00h		;UART_TX_CONTROL_REG(DCB02CR0)
0316: 62 29 00 MOV   REG[41],0     (0150) 	mov	reg[29h], 00h		;UART_TX_BUFFER_REG (DCB02DR1)
0319: 62 2A 00 MOV   REG[42],0     (0151) 	mov	reg[2ah], 00h		;UART_(DCB02DR2)
031C: 71 10    OR    F,16          (0152) 	M8C_SetBank1
                                   (0153) ;  Global Register values
031E: 62 61 00 MOV   REG[97],0     (0154) 	mov	reg[61h], 00h		; AnalogClockSelect1 register (CLK_CR1)
0321: 62 69 00 MOV   REG[105],0    (0155) 	mov	reg[69h], 00h		; AnalogClockSelect2 register (CLK_CR2)
0324: 62 60 00 MOV   REG[96],0     (0156) 	mov	reg[60h], 00h		; AnalogColumnClockSelect register (CLK_CR0)
0327: 62 62 00 MOV   REG[98],0     (0157) 	mov	reg[62h], 00h		; AnalogIOControl_0 register (ABF_CR0)
032A: 62 67 33 MOV   REG[103],51   (0158) 	mov	reg[67h], 33h		; AnalogLUTControl0 register (ALT_CR0)
032D: 62 68 33 MOV   REG[104],51   (0159) 	mov	reg[68h], 33h		; AnalogLUTControl1 register (ALT_CR1)
0330: 62 63 00 MOV   REG[99],0     (0160) 	mov	reg[63h], 00h		; AnalogModulatorControl_0 register (AMD_CR0)
0333: 62 66 00 MOV   REG[102],0    (0161) 	mov	reg[66h], 00h		; AnalogModulatorControl_1 register (AMD_CR1)
0336: 62 D1 00 MOV   REG[209],0    (0162) 	mov	reg[d1h], 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
0339: 62 D3 00 MOV   REG[211],0    (0163) 	mov	reg[d3h], 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
033C: 62 D0 00 MOV   REG[208],0    (0164) 	mov	reg[d0h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
033F: 62 D2 00 MOV   REG[210],0    (0165) 	mov	reg[d2h], 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
0342: 62 E1 00 MOV   REG[225],0    (0166) 	mov	reg[e1h], 00h		; OscillatorControl_1 register (OSC_CR1)
0345: 62 E2 00 MOV   REG[226],0    (0167) 	mov	reg[e2h], 00h		; OscillatorControl_2 register (OSC_CR2)
0348: 62 DF 00 MOV   REG[223],0    (0168) 	mov	reg[dfh], 00h		; OscillatorControl_3 register (OSC_CR3)
034B: 62 DE 00 MOV   REG[222],0    (0169) 	mov	reg[deh], 00h		; OscillatorControl_4 register (OSC_CR4)
034E: 62 DD 00 MOV   REG[221],0    (0170) 	mov	reg[ddh], 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
0351: 62 E7 00 MOV   REG[231],0    (0171) 	mov	reg[e7h], 00h		; Type2Decimator_Control register (DEC_CR2)
                                   (0172) ;  Instance name Timer8, User Module Timer8
                                   (0173) ;       Instance name Timer8, Block Name TIMER8(DBB00)
0354: 62 20 20 MOV   REG[32],32    (0174) 	mov	reg[20h], 20h		;Timer8_FUNC_REG(DBB00FN)
0357: 62 21 05 MOV   REG[33],5     (0175) 	mov	reg[21h], 05h		;Timer8_INPUT_REG(DBB00IN)
035A: 62 22 28 MOV   REG[34],40    (0176) 	mov	reg[22h], 28h		;Timer8_OUTPUT_REG(DBB00OU)
                                   (0177) ;  Instance name UART, User Module UART
                                   (0178) ;       Instance name UART, Block Name RX(DCB03)
035D: 62 2C 05 MOV   REG[44],5     (0179) 	mov	reg[2ch], 05h		;UART_RX_FUNC_REG   (DCB03FN)
0360: 62 2D E9 MOV   REG[45],233   (0180) 	mov	reg[2dh], e9h		;UART_RX_INPUT_REG  (DCB03IN)
0363: 62 2E 00 MOV   REG[46],0     (0181) 	mov	reg[2eh], 00h		;UART_RX_OUTPUT_REG (DCB03OU)
                                   (0182) ;       Instance name UART, Block Name TX(DCB02)
0366: 62 28 0D MOV   REG[40],13    (0183) 	mov	reg[28h], 0dh		;UART_TX_FUNC_REG   (DCB02FN)
0369: 62 29 09 MOV   REG[41],9     (0184) 	mov	reg[29h], 09h		;UART_TX_INPUT_REG  (DCB02IN)
036C: 62 2A 04 MOV   REG[42],4     (0185) 	mov	reg[2ah], 04h		;UART_TX_OUTPUT_REG (DCB02OU)
036F: 70 EF    AND   F,239         (0186) 	M8C_SetBank0
0371: 7F       RET                 (0187) 	ret

FILE: lib\psocconfig.asm
                                   (0001) ; Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0002) ;
                                   (0003) ;==========================================================================
                                   (0004) ;  PSoCConfig.asm
                                   (0005) ;  @PSOC_VERSION
                                   (0006) ;
                                   (0007) ;  Version: 0.85
                                   (0008) ;  Revised: June 22, 2004
                                   (0009) ;  Copyright Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0010) ;
                                   (0011) ;  This file is generated by the Device Editor on Application Generation.
                                   (0012) ;  It contains code which loads the configuration data table generated in
                                   (0013) ;  the file PSoCConfigTBL.asm
                                   (0014) ;
                                   (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                   (0016) ;  Edits to this file will not be preserved.
                                   (0017) ;==========================================================================
                                   (0018) ;
                                   (0019) include "m8c.inc"
                                   (0020) include "memory.inc"
                                   (0021) include "GlobalParams.inc"
                                   (0022) 
                                   (0023) export LoadConfigInit
                                   (0024) export _LoadConfigInit
                                   (0025) export LoadConfig_trabajov1
                                   (0026) export _LoadConfig_trabajov1
                                   (0027) 
                                   (0028) export NO_SHADOW
                                   (0029) export _NO_SHADOW
                                   (0030) 
                                   (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                   (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                   (0033) 
                                   (0034) AREA psoc_config(rom, rel)
                                   (0035) 
                                   (0036) 
                                   (0037) ;---------------------------------------------------------------------------
                                   (0038) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                   (0039) ;                  parameters handled by boot code, like CPU speed). This
                                   (0040) ;                  function can be called from user code, but typically it
                                   (0041) ;                  is only called from boot.
                                   (0042) ;
                                   (0043) ;       INPUTS: None.
                                   (0044) ;      RETURNS: Nothing.
                                   (0045) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                   (0046) ;               In the large memory model currently only the page
                                   (0047) ;               pointer registers listed below are modified.  This does
                                   (0048) ;               not guarantee that in future implementations of this
                                   (0049) ;               function other page pointer registers will not be
                                   (0050) ;               modified.
                                   (0051) ;          
                                   (0052) ;               Page Pointer Registers Modified: 
                                   (0053) ;               CUR_PP
                                   (0054) ;
                                   (0055) _LoadConfigInit:
                                   (0056)  LoadConfigInit:
                                   (0057)     RAM_PROLOGUE RAM_USE_CLASS_4
                                   (0058)     
0372: 7C 03 76 LCALL 0x0376        (0059) 	lcall	LoadConfig_trabajov1
                                   (0060) 
                                   (0061) 
                                   (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0375: 7F       RET                 (0063)     ret
                                   (0064) 
                                   (0065) ;---------------------------------------------------------------------------
                                   (0066) ; Load Configuration trabajov1
                                   (0067) ;
                                   (0068) ;    Load configuration registers for trabajov1.
                                   (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                   (0070) ;
                                   (0071) ;       INPUTS: None.
                                   (0072) ;      RETURNS: Nothing.
                                   (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                   (0074) ;               modified as may the Page Pointer registers!
                                   (0075) ;               In the large memory model currently only the page
                                   (0076) ;               pointer registers listed below are modified.  This does
                                   (0077) ;               not guarantee that in future implementations of this
                                   (0078) ;               function other page pointer registers will not be
                                   (0079) ;               modified.
                                   (0080) ;          
                                   (0081) ;               Page Pointer Registers Modified: 
                                   (0082) ;               CUR_PP
                                   (0083) ;
                                   (0084) _LoadConfig_trabajov1:
                                   (0085)  LoadConfig_trabajov1:
                                   (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
0376: 7C 01 A2 LCALL 0x01A2        (0087)     lcall   LoadConfigTBL_trabajov1            ; Call load config table routine
                                   (0088) 
                                   (0089) 
0379: 70 EF    AND   F,239         (0090)     M8C_SetBank0                    ; Force return to bank 0
                                   (0091)     RAM_EPILOGUE RAM_USE_CLASS_4
037B: 7F       RET                 (0092)     ret

FILE: lib\uartint.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME:   UARTINT.asm
                                   (0004) ;;  Version: 5.2, Updated on 2006/06/07 at 12:20:11
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                   (0008) ;;-----------------------------------------------------------------------------
                                   (0009) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0010) ;;*****************************************************************************
                                   (0011) ;;*****************************************************************************
                                   (0012) 
                                   (0013) 
                                   (0014) include "UART.inc"
                                   (0015) include "memory.inc"
                                   (0016) include "m8c.inc"
                                   (0017) 
                                   (0018) ;-----------------------------------------------
                                   (0019) ;  Global Symbols
                                   (0020) ;-----------------------------------------------
                                   (0021) export  _UART_TX_ISR
                                   (0022) export  _UART_RX_ISR
                                   (0023) 
                                   (0024) IF (UART_RXBUF_ENABLE)
                                   (0025) export  UART_aRxBuffer
                                   (0026) export _UART_aRxBuffer
                                   (0027) export  UART_bRxCnt
                                   (0028) export _UART_bRxCnt
                                   (0029) export  UART_fStatus
                                   (0030) export _UART_fStatus
                                   (0031) ENDIF
                                   (0032) 
                                   (0033) 
                                   (0034) ;-----------------------------------------------
                                   (0035) ; Variable Allocation
                                   (0036) ;-----------------------------------------------
                                   (0037) AREA InterruptRAM (RAM, REL, CON)
                                   (0038) 
                                   (0039) IF (UART_RXBUF_ENABLE)
                                   (0040)  UART_fStatus:
                                   (0041) _UART_fStatus:      BLK  1
                                   (0042)  UART_bRxCnt:
                                   (0043) _UART_bRxCnt:       BLK  1
                                   (0044) AREA UART_RAM (RAM, REL, CON)
                                   (0045)  UART_aRxBuffer:
                                   (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                   (0047) ENDIF
                                   (0048) 
                                   (0049) AREA InterruptRAM (RAM, REL, CON)
                                   (0050) 
                                   (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                   (0052) ;---------------------------------------------------
                                   (0053) ; Insert your custom declarations below this banner
                                   (0054) ;---------------------------------------------------
                                   (0055) 
                                   (0056) ;------------------------
                                   (0057) ;  Includes
                                   (0058) ;------------------------
                                   (0059) 
                                   (0060) 
                                   (0061) ;------------------------
                                   (0062) ;  Constant Definitions
                                   (0063) ;------------------------
                                   (0064) 
                                   (0065) 
                                   (0066) ;------------------------
                                   (0067) ; Variable Allocation
                                   (0068) ;------------------------
                                   (0069) 
                                   (0070) 
                                   (0071) ;---------------------------------------------------
                                   (0072) ; Insert your custom declarations above this banner
                                   (0073) ;---------------------------------------------------
                                   (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0075) 
                                   (0076) 
                                   (0077) AREA UserModules (ROM, REL, CON)
                                   (0078) 
                                   (0079) ;-----------------------------------------------------------------------------
                                   (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                   (0081) ;
                                   (0082) ;  DESCRIPTION:
                                   (0083) ;     UART TX interrupt handler for instance UART.
                                   (0084) ;
                                   (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                   (0086) ;     handler for this function, then place code where specified.
                                   (0087) ;-----------------------------------------------------------------------------
                                   (0088) 
                                   (0089) _UART_TX_ISR:
                                   (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                   (0091)    ;---------------------------------------------------
                                   (0092)    ; Insert your custom code below this banner
                                   (0093)    ;---------------------------------------------------
                                   (0094)    ;   NOTE: interrupt service routines must preserve
                                   (0095)    ;   the values of the A and X CPU registers.
                                   (0096)    
                                   (0097)    ;---------------------------------------------------
                                   (0098)    ; Insert your custom code above this banner
                                   (0099)    ;---------------------------------------------------
                                   (0100)    ;@PSoC_UserCode_END@ (Do not change this line.)
037C: 7E       RETI                (0101)    reti
                                   (0102) 
                                   (0103) 
                                   (0104) ;-----------------------------------------------------------------------------
                                   (0105) ;  FUNCTION NAME: _UART_RX_ISR
                                   (0106) ;
                                   (0107) ;  DESCRIPTION:
                                   (0108) ;     UART RX interrupt handler for instance UART.
                                   (0109) ;     This ISR handles the background processing of received characters if
                                   (0110) ;     the buffer is enabled.
                                   (0111) ;
                                   (0112) ;
                                   (0113) ;  The following assumes that the RX buffer feature has been enabled.
                                   (0114) ;
                                   (0115) ;  SIDE EFFECTS:
                                   (0116) ;     There are 3 posible errors that may occur with the serial port.
                                   (0117) ;      1) Parity Error
                                   (0118) ;      2) Framing Error
                                   (0119) ;      3) OverRun Error
                                   (0120) ;
                                   (0121) ;  This user module check for parity and framing error.  If either of these
                                   (0122) ;  two errors are detected, the data is read and ignored.  When an overRun
                                   (0123) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                   (0124) ;  this reason this error is ignored at this time.  Code could be added to
                                   (0125) ;  this ISR to set a flag if an error condition occurs.
                                   (0126) ;
                                   (0127) ;  THEORY of OPERATION:
                                   (0128) ;     When using the RX buffer feature, the ISR collects received characters
                                   (0129) ;     in a buffer until the user defined command terminator is detected.  After
                                   (0130) ;     the command terminator is detected, the command bit is set and all other
                                   (0131) ;     characters will be ignored until the command bit is reset.  Up to
                                   (0132) ;     buffer_size - 1 characters will be collected waiting for a command
                                   (0133) ;     terminator.  After that, the characters will be discarded, although
                                   (0134) ;     a command determinator will still cause the command bit to be set.
                                   (0135) ;
                                   (0136) ;-----------------------------------------------------------------------------
                                   (0137) _UART_RX_ISR:
                                   (0138) 
                                   (0139)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                   (0140)    ;---------------------------------------------------
                                   (0141)    ; Insert your custom code below this banner
                                   (0142)    ;---------------------------------------------------
                                   (0143)    ;   NOTE: interrupt service routines must preserve
                                   (0144)    ;   the values of the A and X CPU registers.
                                   (0145) 
                                   (0146)    ;---------------------------------------------------
                                   (0147)    ; Insert your custom code above this banner
                                   (0148)    ;---------------------------------------------------
                                   (0149)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0150) 
                                   (0151) IF (UART_RXBUF_ENABLE)
037D: 08       PUSH  A             (0152)    push A
037E: 10       PUSH  X             (0153)    push X
037F: 5D D3    MOV   A,REG[211]
                                   (0154)    
                                   (0155)    IF SYSTEM_LARGE_MEMORY_MODEL
0381: 08       PUSH  A             (0156)       REG_PRESERVE IDX_PP
                                   (0157)    ENDIF
                                   (0158)    
0382: 58 01    MOV   X,[1]         (0159)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0384: 5D 2F    MOV   A,REG[47]     (0160)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0386: 08       PUSH  A             (0161)    push A                                                  ; Store copy for later test
                                   (0162)                                                            ; IF real RX interrupt
0387: 21 08    AND   A,8           (0163)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
0389: B0 04    JNZ   0x038E        (0164)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
038B: 18       POP   A             (0165)    pop  A                                                  ; Restore stack
038C: 80 5D    JMP   0x03EA        (0166)    jmp  .RESTORE_IDX_PP
                                   (0167) 
                                   (0168) .UARTRX_ReadRx:
038E: 18       POP   A             (0169)    pop  A                                                  ; Restore status flags
                                   (0170)                                                            ; IF there is no error, get data
                                   (0171)                                                            ; Check for parity or framing error
038F: 21 E0    AND   A,224         (0172)    and  A,UART_RX_ERROR
0391: A0 11    JZ    0x03A3        (0173)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                   (0174) 
0393: 2C 00    OR    [0],A         (0175)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0395: 5D 2E    MOV   A,REG[46]     (0176)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer to clear it.
0397: 21 20    AND   A,32          (0177)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
0399: A0 50    JZ    0x03EA        (0178)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                   (0179) 
                                   (0180)                                                            ; Disable and re-enable RX to reset after
                                   (0181)                                                            ; framing error.
039B: 41 2F FE AND   REG[47],254   (0182)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
039E: 43 2F 01 OR    REG[47],1     (0183)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
03A1: 80 48    JMP   0x03EA        (0184)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                   (0185) 
                                   (0186) 
                                   (0187) .UARTRX_NO_ERROR:
03A3: 5D 2E    MOV   A,REG[46]     (0188)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                   (0189) 
                                   (0190)                                                            ; IF buffer not full
03A5: 47 00 01 TST   [0],1         (0191)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
03A8: B0 41    JNZ   0x03EA        (0192)    jnz  .RESTORE_IDX_PP                                    ; All done
                                   (0193) 
03AA: 39 0D    CMP   A,13          (0194)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
03AC: B0 14    JNZ   0x03C1        (0195)    jnz  .UARTRX_CHK_BACKSPACE
03AE: 2E 00 01 OR    [0],1         (0196)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                   (0197) 
                                   (0198) 
                                   (0199) 
03B1: 62 D3 00 MOV   REG[211],0    (0200)    RAM_SETPAGE_IDX >UART_aRxBuffer
03B4: 70 3F    AND   F,63
03B6: 71 80    OR    F,128         (0201)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03B8: 56 02 00 MOV   [X+2],0       (0202)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
03BB: 70 3F    AND   F,63
03BD: 71 00    OR    F,0           (0203)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03BF: 80 2A    JMP   0x03EA        (0204)    jmp  .RESTORE_IDX_PP
                                   (0205) 
                                   (0206) .UARTRX_CHK_BACKSPACE:                                     ; 
                                   (0207) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                   (0208)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                   (0209)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                   (0210)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                   (0211)    jz   .RESTORE_IDX_PP                                    ; 
                                   (0212)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                   (0213)    jmp  .RESTORE_IDX_PP
                                   (0214) ENDIF                                                      ; 
                                   (0215) 
                                   (0216) .UARTRX_IGNORE:
                                   (0217) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
03C1: 39 20    CMP   A,32          (0218)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
03C3: C0 26    JC    0x03EA        (0219)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                   (0220) ENDIF
                                   (0221) 
                                   (0222) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                   (0223) 	
03C5: 62 D3 00 MOV   REG[211],0    (0224)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
03C8: 3C 01 0F CMP   [1],15        (0225)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
03CB: C0 11    JC    0x03DD        (0226)    jc   .UARTRX_ISR_GETDATA
03CD: 70 3F    AND   F,63
03CF: 71 80    OR    F,128         (0227)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03D1: 56 02 00 MOV   [X+2],0       (0228)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
03D4: 70 3F    AND   F,63
03D6: 71 00    OR    F,0           (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03D8: 2E 00 10 OR    [0],16        (0230)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
03DB: 80 0E    JMP   0x03EA        (0231)    jmp  .RESTORE_IDX_PP
03DD: 70 3F    AND   F,63
                                   (0232) 
                                   (0233) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                   (0234)                                                            ; X is already loaded with pointer
03DF: 71 80    OR    F,128         (0235)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
03E1: 54 02    MOV   [X+2],A       (0236)    mov  [X+UART_aRxBuffer],A                               ; store data in array
03E3: 70 3F    AND   F,63
03E5: 71 00    OR    F,0           (0237)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
03E7: 75       INC   X             (0238)    inc  X                                                  ; Inc the pointer
03E8: 5A 01    MOV   [1],X         (0239)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
03EA: 18       POP   A
                                   (0240)                                                            ; ENDIF max string size
                                   (0241) .RESTORE_IDX_PP:
                                   (0242)    IF SYSTEM_LARGE_MEMORY_MODEL
03EB: 60 D3    MOV   REG[211],A    (0243)       REG_RESTORE IDX_PP
                                   (0244)    ENDIF
                                   (0245) 
                                   (0246) .END_UARTRX_ISR:
03ED: 20       POP   X             (0247)    pop  X
03EE: 18       POP   A             (0248)    pop  A
                                   (0249) 
                                   (0250) ENDIF
                                   (0251) 
                                   (0252) UART_RX_ISR_END:
03EF: 7E       RETI                (0253)    reti

FILE: lib\uart.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  Filename:   UART.asm
                                   (0004) ;;  Version: 5.2, Updated on 2006/06/07 at 12:20:11
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                   (0008) ;;                22/24/25/26/27xxx families.
                                   (0009) ;;
                                   (0010) ;;
                                   (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0013) ;;        This means it is the caller's responsibility to preserve any values
                                   (0014) ;;        in the X and A registers that are still needed after the API functions
                                   (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0019) ;;-----------------------------------------------------------------------------
                                   (0020) ;;  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
                                   (0021) ;;*****************************************************************************
                                   (0022) ;;*****************************************************************************
                                   (0023) 
                                   (0024) 
                                   (0025) include "m8c.inc"
                                   (0026) include "memory.inc"
                                   (0027) include "UART.inc"
                                   (0028) 
                                   (0029) ;-----------------------------------------------
                                   (0030) ;  Global Symbols
                                   (0031) ;-----------------------------------------------
                                   (0032) ;-------------------------------------------------------------------
                                   (0033) ;  Declare the functions global for both assembler and C compiler.
                                   (0034) ;
                                   (0035) ;  Note that there are two names for each API. First name is
                                   (0036) ;  assembler reference. Name with underscore is name refence for
                                   (0037) ;  C compiler.  Calling function in C source code does not require
                                   (0038) ;  the underscore.
                                   (0039) ;-------------------------------------------------------------------
                                   (0040) export  UART_SetTxIntMode
                                   (0041) export _UART_SetTxIntMode
                                   (0042) export  UART_EnableInt
                                   (0043) export _UART_EnableInt
                                   (0044) export  UART_DisableInt
                                   (0045) export _UART_DisableInt
                                   (0046) 
                                   (0047) export  UART_Start
                                   (0048) export _UART_Start
                                   (0049) export  UART_Stop
                                   (0050) export _UART_Stop
                                   (0051) export  UART_SendData
                                   (0052) export _UART_SendData
                                   (0053) export  UART_bReadTxStatus
                                   (0054) export _UART_bReadTxStatus
                                   (0055) export  UART_bReadRxData
                                   (0056) export _UART_bReadRxData
                                   (0057) export  UART_bReadRxStatus
                                   (0058) export _UART_bReadRxStatus
                                   (0059) 
                                   (0060) export  UART_IntCntl
                                   (0061) export _UART_IntCntl
                                   (0062) 
                                   (0063) export  UART_TxIntMode
                                   (0064) export _UART_TxIntMode
                                   (0065) 
                                   (0066) export  UART_PutSHexByte
                                   (0067) export _UART_PutSHexByte
                                   (0068) export  UART_PutSHexInt
                                   (0069) export _UART_PutSHexInt
                                   (0070) 
                                   (0071) export  UART_CPutString
                                   (0072) export _UART_CPutString
                                   (0073) export  UART_PutString
                                   (0074) export _UART_PutString
                                   (0075) export  UART_PutChar
                                   (0076) export _UART_PutChar
                                   (0077) export  UART_Write
                                   (0078) export _UART_Write
                                   (0079) export  UART_CWrite
                                   (0080) export _UART_CWrite
                                   (0081) 
                                   (0082) export  UART_cGetChar
                                   (0083) export _UART_cGetChar
                                   (0084) export  UART_cReadChar
                                   (0085) export _UART_cReadChar
                                   (0086) export  UART_iReadChar
                                   (0087) export _UART_iReadChar
                                   (0088) export  UART_PutCRLF
                                   (0089) export _UART_PutCRLF
                                   (0090) 
                                   (0091) IF (UART_RXBUF_ENABLE)
                                   (0092) export  UART_CmdReset
                                   (0093) export _UART_CmdReset
                                   (0094) export  UART_bCmdCheck
                                   (0095) export _UART_bCmdCheck
                                   (0096) export  UART_bCmdLength
                                   (0097) export _UART_bCmdLength
                                   (0098) export  UART_bErrCheck
                                   (0099) export _UART_bErrCheck
                                   (0100) 
                                   (0101) export  UART_szGetParam
                                   (0102) export _UART_szGetParam
                                   (0103) export  UART_szGetRestOfParams
                                   (0104) export _UART_szGetRestOfParams
                                   (0105) ENDIF
                                   (0106) 
                                   (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0108) ; WARNING WARNING WARNING
                                   (0109) ; The following exports are for backwards compatibility only and should
                                   (0110) ; not be used for new designs. They may be eliminated in a future release.
                                   (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                   (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0113) export  bUART_ReadTxStatus
                                   (0114) export _bUART_ReadTxStatus
                                   (0115) export  bUART_ReadRxData
                                   (0116) export _bUART_ReadRxData
                                   (0117) export  bUART_ReadRxStatus
                                   (0118) export _bUART_ReadRxStatus
                                   (0119) 	
                                   (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0121) ;             END WARNING
                                   (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                   (0123) 
                                   (0124) ;-----------------------------------------------
                                   (0125) ; Variable Allocation
                                   (0126) ;-----------------------------------------------
                                   (0127) IF (UART_RXBUF_ENABLE)
                                   (0128)     
                                   (0129) area UART_RAM (RAM, REL, CON)
                                   (0130)     
                                   (0131)  ptrParam:   BLK  1
                                   (0132) 
                                   (0133) ENDIF
                                   (0134) 
                                   (0135) area text (ROM,REL)
                                   (0136) 
                                   (0137) ;-----------------------------------------------
                                   (0138) ;  EQUATES
                                   (0139) ;-----------------------------------------------
                                   (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                   (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                   (0142) 
                                   (0143) area UserModules (ROM, REL, CON)
                                   (0144) 
                                   (0145) ;=============================================================================
                                   (0146) ;=============================================================================
                                   (0147) ;
                                   (0148) ;     Low-Level Commands
                                   (0149) ;
                                   (0150) ;=============================================================================
                                   (0151) ;=============================================================================
                                   (0152) 
                                   (0153) .SECTION
                                   (0154) ;-----------------------------------------------------------------------------
                                   (0155) ;  FUNCTION NAME: UART_EnableInt
                                   (0156) ;
                                   (0157) ;  DESCRIPTION:
                                   (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                   (0159) ;     bit associated with this User Module. Remember to call the global
                                   (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                   (0161) ;-----------------------------------------------------------------------------
                                   (0162) ;
                                   (0163) ;  ARGUMENTS:
                                   (0164) ;     none.
                                   (0165) ;
                                   (0166) ;  RETURNS:
                                   (0167) ;     none.
                                   (0168) ;
                                   (0169) ;  SIDE EFFECTS:
                                   (0170) ;    The A and X registers may be modified by this or future implementations
                                   (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0174) ;    functions.
                                   (0175) ;
                                   (0176)  UART_EnableInt:
                                   (0177) _UART_EnableInt:
                                   (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
03F0: 43 E1 04 OR    REG[225],4    (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
03F3: 43 E1 08 OR    REG[225],8    (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
03F6: 7F       RET                 (0182)    ret
                                   (0183) .ENDSECTION
                                   (0184) 
                                   (0185)     
                                   (0186) .SECTION
                                   (0187) ;-----------------------------------------------------------------------------
                                   (0188) ;  FUNCTION NAME: UART_DisableInt
                                   (0189) ;
                                   (0190) ;  DESCRIPTION:
                                   (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                   (0192) ;     associated with this User Module.
                                   (0193) ;-----------------------------------------------------------------------------
                                   (0194) ;
                                   (0195) ;  ARGUMENTS:
                                   (0196) ;     none.
                                   (0197) ;
                                   (0198) ;  RETURNS:
                                   (0199) ;     none.
                                   (0200) ;
                                   (0201) ;  SIDE EFFECTS:
                                   (0202) ;    The A and X registers may be modified by this or future implementations
                                   (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0206) ;    functions.
                                   (0207) ;
                                   (0208)  UART_DisableInt:
                                   (0209) _UART_DisableInt:
                                   (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
03F7: 41 E1 FB AND   REG[225],251  (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
03FA: 41 E1 F7 AND   REG[225],247  (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
03FD: 7F       RET                 (0214)    ret
                                   (0215) .ENDSECTION
                                   (0216) 
                                   (0217) 
                                   (0218) .SECTION
                                   (0219) ;-----------------------------------------------------------------------------
                                   (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                   (0221) ;
                                   (0222) ;  DESCRIPTION:
                                   (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                   (0224) ;-----------------------------------------------------------------------------
                                   (0225) ;
                                   (0226) ;  ARGUMENTS:
                                   (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                   (0228) ;        Passed in the A register
                                   (0229) ;
                                   (0230) ;  RETURNS:
                                   (0231) ;     none.
                                   (0232) ;
                                   (0233) ;  SIDE EFFECTS:
                                   (0234) ;    The A and X registers may be modified by this or future implementations
                                   (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0238) ;    functions.
                                   (0239) ;
                                   (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                   (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                   (0242) ;     on TX register empty or TX transmit complete
                                   (0243) ;
                                   (0244)  UART_SetTxIntMode:
                                   (0245) _UART_SetTxIntMode:
                                   (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
03FE: 71 10    OR    F,16          (0247)    M8C_SetBank1
0400: 21 01    AND   A,1           (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0402: A0 07    JZ    0x040A        (0249)    jz    .SetModeRegEmpty
0404: 43 28 10 OR    REG[40],16    (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0407: 70 EF    AND   F,239         (0251)    M8C_SetBank0
                                   (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0409: 7F       RET                 (0253)    ret
                                   (0254) 
                                   (0255) .SetModeRegEmpty:
040A: 41 28 EF AND   REG[40],239   (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
040D: 70 EF    AND   F,239         (0257)    M8C_SetBank0
                                   (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
040F: 7F       RET                 (0259)    ret
                                   (0260) .ENDSECTION
                                   (0261) 
                                   (0262) 
                                   (0263) .SECTION
                                   (0264) ;-----------------------------------------------------------------------------
                                   (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                   (0266) ;
                                   (0267) ;  DESCRIPTION:
                                   (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                   (0269) ;-----------------------------------------------------------------------------
                                   (0270) ;
                                   (0271) ;  ARGUMENTS:
                                   (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                   (0273) ;        Passed in the A register.
                                   (0274) ;
                                   (0275) ;  RETURNS:
                                   (0276) ;     none.
                                   (0277) ;
                                   (0278) ;  SIDE EFFECTS:
                                   (0279) ;    The A and X registers may be modified by this or future implementations
                                   (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0283) ;    functions.
                                   (0284) ;
                                   (0285)  UART_Start:
                                   (0286) _UART_Start:
                                   (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                   (0289) 
0410: 29 01    OR    A,1           (0290)    or    A, bfCONTROL_REG_START_BIT
0412: 60 2B    MOV   REG[43],A     (0291)    mov   REG[UART_TX_CONTROL_REG], A
0414: 60 2F    MOV   REG[47],A     (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                   (0293) IF ( UART_RXBUF_ENABLE )
0416: 91 2A    CALL  0x0542        (0294)    call  _UART_CmdReset
                                   (0295) ENDIF
                                   (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0418: 7F       RET                 (0297)    ret
                                   (0298) .ENDSECTION
                                   (0299) 
                                   (0300) 
                                   (0301) .SECTION
                                   (0302) ;-----------------------------------------------------------------------------
                                   (0303) ;  FUNCTION NAME: UART_Stop
                                   (0304) ;
                                   (0305) ;  DESCRIPTION:
                                   (0306) ;     Disables UART operation.
                                   (0307) ;-----------------------------------------------------------------------------
                                   (0308) ;
                                   (0309) ;  ARGUMENTS:
                                   (0310) ;     none.
                                   (0311) ;
                                   (0312) ;  RETURNS:
                                   (0313) ;     none.
                                   (0314) ;
                                   (0315) ;  SIDE EFFECTS:
                                   (0316) ;    The A and X registers may be modified by this or future implementations
                                   (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0320) ;    functions.
                                   (0321) ;
                                   (0322)  UART_Stop:
                                   (0323) _UART_Stop:
                                   (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0419: 41 2B FE AND   REG[43],254   (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
041C: 41 2F FE AND   REG[47],254   (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                   (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
041F: 7F       RET                 (0328)    ret
                                   (0329) .ENDSECTION
                                   (0330) 
                                   (0331) 
                                   (0332) .SECTION
                                   (0333) ;-----------------------------------------------------------------------------
                                   (0334) ;  FUNCTION NAME: UART_SendData
                                   (0335) ;
                                   (0336) ;  DESCRIPTION:
                                   (0337) ;     Initiates a transmission of data.
                                   (0338) ;-----------------------------------------------------------------------------
                                   (0339) ;
                                   (0340) ;  ARGUMENTS:
                                   (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                   (0342) ;
                                   (0343) ;  RETURNS:
                                   (0344) ;     none.
                                   (0345) ;
                                   (0346) ;  SIDE EFFECTS:
                                   (0347) ;    The A and X registers may be modified by this or future implementations
                                   (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0351) ;    functions.
                                   (0352) ;
                                   (0353)  UART_SendData:
                                   (0354) _UART_SendData:
                                   (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0420: 60 29    MOV   REG[41],A     (0356)    mov REG[UART_TX_BUFFER_REG], A
                                   (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0422: 7F       RET                 (0358)    ret
                                   (0359) .ENDSECTION
                                   (0360) 
                                   (0361) 
                                   (0362) .SECTION
                                   (0363) ;-----------------------------------------------------------------------------
                                   (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                   (0365) ;
                                   (0366) ;  DESCRIPTION:
                                   (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                   (0368) ;-----------------------------------------------------------------------------
                                   (0369) ;
                                   (0370) ;  ARGUMENTS:
                                   (0371) ;     none.
                                   (0372) ;
                                   (0373) ;  RETURNS:
                                   (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                   (0375) ;           status bits (returned in A)
                                   (0376) ;
                                   (0377) ;  SIDE EFFECTS:
                                   (0378) ;    The A and X registers may be modified by this or future implementations
                                   (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0382) ;    functions.
                                   (0383) ;
                                   (0384)  UART_bReadTxStatus:
                                   (0385) _UART_bReadTxStatus:
                                   (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                   (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                   (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0423: 5D 2B    MOV   A,REG[43]     (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                   (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0425: 7F       RET                 (0391)    ret
                                   (0392) .ENDSECTION
                                   (0393) 
                                   (0394) 
                                   (0395) .SECTION
                                   (0396) ;-----------------------------------------------------------------------------
                                   (0397) ;  FUNCTION NAME: UART_bReadRxData
                                   (0398) ;
                                   (0399) ;  DESCRIPTION:
                                   (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                   (0401) ;     sure data is valid.
                                   (0402) ;-----------------------------------------------------------------------------
                                   (0403) ;
                                   (0404) ;  ARGUMENTS:
                                   (0405) ;     none.
                                   (0406) ;
                                   (0407) ;  RETURNS:
                                   (0408) ;     bRxData - returned in A.
                                   (0409) ;
                                   (0410) ;  SIDE EFFECTS:
                                   (0411) ;    The A and X registers may be modified by this or future implementations
                                   (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0415) ;    functions.
                                   (0416) ;
                                   (0417)  UART_bReadRxData:
                                   (0418) _UART_bReadRxData:
                                   (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                   (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                   (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0426: 5D 2E    MOV   A,REG[46]     (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                   (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0428: 7F       RET                 (0424)    ret
                                   (0425) .ENDSECTION
                                   (0426) 
                                   (0427) 
                                   (0428) .SECTION
                                   (0429) ;-----------------------------------------------------------------------------
                                   (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                   (0431) ;
                                   (0432) ;  DESCRIPTION:
                                   (0433) ;     Reads the RX Status bits in the Control/Status register.
                                   (0434) ;-----------------------------------------------------------------------------
                                   (0435) ;
                                   (0436) ;  ARGUMENTS:
                                   (0437) ;     none.
                                   (0438) ;
                                   (0439) ;  RETURNS:
                                   (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                   (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                   (0442) ;           returned in A.
                                   (0443) ;
                                   (0444) ;  SIDE EFFECTS:
                                   (0445) ;    The A and X registers may be modified by this or future implementations
                                   (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0449) ;    functions.
                                   (0450) ;
                                   (0451)  UART_bReadRxStatus:
                                   (0452) _UART_bReadRxStatus:
                                   (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                   (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                   (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0429: 5D 2F    MOV   A,REG[47]     (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                   (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
042B: 7F       RET                 (0458)    ret
                                   (0459) .ENDSECTION
                                   (0460) 
                                   (0461) 
                                   (0462) .SECTION
                                   (0463) ;-----------------------------------------------------------------------------
                                   (0464) ;  FUNCTION NAME: UART_TxIntMode
                                   (0465) ;
                                   (0466) ;  DESCRIPTION:
                                   (0467) ;     This function is used to change the TX Interrupt mode.
                                   (0468) ;-----------------------------------------------------------------------------
                                   (0469) ;
                                   (0470) ;  ARGUMENTS:
                                   (0471) ;     A => Tx Interrupt mode
                                   (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                   (0473) ;             1 => Interrupt on TX Complete
                                   (0474) ;
                                   (0475) ;  RETURNS:
                                   (0476) ;     none.
                                   (0477) ;
                                   (0478) ;  SIDE EFFECTS:
                                   (0479) ;    The A and X registers may be modified by this or future implementations
                                   (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0483) ;    functions.
                                   (0484) ;
                                   (0485)  UART_TxIntMode:
                                   (0486) _UART_TxIntMode:
                                   (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0488) 
042C: 21 01    AND   A,1           (0489)    and  A,UART_INT_MODE_TX_COMPLETE
042E: 71 10    OR    F,16          (0490)    M8C_SetBank1
0430: 39 01    CMP   A,1           (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
0432: A0 06    JZ    0x0439        (0492)    jz   .SetTxCmpMode
                                   (0493) 
0434: 41 28 EF AND   REG[40],239   (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0437: 80 04    JMP   0x043C        (0495)    jmp  .TxIntMode_End
                                   (0496) 
                                   (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0439: 43 28 10 OR    REG[40],16    (0498)    or   reg[UART_TX_FUNC_REG],0x10
                                   (0499) 
                                   (0500) .TxIntMode_End:
043C: 70 EF    AND   F,239         (0501)    M8C_SetBank0
                                   (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
043E: 7F       RET                 (0503)    ret
                                   (0504) .ENDSECTION
                                   (0505) 
                                   (0506)     
                                   (0507) .SECTION
                                   (0508) ;-----------------------------------------------------------------------------
                                   (0509) ;  FUNCTION NAME: UART_IntCntl
                                   (0510) ;
                                   (0511) ;  DESCRIPTION:
                                   (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                   (0513) ;-----------------------------------------------------------------------------
                                   (0514) ;
                                   (0515) ;  ARGUMENTS:
                                   (0516) ;     A => Interrupt mask
                                   (0517) ;
                                   (0518) ;  RETURNS:
                                   (0519) ;     none.
                                   (0520) ;
                                   (0521) ;  SIDE EFFECTS:
                                   (0522) ;    The A and X registers may be modified by this or future implementations
                                   (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0526) ;    functions.
                                   (0527) ;
                                   (0528) ;  THEORY of OPERATION or PROCEDURE:
                                   (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                   (0530) ;     and RX block.
                                   (0531) ;
                                   (0532)  UART_IntCntl:
                                   (0533) _UART_IntCntl:
                                   (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                   (0535) 
043F: 08       PUSH  A             (0536)    push A
0440: 21 01    AND   A,1           (0537)    and  A,UART_ENABLE_RX_INT
0442: A0 06    JZ    0x0449        (0538)    jz   .DisRxInt
                                   (0539)      ; Enable Rx Interrupt
0444: 43 E1 08 OR    REG[225],8    (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0447: 80 04    JMP   0x044C        (0541)    jmp  .CheckTxInt
                                   (0542) .DisRxInt:
                                   (0543)      ; Disable Rx Interrupt
0449: 41 E1 F7 AND   REG[225],247  (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                   (0545) 
                                   (0546) .CheckTxInt:
044C: 18       POP   A             (0547)    pop  A
044D: 21 02    AND   A,2           (0548)    and  A,UART_ENABLE_TX_INT
044F: A0 06    JZ    0x0456        (0549)    jz   .DisTxInt
                                   (0550)      ; Enable Tx Interrupt
0451: 43 E1 04 OR    REG[225],4    (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0454: 80 04    JMP   0x0459        (0552)    jmp  .End_IntCntl
                                   (0553) .DisTxInt:
                                   (0554)      ; Disable Tx Interrupt
0456: 41 E1 FB AND   REG[225],251  (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                   (0556) 
                                   (0557) .End_IntCntl:
                                   (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0459: 7F       RET                 (0559)    ret
045A: 30       HALT  
045B: 31 32    XOR   A,50
045D: 33 34    XOR   A,[X+52]
045F: 35 36    XOR   [X+54],A
0461: 37 38 39 XOR   [X+56],57
0464: 41 42 43 AND   REG[66],67
0467: 44 45 46 OR    REG[X+69],70
                                   (0560) .ENDSECTION
                                   (0561) 
                                   (0562) 
                                   (0563) ;=============================================================================
                                   (0564) ;=============================================================================
                                   (0565) ;
                                   (0566) ;     High-Level Commands
                                   (0567) ;
                                   (0568) ;=============================================================================
                                   (0569) ;=============================================================================
                                   (0570) 
                                   (0571) 
                                   (0572) ;-----------------------------------------------------------------------------
                                   (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                   (0574) ;
                                   (0575) ;  DESCRIPTION:
                                   (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                   (0577) ;-----------------------------------------------------------------------------
                                   (0578) ;
                                   (0579) ;  ARGUMENTS:
                                   (0580) ;     A  => (BYTE) Data/char to be printed
                                   (0581) ;
                                   (0582) ;  RETURNS:
                                   (0583) ;     none.
                                   (0584) ;
                                   (0585) ;  SIDE EFFECTS:
                                   (0586) ;    The A and X registers may be modified by this or future implementations
                                   (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0590) ;    functions.
                                   (0591) ;
                                   (0592) .LITERAL
                                   (0593) UART_HEX_STR:
                                   (0594)      DS    "0123456789ABCDEF"
                                   (0595) .ENDLITERAL
                                   (0596) 
                                   (0597) .SECTION
                                   (0598)  UART_PutSHexByte:
                                   (0599) _UART_PutSHexByte:
                                   (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
046A: 08       PUSH  A             (0601)    push  A                             ; Save lower nibble
046B: 67       ASR   A             (0602)    asr   A                             ; Shift high nibble to right
046C: 67       ASR   A             (0603)    asr   A
046D: 67       ASR   A             (0604)    asr   A
046E: 67       ASR   A             (0605)    asr   A
046F: 21 0F    AND   A,15          (0606)    and   A,0Fh                         ; Mask off nibble
0471: FF E7    INDEX 0x045A        (0607)    index UART_HEX_STR                  ; Get Hex value
0473: 90 0F    CALL  0x0484        (0608)    call  UART_PutChar                  ; Write data to screen
0475: 18       POP   A             (0609)    pop   A                             ; Restore value
0476: 21 0F    AND   A,15          (0610)    and   A,0Fh                         ; Mask off lower nibble
0478: FF E0    INDEX 0x045A        (0611)    index UART_HEX_STR                  ; Get Hex value
047A: 90 08    CALL  0x0484        (0612)    call  UART_PutChar                  ; Write data to screen
                                   (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
047C: 7F       RET                 (0614)    ret
                                   (0615) .ENDSECTION
                                   (0616) 
                                   (0617) 
                                   (0618) .SECTION
                                   (0619) ;-----------------------------------------------------------------------------
                                   (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                   (0621) ;
                                   (0622) ;  DESCRIPTION:
                                   (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                   (0624) ;-----------------------------------------------------------------------------
                                   (0625) ;
                                   (0626) ;  ARGUMENTS:
                                   (0627) ;     Pointer to string
                                   (0628) ;     A  => ASB of Int
                                   (0629) ;     X  => MSB of Int
                                   (0630) ;
                                   (0631) ;  RETURNS:
                                   (0632) ;     none.
                                   (0633) ;
                                   (0634) ;  SIDE EFFECTS:
                                   (0635) ;    The A and X registers may be modified by this or future implementations
                                   (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0639) ;    functions.
                                   (0640) ;
                                   (0641) 
                                   (0642)  UART_PutSHexInt:
                                   (0643) _UART_PutSHexInt:
                                   (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
047D: 4B       SWAP  A,X           (0645)    swap  A,X
047E: 9F EA    CALL  0x046A        (0646)    call  UART_PutSHexByte              ; Print MSB
0480: 5B       MOV   A,X           (0647)    mov   A,X                           ; Move LSB into position
0481: 9F E7    CALL  0x046A        (0648)    call  UART_PutSHexByte              ; Print LSB
                                   (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0483: 7F       RET                 (0650)    ret
0484: 49 2B 10 TST   REG[43],16
                                   (0651) .ENDSECTION
                                   (0652) 
                                   (0653) 
                                   (0654) .SECTION
                                   (0655) ;-----------------------------------------------------------------------------
                                   (0656) ;  FUNCTION NAME: UART_PutChar
                                   (0657) ;
                                   (0658) ;  DESCRIPTION:
                                   (0659) ;     Send character out through UART TX port.
                                   (0660) ;-----------------------------------------------------------------------------
                                   (0661) ;
                                   (0662) ;  ARGUMENTS:
                                   (0663) ;     A has Character to send to UART Tx Port
                                   (0664) ;
                                   (0665) ;  RETURNS:
                                   (0666) ;     none
                                   (0667) ;
                                   (0668) ;  SIDE EFFECTS:
                                   (0669) ;    The A and X registers may be modified by this or future implementations
                                   (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0673) ;    functions.
                                   (0674) ;
                                   (0675) 
                                   (0676)    macro InLinePutChar( Source )
                                   (0677) .BufEmptyWaitLoop:
                                   (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                   (0679)    jz  .BufEmptyWaitLoop
                                   (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                   (0681)    endm
                                   (0682) 
                                   (0683)  UART_PutChar:
                                   (0684) _UART_PutChar:
                                   (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
0487: AF FC    JZ    0x0484        (0686)    InLinePutChar A
0489: 60 29    MOV   REG[41],A
                                   (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
048B: 7F       RET                 (0688)    ret
                                   (0689) .ENDSECTION
                                   (0690) 
                                   (0691) 
                                   (0692) .SECTION
                                   (0693) ;-----------------------------------------------------------------------------
                                   (0694) ;  FUNCTION NAME: UART_cGetChar
                                   (0695) ;
                                   (0696) ;  DESCRIPTION:
                                   (0697) ;     Read character from UART RX port.
                                   (0698) ;-----------------------------------------------------------------------------
                                   (0699) ;
                                   (0700) ;  ARGUMENTS:
                                   (0701) ;      none
                                   (0702) ;
                                   (0703) ;  RETURNS:
                                   (0704) ;     char that is returned from UART
                                   (0705) ;
                                   (0706) ;  SIDE EFFECTS:
                                   (0707) ;    The A and X registers may be modified by this or future implementations
                                   (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0711) ;    functions.
                                   (0712) ;
                                   (0713) ;    Program flow will stay in this function until a character is received.
                                   (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                   (0715) ;    the delay between characters is less than the watchdog timeout.
                                   (0716) ;
                                   (0717)  UART_cGetChar:
                                   (0718) _UART_cGetChar:
                                   (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
048C: 49 2F 08 TST   REG[47],8     (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
048F: AF FC    JZ    0x048C        (0721)    jz  UART_cGetChar                             ; If not loop
0491: 5D 2E    MOV   A,REG[46]     (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                   (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0493: 7F       RET                 (0724)    ret
                                   (0725) .ENDSECTION
                                   (0726) 
                                   (0727) 
                                   (0728) .SECTION
                                   (0729) ;-----------------------------------------------------------------------------
                                   (0730) ;  FUNCTION NAME: UART_cReadChar
                                   (0731) ;
                                   (0732) ;  DESCRIPTION:
                                   (0733) ;     Read character from UART RX port.
                                   (0734) ;-----------------------------------------------------------------------------
                                   (0735) ;
                                   (0736) ;  ARGUMENTS:
                                   (0737) ;      none
                                   (0738) ;
                                   (0739) ;  RETURNS:
                                   (0740) ;     char that is returned from UART
                                   (0741) ;
                                   (0742) ;  SIDE EFFECTS:
                                   (0743) ;    The A and X registers may be modified by this or future implementations
                                   (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0747) ;    functions.
                                   (0748) ;
                                   (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                   (0750) ;    implies a valid character or an error condition occured.
                                   (0751) ;
                                   (0752)  UART_cReadChar:
                                   (0753) _UART_cReadChar:
                                   (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0494: 5D 2F    MOV   A,REG[47]     (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0496: 08       PUSH  A             (0756)    push A
0497: 21 08    AND   A,8           (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0499: B0 04    JNZ   0x049E        (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
049B: 18       POP   A             (0759)    pop  A
049C: 80 0B    JMP   0x04A8        (0760)    jmp  .RX_NO_VALID_CHAR
                                   (0761) 
                                   (0762) .RX_DATA_RDY:
049E: 5D 2E    MOV   A,REG[46]     (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
04A0: 4B       SWAP  A,X           (0764)    swap A,X                                                ; determine if data is valid
                                   (0765) 
04A1: 18       POP   A             (0766)    pop  A                                                  ; Check for errors
04A2: 21 A0    AND   A,160         (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
04A4: B0 03    JNZ   0x04A8        (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
04A6: 4B       SWAP  A,X           (0769)    swap A,X                                                ; Put data in A and exit
                                   (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
04A7: 7F       RET                 (0771)    ret
                                   (0772) 
                                   (0773) .RX_NO_VALID_CHAR:
04A8: 50 00    MOV   A,0           (0774)    mov A,0x00                                              ; Zero out character
                                   (0775) 
                                   (0776)  End_UART_cReadChar:
                                   (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
04AA: 7F       RET                 (0778)    ret
                                   (0779) .ENDSECTION
                                   (0780) 
                                   (0781) 
                                   (0782) .SECTION
                                   (0783) ;-----------------------------------------------------------------------------
                                   (0784) ;  FUNCTION NAME: UART_iReadChar
                                   (0785) ;
                                   (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                   (0787) ;  to just set a value in the upper byte if error conditions exists.
                                   (0788) ;
                                   (0789) ;  DESCRIPTION:
                                   (0790) ;     Read character from UART RX port.
                                   (0791) ;-----------------------------------------------------------------------------
                                   (0792) ;
                                   (0793) ;  ARGUMENTS:
                                   (0794) ;      none
                                   (0795) ;
                                   (0796) ;  RETURNS:
                                   (0797) ;     An integer value is returned.  A negative value inplies and error
                                   (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                   (0799) ;
                                   (0800) ;     Error Codes:
                                   (0801) ;        0x80CC    Parity Error
                                   (0802) ;        0x40CC    Overrun Error
                                   (0803) ;        0x20CC    Framing Error
                                   (0804) ;        0x01CC    No Data available
                                   (0805) ;
                                   (0806) ;  SIDE EFFECTS:
                                   (0807) ;    The A and X registers may be modified by this or future implementations
                                   (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0811) ;    functions.
                                   (0812) ;
                                   (0813)  UART_iReadChar:
                                   (0814) _UART_iReadChar:
                                   (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
04AB: 5D 2F    MOV   A,REG[47]     (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                   (0817)                                                            ; Mask only errors and data ready
04AD: 21 E8    AND   A,232         (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
04AF: 08       PUSH  A             (0819)    push A
04B0: 21 08    AND   A,8           (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
04B2: B0 07    JNZ   0x04BA        (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
04B4: 18       POP   A             (0822)    pop  A
04B5: 29 01    OR    A,1           (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
04B7: 4B       SWAP  A,X           (0824)    swap A,X
04B8: 80 07    JMP   0x04C0        (0825)    jmp  End_UART_iReadChar
                                   (0826) 
                                   (0827) .RX_GET_DATA:
04BA: 18       POP   A             (0828)    pop  A
04BB: 21 E0    AND   A,224         (0829)    and  A,UART_RX_ERROR
04BD: 4B       SWAP  A,X           (0830)    swap A,X
04BE: 5D 2E    MOV   A,REG[46]     (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                   (0832)                                                            ; determine if data is valid
                                   (0833) 
                                   (0834)  End_UART_iReadChar:
                                   (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
04C0: 7F       RET                 (0836)    ret
                                   (0837) .ENDSECTION
                                   (0838) 
                                   (0839) 
                                   (0840) .SECTION
                                   (0841) ;-----------------------------------------------------------------------------
                                   (0842) ;  FUNCTION NAME: UART_PutString
                                   (0843) ;
                                   (0844) ;  DESCRIPTION:
                                   (0845) ;     Send String out through UART TX port.
                                   (0846) ;-----------------------------------------------------------------------------
                                   (0847) ;
                                   (0848) ;  ARGUMENTS:
                                   (0849) ;     Pointer to String
                                   (0850) ;     A has MSB of string address
                                   (0851) ;     X has LSB of string address
                                   (0852) ;
                                   (0853) ;  RETURNS:
                                   (0854) ;     none
                                   (0855) ;
                                   (0856) ;  SIDE EFFECTS:
                                   (0857) ;    The A and X registers may be modified by this or future implementations
                                   (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0861) ;    functions.
                                   (0862) ;          
                                   (0863) ;    Currently only the page pointer registers listed below are modified: 
                                   (0864) ;          IDX_PP
                                   (0865) ;
                                   (0866)  UART_PutString:
                                   (0867) _UART_PutString:
04C1: 70 BF    AND   F,191         (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
04C3: 60 D3    MOV   REG[211],A    (0869)    RAM_SETPAGE_IDX A
                                   (0870) .PutStringLoop:
04C5: 52 00    MOV   A,[X+0]       (0871)    mov   A,[X]                                   ; Get value pointed to by X
04C7: A0 06    JZ    0x04CE        (0872)    jz    End_PutString                           ; Check for end of string
04C9: 9F B9    CALL  0x0484        (0873)    call  UART_PutChar                            ; Send character to Tx port
04CB: 75       INC   X             (0874)    inc   X                                       ; Advance pointer to next character
04CC: 8F F8    JMP   0x04C5        (0875)    jmp   .PutStringLoop                          ; Get next character
04CE: 70 3F    AND   F,63
                                   (0876) 
                                   (0877) End_PutString:
04D0: 71 C0    OR    F,192         (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
04D2: 7F       RET                 (0879)    ret
                                   (0880) .ENDSECTION
                                   (0881)     
                                   (0882) .SECTION
                                   (0883) ;-----------------------------------------------------------------------------
                                   (0884) ;  FUNCTION NAME: UART_Write
                                   (0885) ;
                                   (0886) ;  DESCRIPTION:
                                   (0887) ;     Send String of length X to serial port
                                   (0888) ;-----------------------------------------------------------------------------
                                   (0889) ;
                                   (0890) ;  ARGUMENTS:
                                   (0891) ;     Pointer to String
                                   (0892) ;     [SP-5] Count of characters to send
                                   (0893) ;     [SP-4] has MSB of string address
                                   (0894) ;     [SP-3] has LSB of string address
                                   (0895) ;
                                   (0896) ;  RETURNS:
                                   (0897) ;     none
                                   (0898) ;
                                   (0899) ;  SIDE EFFECTS:
                                   (0900) ;    The A and X registers may be modified by this or future implementations
                                   (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0904) ;    functions.
                                   (0905) ;          
                                   (0906) ;    Currently only the page pointer registers listed below are modified: 
                                   (0907) ;          IDX_PP
                                   (0908) ;
                                   (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                   (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                   (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                   (0912) 
                                   (0913)  UART_Write:
                                   (0914) _UART_Write:
04D3: 70 BF    AND   F,191         (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
04D5: 62 D3 07 MOV   REG[211],7    (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
04D8: 4F       MOV   X,SP          (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                   (0918) 
                                   (0919) .NextByteLoop:
04D9: 52 FB    MOV   A,[X-5]       (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
04DB: A0 1A    JZ    0x04F6        (0921)    jz    .End_Write                              ;   Yes, prepare to exit
04DD: 7B FB    DEC   [X-5]         (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                   (0923) 
                                   (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
04DF: 52 FC    MOV   A,[X-4]       (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                   (0926)    ENDIF
                                   (0927) 
04E1: 59 FD    MOV   X,[X-3]       (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
04E3: 60 D3    MOV   REG[211],A    (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
04E5: 52 00    MOV   A,[X+0]       (0930)    mov   A, [X]                                  ; Grab the data
04E7: 49 2B 10 TST   REG[43],16
04EA: AF FC    JZ    0x04E7        (0931)    InlinePutChar A                               ; Put data in empty TX buf reg
04EC: 60 29    MOV   REG[41],A
04EE: 4F       MOV   X,SP          (0932)    mov   X, SP                                   ; Recover frame pointer
04EF: 62 D3 07 MOV   REG[211],7    (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
04F2: 77 FD    INC   [X-3]         (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
04F4: 8F E4    JMP   0x04D9        (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
04F6: 70 3F    AND   F,63
                                   (0936) 
                                   (0937) .End_Write:
04F8: 71 C0    OR    F,192         (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
04FA: 7F       RET                 (0939)    ret
                                   (0940) .ENDSECTION
                                   (0941)     
                                   (0942) 
                                   (0943) .SECTION
                                   (0944) ;-----------------------------------------------------------------------------
                                   (0945) ;  FUNCTION NAME: UART_CWrite
                                   (0946) ;
                                   (0947) ;             WARNING WARNING NOT COMPLETE
                                   (0948) ;
                                   (0949) ;  DESCRIPTION:
                                   (0950) ;     Send String of length X to serial port
                                   (0951) ;-----------------------------------------------------------------------------
                                   (0952) ;
                                   (0953) ;  ARGUMENTS:
                                   (0954) ;     [SP-4] MSB of Count of character to send
                                   (0955) ;     [SP-3] LSB of Count of character to send
                                   (0956) ;     [SP-2] has MSB of string address
                                   (0957) ;     [SP-1] has LSB of string address
                                   (0958) ;
                                   (0959) ;  RETURNS:
                                   (0960) ;     none
                                   (0961) ;
                                   (0962) ;  SIDE EFFECTS:
                                   (0963) ;    The A and X registers may be modified by this or future implementations
                                   (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0967) ;    functions.
                                   (0968) ;
                                   (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                   (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                   (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                   (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                   (0973) 
                                   (0974)  UART_CWrite:
                                   (0975) _UART_CWrite:
                                   (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
04FB: 4F       MOV   X,SP          (0977)    mov   X,SP
                                   (0978) .CW_Loop:
04FC: 3D FA 00 CMP   [X-6],0       (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
04FF: B0 06    JNZ   0x0506        (0980)    jnz   .CW_WRITEIT
0501: 3D FB 00 CMP   [X-5],0       (0981)    cmp   [X+CLEN_LSB],0x00
0504: A0 1D    JZ    0x0522        (0982)    jz    .End_CWrite                        ; Leave if done
                                   (0983) 
                                   (0984) .CW_WRITEIT:                                
0506: 10       PUSH  X             (0985)    push  X                                  ; Save frame pointer
0507: 52 FC    MOV   A,[X-4]       (0986)    mov   A,[X+CSTR_MSB]
0509: 59 FD    MOV   X,[X-3]       (0987)    mov   X,[X+CSTR_LSB]
050B: 28       ROMX                (0988)    romx                                     ; Get character from ROM
050C: 49 2B 10 TST   REG[43],16
050F: AF FC    JZ    0x050C        (0989)    InlinePutChar A                          ; Put data in empty TX buf reg
0511: 60 29    MOV   REG[41],A
0513: 20       POP   X             (0990)    pop   X                                  ; Restore frame pointer
0514: 07 FD 01 ADD   [X-3],1       (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0517: 0F FC 00 ADC   [X-4],0       (0992)    adc   [X+CSTR_MSB],0
051A: 17 FB 01 SUB   [X-5],1       (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
051D: 1F FA 00 SBB   [X-6],0       (0994)    sbb   [X+CLEN_MSB],0x00
0520: 8F DB    JMP   0x04FC        (0995)    jmp   .CW_Loop
0522: 70 3F    AND   F,63
                                   (0996) 
                                   (0997) .End_CWrite:
0524: 71 C0    OR    F,192         (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0526: 7F       RET                 (0999)    ret
                                   (1000) .ENDSECTION
                                   (1001) 
                                   (1002) 
                                   (1003) .SECTION
                                   (1004) ;-----------------------------------------------------------------------------
                                   (1005) ;  FUNCTION NAME: UART_CPutString
                                   (1006) ;
                                   (1007) ;  DESCRIPTION:
                                   (1008) ;     Send String out through UART TX port.
                                   (1009) ;-----------------------------------------------------------------------------
                                   (1010) ;
                                   (1011) ;  ARGUMENTS:
                                   (1012) ;     Pointer to String
                                   (1013) ;     A has MSB of string address
                                   (1014) ;     X has LSB of string address
                                   (1015) ;
                                   (1016) ;  RETURNS:
                                   (1017) ;     none
                                   (1018) ;
                                   (1019) ;  SIDE EFFECTS:
                                   (1020) ;    The A and X registers may be modified by this or future implementations
                                   (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1024) ;    functions.
                                   (1025) ;
                                   (1026)  UART_CPutString:
                                   (1027) _UART_CPutString:
                                   (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0527: 08       PUSH  A             (1029)    push  A                                       ; Store ROM pointer
0528: 10       PUSH  X             (1030)    push  X
0529: 28       ROMX                (1031)    romx                                          ; Get character from ROM
052A: A0 0B    JZ    0x0536        (1032)    jz    .End_CPutString
052C: 9F 56    CALL  0x0484        (1033)    call  UART_PutChar                            ; Print character
052E: 20       POP   X             (1034)    pop   X
052F: 18       POP   A             (1035)    pop   A
0530: 75       INC   X             (1036)    inc   X                                       ; Inc LSB of pointer
0531: DF F5    JNC   0x0527        (1037)    jnc   UART_CPutString                         ; Check for carry
0533: 74       INC   A             (1038)    inc   A                                       ; Inc MSB of pointer
0534: 8F F2    JMP   0x0527        (1039)    jmp   UART_CPutString
                                   (1040) 
                                   (1041) 
                                   (1042) .End_CPutString:
0536: 38 FE    ADD   SP,254        (1043)    add   SP, -2
                                   (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0538: 7F       RET                 (1045)    ret
                                   (1046) .ENDSECTION
                                   (1047) 
                                   (1048) 
                                   (1049) .SECTION
                                   (1050) ;-----------------------------------------------------------------------------
                                   (1051) ;  FUNCTION NAME: UART_PutCRLF
                                   (1052) ;
                                   (1053) ;  DESCRIPTION:
                                   (1054) ;     Send a CR and LF
                                   (1055) ;-----------------------------------------------------------------------------
                                   (1056) ;
                                   (1057) ;  ARGUMENTS:
                                   (1058) ;     none.
                                   (1059) ;
                                   (1060) ;  RETURNS:
                                   (1061) ;     none.
                                   (1062) ;
                                   (1063) ;  SIDE EFFECTS:
                                   (1064) ;    The A and X registers may be modified by this or future implementations
                                   (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1068) ;    functions.
                                   (1069) ;
                                   (1070)  UART_PutCRLF:
                                   (1071) _UART_PutCRLF:
                                   (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0539: 50 0D    MOV   A,13          (1073)    mov  A,0x0D                        ; Send CR
053B: 9F 47    CALL  0x0484        (1074)    call UART_PutChar
053D: 50 0A    MOV   A,10          (1075)    mov  A,0x0A                        ; Send LF
053F: 9F 43    CALL  0x0484        (1076)    call UART_PutChar
                                   (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
0541: 7F       RET                 (1078)    ret
                                   (1079) .ENDSECTION
                                   (1080) 
                                   (1081) 
                                   (1082) IF (UART_RXBUF_ENABLE)
                                   (1083) ;=============================================================================
                                   (1084) ;=============================================================================
                                   (1085) ;
                                   (1086) ;     Command Buffer commands
                                   (1087) ;
                                   (1088) ;=============================================================================
                                   (1089) ;=============================================================================
                                   (1090) 
                                   (1091) .SECTION
                                   (1092) ;-----------------------------------------------------------------------------
                                   (1093) ;  FUNCTION NAME: UART_CmdReset
                                   (1094) ;
                                   (1095) ;  DESCRIPTION:
                                   (1096) ;     Reset command string and status flags
                                   (1097) ;-----------------------------------------------------------------------------
                                   (1098) ;
                                   (1099) ;  ARGUMENTS:
                                   (1100) ;     none.
                                   (1101) ;
                                   (1102) ;  RETURNS:
                                   (1103) ;     none.
                                   (1104) ;
                                   (1105) ;  SIDE EFFECTS:
                                   (1106) ;    The A and X registers may be modified by this or future implementations
                                   (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1110) ;    functions.
                                   (1111) ;          
                                   (1112) ;    Currently only the page pointer registers listed below are modified: 
                                   (1113) ;          CUR_PP
                                   (1114) ;
                                   (1115) ;  THEORY of OPERATION or PROCEDURE:
                                   (1116) ;     Clear the command buffer, command counter, and flag.
                                   (1117) ;
                                   (1118)  UART_CmdReset:
                                   (1119) _UART_CmdReset:
                                   (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
0542: 62 D0 00 MOV   REG[208],0    (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
0545: 55 02 00 MOV   [2],0         (1122)    mov [UART_aRxBuffer], 0x00
0548: 62 D0 00 MOV   REG[208],0    (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
054B: 55 01 00 MOV   [1],0         (1124)    mov [UART_bRxCnt], 0x00
054E: 26 00 00 AND   [0],0         (1125)    and [UART_fStatus], 0x00
0551: 62 D0 00 MOV   REG[208],0    (1126)    RAM_SETPAGE_CUR >ptrParam
0554: 55 19 00 MOV   [Cam1+1],0    (1127)    mov [ptrParam],0x00
                                   (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
0557: 7F       RET                 (1129)    ret
                                   (1130) .ENDSECTION
                                   (1131) 
                                   (1132) 
                                   (1133) .SECTION
                                   (1134) ;-----------------------------------------------------------------------------
                                   (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                   (1136) ;
                                   (1137) ;  DESCRIPTION:
                                   (1138) ;     Check to see if valid command in buffer.
                                   (1139) ;-----------------------------------------------------------------------------
                                   (1140) ;
                                   (1141) ;  ARGUMENTS:
                                   (1142) ;     none.
                                   (1143) ;
                                   (1144) ;  RETURNS:
                                   (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1146) ;                     Returns non-zero value in A if command is valid.
                                   (1147) ;
                                   (1148) ;  SIDE EFFECTS:
                                   (1149) ;    The A and X registers may be modified by this or future implementations
                                   (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1153) ;    functions.
                                   (1154) ;          
                                   (1155) ;    Currently only the page pointer registers listed below are modified: 
                                   (1156) ;          CUR_PP
                                   (1157) ;
                                   (1158) ;  THEORY of OPERATION or PROCEDURE:
                                   (1159) ;     Read the status and control register.
                                   (1160) ;
                                   (1161)  UART_bCmdCheck:
                                   (1162) _UART_bCmdCheck:
                                   (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
0558: 62 D0 00 MOV   REG[208],0    (1164)    RAM_SETPAGE_CUR >UART_fStatus
055B: 51 00    MOV   A,[0]         (1165)    mov A,  [UART_fStatus]
055D: 21 01    AND   A,1           (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                   (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
055F: 7F       RET                 (1168)    ret
                                   (1169) .ENDSECTION
                                   (1170)     
                                   (1171) 
                                   (1172) .SECTION
                                   (1173) ;-----------------------------------------------------------------------------
                                   (1174) ;  FUNCTION NAME: UART_bErrCheck
                                   (1175) ;
                                   (1176) ;  DESCRIPTION:
                                   (1177) ;     Check to see if an error has occured since last CmdReset
                                   (1178) ;-----------------------------------------------------------------------------
                                   (1179) ;
                                   (1180) ;  ARGUMENTS:
                                   (1181) ;     none.
                                   (1182) ;
                                   (1183) ;  RETURNS:
                                   (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                   (1185) ;                     Returns non-zero value in A if command is valid.
                                   (1186) ;           0x80 => Parity Error
                                   (1187) ;           0x40 => OverRun Error
                                   (1188) ;           0x20 => Framing Error
                                   (1189) ;           0x10 => Software Buffer OverRun
                                   (1190) ;
                                   (1191) ;  SIDE EFFECTS:
                                   (1192) ;    The A and X registers may be modified by this or future implementations
                                   (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1196) ;    functions.
                                   (1197) ;          
                                   (1198) ;    Currently only the page pointer registers listed below are modified: 
                                   (1199) ;          CUR_PP
                                   (1200) ;     Error Status is clear when read.
                                   (1201) ;
                                   (1202) ;  THEORY of OPERATION or PROCEDURE:
                                   (1203) ;     Read RX buffer error status and clear status
                                   (1204) ;
                                   (1205)  UART_bErrCheck:
                                   (1206) _UART_bErrCheck:
                                   (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
0560: 62 D0 00 MOV   REG[208],0    (1208)    RAM_SETPAGE_CUR >UART_fStatus
0563: 51 00    MOV   A,[0]         (1209)    mov A,  [UART_fStatus]
0565: 21 F0    AND   A,240         (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
0567: 26 00 0F AND   [0],15        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                   (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
056A: 7F       RET                 (1213)    ret
                                   (1214) .ENDSECTION
                                   (1215) 
                                   (1216) .SECTION
                                   (1217) ;-----------------------------------------------------------------------------
                                   (1218) ;  FUNCTION NAME: UART_bCmdLength
                                   (1219) ;
                                   (1220) ;  DESCRIPTION:
                                   (1221) ;     Get length of command string
                                   (1222) ;-----------------------------------------------------------------------------
                                   (1223) ;
                                   (1224) ;  ARGUMENTS:
                                   (1225) ;     none.
                                   (1226) ;
                                   (1227) ;  RETURNS:
                                   (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                   (1229) ;
                                   (1230) ;  SIDE EFFECTS:
                                   (1231) ;    The A and X registers may be modified by this or future implementations
                                   (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1235) ;    functions.
                                   (1236) ;          
                                   (1237) ;    Currently only the page pointer registers listed below are modified: 
                                   (1238) ;          CUR_PP
                                   (1239) ;
                                   (1240)  UART_bCmdLength:
                                   (1241) _UART_bCmdLength:
                                   (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
056B: 62 D0 00 MOV   REG[208],0    (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
056E: 51 01    MOV   A,[1]         (1244)    mov A,  [UART_bRxCnt]
                                   (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
0570: 7F       RET                 (1246)    ret
                                   (1247) .ENDSECTION
                                   (1248) 
                                   (1249) 
                                   (1250) .SECTION
                                   (1251) ;-----------------------------------------------------------------------------
                                   (1252) ;  FUNCTION NAME: UART_szGetParam
                                   (1253) ;
                                   (1254) ;  DESCRIPTION:
                                   (1255) ;      Return next parameter from UART Rx buffer
                                   (1256) ;-----------------------------------------------------------------------------
                                   (1257) ;
                                   (1258) ;  ARGUMENTS:  none
                                   (1259) ;
                                   (1260) ;  RETURNS:
                                   (1261) ;     A => MSB of parameter address
                                   (1262) ;     X => LSB of parameter address
                                   (1263) ;
                                   (1264) ;  SIDE EFFECTS:
                                   (1265) ;    The A and X registers may be modified by this or future implementations
                                   (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1269) ;    functions.
                                   (1270) ;          
                                   (1271) ;    Currently only the page pointer registers listed below are modified: 
                                   (1272) ;          CUR_PP
                                   (1273) ;          IDX_PP
                                   (1274) ;
                                   (1275) ;     The receive string is modified by placing Null characters at the end
                                   (1276) ;     of each parameter as they are recovered.
                                   (1277) ;
                                   (1278) ;  THEORY OF OPERATION:
                                   (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                   (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                   (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                   (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                   (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                   (1284) ;     offset. The generator is initialized by a call to the function
                                   (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                   (1286) ;     state. Typically this function, UART_szGetParam, is
                                   (1287) ;     not called until the buffer has been loaded with an entire command
                                   (1288) ;     (See UART_bCmdCheck).
                                   (1289) ;
                                   (1290) ;     Note, there is no special distinction between the "command" and the 
                                   (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                   (1292) ;     character of the "command"---is also, for the purposes of this function,
                                   (1293) ;     the first "parameter" to which it returns an address.
                                   (1294) ;
                                   (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                   (1296) ;     is determined at configuration time by a user module parameter.
                                   (1297) ;
                                   (1298)  UART_szGetParam:
                                   (1299) _UART_szGetParam:
                                   (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
0571: 70 BF    AND   F,191         (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                   (1302)     
0573: 62 D0 00 MOV   REG[208],0    (1303)    RAM_SETPAGE_CUR >ptrParam
0576: 50 02    MOV   A,2           (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
0578: 02 19    ADD   A,[Cam1+1]    (1305)    add   A, [ptrParam]                      ; Add string offset
057A: 5C       MOV   X,A           (1306)    mov   X, A
057B: 62 D3 00 MOV   REG[211],0    (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
057E: 52 00    MOV   A,[X+0]       (1308)    mov   A, [X]                             ; Get character pointed by X
0580: B0 04    JNZ   0x0585        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
0582: 10       PUSH  X             (1310)    push  X                                  ;       Yes, Save LSB of current pointer
0583: 80 33    JMP   0x05B7        (1311)    jmp   .End_GetNextParam
                                   (1312)                                             ; Check for delimiter and keep looping until
                                   (1313)                                             ; all leading delimiters have been found.
                                   (1314) .SkipOverDelimitersLoop:
0585: 39 20    CMP   A,32          (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
0587: B0 11    JNZ   0x0599        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
0589: 75       INC   X             (1317)    inc   X                                  ;   Yes, Increment both index and...
058A: 76 19    INC   [Cam1+1]      (1318)    inc   [ptrParam]                         ;          the stored pointer.
058C: 52 00    MOV   A,[X+0]       (1319)    mov   A, [X]                             ; Get character pointed by X
058E: 3C 19 0F CMP   [Cam1+1],15   (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
0591: BF F3    JNZ   0x0585        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                   (1322) 
                                   (1323) .EndOfString:                               ;   Yes, end of string found...
0593: 10       PUSH  X             (1324)    push  X                                  ;        Save ptr
                                   (1325) .TerminateString:
0594: 56 00 00 MOV   [X+0],0       (1326)    mov   [X], 0x00                          ; Make sure string is zero
0597: 80 1F    JMP   0x05B7        (1327)    jmp   .End_GetNextParam
                                   (1328) 
                                   (1329) .ParamStartFound:
0599: 10       PUSH  X             (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                   (1331) 
                                   (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
059A: 75       INC   X             (1333)    inc   X                                  ; Advance pointers.
059B: 76 19    INC   [Cam1+1]      (1334)    inc   [ptrParam]
059D: 3C 19 0F CMP   [Cam1+1],15   (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05A0: AF F3    JZ    0x0594        (1336)    jz    .TerminateString
05A2: 52 00    MOV   A,[X+0]       (1337)    mov   A, [X]                             ; Get next character
05A4: A0 12    JZ    0x05B7        (1338)    jz    .End_GetNextParam
05A6: 39 20    CMP   A,32          (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
05A8: BF F1    JNZ   0x059A        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
05AA: 56 00 00 MOV   [X+0],0       (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
05AD: 76 19    INC   [Cam1+1]      (1342)    inc   [ptrParam]
05AF: 3C 19 0F CMP   [Cam1+1],15   (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
05B2: B0 04    JNZ   0x05B7        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
05B4: 55 19 0F MOV   [Cam1+1],15   (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                   (1346) 
                                   (1347) .End_GetNextParam:
05B7: 20       POP   X             (1348)    pop   X
05B8: 10       PUSH  X             (1349)    push  X
05B9: 3D 00 00 CMP   [X+0],0       (1350)    cmp   [X], 0x00
05BC: B0 0B    JNZ   0x05C8        (1351)    jnz   .NotNullString
05BE: 20       POP   X             (1352)    pop   X
05BF: 57 00    MOV   X,0           (1353)    mov   X, 0x00
05C1: 50 00    MOV   A,0           (1354)    mov   A, >UART_aRxBuffer
05C3: 70 3F    AND   F,63
05C5: 71 C0    OR    F,192         (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
05C7: 7F       RET                 (1357)    ret
                                   (1358) 
                                   (1359) .NotNullString:
05C8: 20       POP   X             (1360)    pop  X
05C9: 50 00    MOV   A,0           (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
05CB: 70 3F    AND   F,63
05CD: 71 C0    OR    F,192         (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                   (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
05CF: 7F       RET                 (1364)    ret
                                   (1365) .ENDSECTION
                                   (1366) 
                                   (1367) 
                                   (1368) .SECTION
                                   (1369) ;-----------------------------------------------------------------------------
                                   (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                   (1371) ;
                                   (1372) ;  DESCRIPTION:
                                   (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                   (1374) ;-----------------------------------------------------------------------------
                                   (1375) ;
                                   (1376) ;  ARGUMENTS:  none
                                   (1377) ;
                                   (1378) ;  RETURNS:
                                   (1379) ;     A => MSB of parameter
                                   (1380) ;     X => LSB of parameter
                                   (1381) ;
                                   (1382) ;  SIDE EFFECTS:
                                   (1383) ;    The A and X registers may be modified by this or future implementations
                                   (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                   (1387) ;    functions.
                                   (1388) ;          
                                   (1389) ;    Currently only the page pointer registers listed below are modified: 
                                   (1390) ;          CUR_PP
                                   (1391) ;
                                   (1392)  UART_szGetRestOfParams:
                                   (1393) _UART_szGetRestOfParams:
                                   (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
05D0: 62 D0 00 MOV   REG[208],0    (1395)    RAM_SETPAGE_CUR >ptrParam
05D3: 50 02    MOV   A,2           (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
05D5: 02 19    ADD   A,[Cam1+1]    (1397)    add  A, [ptrParam]                       ; Add string offset
05D7: 5C       MOV   X,A           (1398)    mov  X,A
05D8: 50 00    MOV   A,0           (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                   (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
05DA: 7F       RET                 (1401)    ret

FILE: lib\timer8int.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME: Timer8INT.asm
                                   (0004) ;;   Version: 2.5, Updated on 2006/06/19 at 11:15:48
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: Timer8 Interrupt Service Routine
                                   (0008) ;;-----------------------------------------------------------------------------
                                   (0009) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0010) ;;*****************************************************************************
                                   (0011) ;;*****************************************************************************
                                   (0012) 
                                   (0013) include "m8c.inc"
                                   (0014) include "memory.inc"
                                   (0015) include "Timer8.inc"
                                   (0016) 
                                   (0017) 
                                   (0018) ;-----------------------------------------------
                                   (0019) ;  Global Symbols
                                   (0020) ;-----------------------------------------------
                                   (0021) export  _Timer8_ISR
                                   (0022) 
                                   (0023) 
                                   (0024) AREA InterruptRAM (RAM,REL,CON)
                                   (0025) 
                                   (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                   (0027) ;---------------------------------------------------
                                   (0028) ; Insert your custom declarations below this banner
                                   (0029) ;---------------------------------------------------
                                   (0030) 
                                   (0031) ;------------------------
                                   (0032) ; Includes
                                   (0033) ;------------------------
                                   (0034) 
                                   (0035) 	
                                   (0036) ;------------------------
                                   (0037) ;  Constant Definitions
                                   (0038) ;------------------------
                                   (0039) 
                                   (0040) 
                                   (0041) ;------------------------
                                   (0042) ; Variable Allocation
                                   (0043) ;------------------------
                                   (0044) 
                                   (0045) 
                                   (0046) ;---------------------------------------------------
                                   (0047) ; Insert your custom declarations above this banner
                                   (0048) ;---------------------------------------------------
                                   (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0050) 
                                   (0051) 
                                   (0052) AREA UserModules (ROM, REL)
                                   (0053) 
                                   (0054) ;-----------------------------------------------------------------------------
                                   (0055) ;  FUNCTION NAME: _Timer8_ISR
                                   (0056) ;
                                   (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                   (0058) ;
                                   (0059) ;-----------------------------------------------------------------------------
                                   (0060) ;
                                   (0061) 
                                   (0062) _Timer8_ISR:
                                   (0063) 
                                   (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                   (0065)    ;---------------------------------------------------
                                   (0066)    ; Insert your custom code below this banner
                                   (0067)    ;---------------------------------------------------
                                   (0068)    ;   NOTE: interrupt service routines must preserve
                                   (0069)    ;   the values of the A and X CPU registers.
                                   (0070) 
                                   (0071)    ;---------------------------------------------------
                                   (0072)    ; Insert your custom code above this banner
                                   (0073)    ;---------------------------------------------------
                                   (0074)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                   (0075) 
05DB: 7E       RETI                (0076)    reti

FILE: lib\timer8.asm
                                   (0001) ;;*****************************************************************************
                                   (0002) ;;*****************************************************************************
                                   (0003) ;;  FILENAME: Timer8.asm
                                   (0004) ;;   Version: 2.5, Updated on 2006/06/19 at 11:15:48
                                   (0005) ;;  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
                                   (0006) ;;
                                   (0007) ;;  DESCRIPTION: Timer8 User Module software implementation file
                                   (0008) ;;               for the 22/24/27/29xxx PSoC family of devices
                                   (0009) ;;
                                   (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                   (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                   (0012) ;;        This means it is the caller's responsibility to preserve any values
                                   (0013) ;;        in the X and A registers that are still needed after the API functions
                                   (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                   (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                   (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                   (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                   (0018) ;;-----------------------------------------------------------------------------
                                   (0019) ;;  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
                                   (0020) ;;*****************************************************************************
                                   (0021) ;;*****************************************************************************
                                   (0022) 
                                   (0023) include "m8c.inc"
                                   (0024) include "memory.inc"
                                   (0025) include "Timer8.inc"
                                   (0026) 
                                   (0027) ;-----------------------------------------------
                                   (0028) ;  Global Symbols
                                   (0029) ;-----------------------------------------------
                                   (0030) export  Timer8_EnableInt
                                   (0031) export _Timer8_EnableInt
                                   (0032) export  Timer8_DisableInt
                                   (0033) export _Timer8_DisableInt
                                   (0034) export  Timer8_Start
                                   (0035) export _Timer8_Start
                                   (0036) export  Timer8_Stop
                                   (0037) export _Timer8_Stop
                                   (0038) export  Timer8_WritePeriod
                                   (0039) export _Timer8_WritePeriod
                                   (0040) export  Timer8_WriteCompareValue
                                   (0041) export _Timer8_WriteCompareValue
                                   (0042) export  Timer8_bReadCompareValue
                                   (0043) export _Timer8_bReadCompareValue
                                   (0044) export  Timer8_bReadTimer
                                   (0045) export _Timer8_bReadTimer
                                   (0046) export  Timer8_bReadTimerSaveCV
                                   (0047) export _Timer8_bReadTimerSaveCV
                                   (0048) 
                                   (0049) ; The following functions are deprecated and subject to omission in future releases
                                   (0050) ;
                                   (0051) export  bTimer8_ReadCompareValue  ; deprecated
                                   (0052) export _bTimer8_ReadCompareValue  ; deprecated
                                   (0053) export  bTimer8_ReadTimer         ; deprecated
                                   (0054) export _bTimer8_ReadTimer         ; deprecated
                                   (0055) export  bTimer8_ReadTimerSaveCV   ; deprecated
                                   (0056) export _bTimer8_ReadTimerSaveCV   ; deprecated
                                   (0057) 
                                   (0058) export  bTimer8_ReadCounter       ; obsolete
                                   (0059) export _bTimer8_ReadCounter       ; obsolete
                                   (0060) export  bTimer8_CaptureCounter    ; obsolete
                                   (0061) export _bTimer8_CaptureCounter    ; obsolete
                                   (0062) 
                                   (0063) 
                                   (0064) AREA trabajov1_RAM (RAM,REL)
                                   (0065) 
                                   (0066) ;-----------------------------------------------
                                   (0067) ;  Constant Definitions
                                   (0068) ;-----------------------------------------------
                                   (0069) 
                                   (0070) 
                                   (0071) ;-----------------------------------------------
                                   (0072) ; Variable Allocation
                                   (0073) ;-----------------------------------------------
                                   (0074) 
                                   (0075) 
                                   (0076) AREA UserModules (ROM, REL)
                                   (0077) 
                                   (0078) .SECTION
                                   (0079) ;-----------------------------------------------------------------------------
                                   (0080) ;  FUNCTION NAME: Timer8_EnableInt
                                   (0081) ;
                                   (0082) ;  DESCRIPTION:
                                   (0083) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                   (0084) ;     associated with this User Module. This function has no effect until and
                                   (0085) ;     unless the global interrupts are enabled (for example by using the
                                   (0086) ;     macro M8C_EnableGInt).
                                   (0087) ;-----------------------------------------------------------------------------
                                   (0088) ;
                                   (0089) ;  ARGUMENTS:    None.
                                   (0090) ;  RETURNS:      Nothing.
                                   (0091) ;  SIDE EFFECTS: 
                                   (0092) ;    The A and X registers may be modified by this or future implementations
                                   (0093) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0094) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0095) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0096) ;    functions.
                                   (0097) ;
                                   (0098)  Timer8_EnableInt:
                                   (0099) _Timer8_EnableInt:
                                   (0100)    RAM_PROLOGUE RAM_USE_CLASS_1
05DC: 43 E1 01 OR    REG[225],1    (0101)    Timer8_EnableInt_M
                                   (0102)    RAM_EPILOGUE RAM_USE_CLASS_1
05DF: 7F       RET                 (0103)    ret
                                   (0104) 
                                   (0105) .ENDSECTION
                                   (0106) 
                                   (0107) 
                                   (0108) .SECTION
                                   (0109) ;-----------------------------------------------------------------------------
                                   (0110) ;  FUNCTION NAME: Timer8_DisableInt
                                   (0111) ;
                                   (0112) ;  DESCRIPTION:
                                   (0113) ;     Disables this timer's interrupt by clearing the interrupt enable
                                   (0114) ;     mask bit associated with this User Module.
                                   (0115) ;-----------------------------------------------------------------------------
                                   (0116) ;
                                   (0117) ;  ARGUMENTS:    None
                                   (0118) ;  RETURNS:      Nothing
                                   (0119) ;  SIDE EFFECTS: 
                                   (0120) ;    The A and X registers may be modified by this or future implementations
                                   (0121) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0122) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0123) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0124) ;    functions.
                                   (0125) ;
                                   (0126)  Timer8_DisableInt:
                                   (0127) _Timer8_DisableInt:
                                   (0128)    RAM_PROLOGUE RAM_USE_CLASS_1
05E0: 41 E1 FE AND   REG[225],254  (0129)    Timer8_DisableInt_M
                                   (0130)    RAM_EPILOGUE RAM_USE_CLASS_1
05E3: 7F       RET                 (0131)    ret
                                   (0132) 
                                   (0133) .ENDSECTION
                                   (0134) 
                                   (0135) 
                                   (0136) .SECTION
                                   (0137) ;-----------------------------------------------------------------------------
                                   (0138) ;  FUNCTION NAME: Timer8_Start
                                   (0139) ;
                                   (0140) ;  DESCRIPTION:
                                   (0141) ;     Sets the start bit in the Control register of this user module.  The
                                   (0142) ;     timer will begin counting on the next input clock.
                                   (0143) ;-----------------------------------------------------------------------------
                                   (0144) ;
                                   (0145) ;  ARGUMENTS:    None
                                   (0146) ;  RETURNS:      Nothing
                                   (0147) ;  SIDE EFFECTS: 
                                   (0148) ;    The A and X registers may be modified by this or future implementations
                                   (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0152) ;    functions.
                                   (0153) ;
                                   (0154)  Timer8_Start:
                                   (0155) _Timer8_Start:
                                   (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
05E4: 43 23 01 OR    REG[35],1     (0157)    Timer8_Start_M
                                   (0158)    RAM_EPILOGUE RAM_USE_CLASS_1
05E7: 7F       RET                 (0159)    ret
                                   (0160) 
                                   (0161) .ENDSECTION
                                   (0162) 
                                   (0163) 
                                   (0164) .SECTION
                                   (0165) ;-----------------------------------------------------------------------------
                                   (0166) ;  FUNCTION NAME: Timer8_Stop
                                   (0167) ;
                                   (0168) ;  DESCRIPTION:
                                   (0169) ;     Disables timer operation by clearing the start bit in the Control
                                   (0170) ;     register.
                                   (0171) ;-----------------------------------------------------------------------------
                                   (0172) ;
                                   (0173) ;  ARGUMENTS:    None
                                   (0174) ;  RETURNS:      Nothing
                                   (0175) ;  SIDE EFFECTS: 
                                   (0176) ;    The A and X registers may be modified by this or future implementations
                                   (0177) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0178) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0179) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0180) ;    functions.
                                   (0181) ;
                                   (0182)  Timer8_Stop:
                                   (0183) _Timer8_Stop:
                                   (0184)    RAM_PROLOGUE RAM_USE_CLASS_1
05E8: 41 23 FE AND   REG[35],254   (0185)    Timer8_Stop_M
                                   (0186)    RAM_EPILOGUE RAM_USE_CLASS_1
05EB: 7F       RET                 (0187)    ret
                                   (0188) 
                                   (0189) .ENDSECTION
                                   (0190) 
                                   (0191) 
                                   (0192) .SECTION
                                   (0193) ;-----------------------------------------------------------------------------
                                   (0194) ;  FUNCTION NAME: Timer8_WritePeriod
                                   (0195) ;
                                   (0196) ;  DESCRIPTION:
                                   (0197) ;     Write the 8-bit period value into the Period register (DR1). If the
                                   (0198) ;     Timer user module is stopped, then this value will also be latched
                                   (0199) ;     into the Count register (DR0).
                                   (0200) ;-----------------------------------------------------------------------------
                                   (0201) ;
                                   (0202) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                   (0203) ;  RETURNS:   Nothing
                                   (0204) ;  SIDE EFFECTS: 
                                   (0205) ;    The A and X registers may be modified by this or future implementations
                                   (0206) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0207) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0208) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0209) ;    functions.
                                   (0210) ;
                                   (0211)  Timer8_WritePeriod:
                                   (0212) _Timer8_WritePeriod:
                                   (0213)    RAM_PROLOGUE RAM_USE_CLASS_1
05EC: 60 21    MOV   REG[33],A     (0214)    mov   reg[Timer8_PERIOD_REG], A
                                   (0215)    RAM_EPILOGUE RAM_USE_CLASS_1
05EE: 7F       RET                 (0216)    ret
                                   (0217) 
                                   (0218) .ENDSECTION
                                   (0219) 
                                   (0220) 
                                   (0221) .SECTION
                                   (0222) ;-----------------------------------------------------------------------------
                                   (0223) ;  FUNCTION NAME: Timer8_WriteCompareValue
                                   (0224) ;
                                   (0225) ;  DESCRIPTION:
                                   (0226) ;     Writes compare value into the Compare register (DR2).
                                   (0227) ;
                                   (0228) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                   (0229) ;           Compare register. (Call Timer8_Stop to disable).
                                   (0230) ;-----------------------------------------------------------------------------
                                   (0231) ;
                                   (0232) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                   (0233) ;  RETURNS:      Nothing
                                   (0234) ;  SIDE EFFECTS: 
                                   (0235) ;    The A and X registers may be modified by this or future implementations
                                   (0236) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0237) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0238) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0239) ;    functions.
                                   (0240) ;
                                   (0241)  Timer8_WriteCompareValue:
                                   (0242) _Timer8_WriteCompareValue:
                                   (0243)    RAM_PROLOGUE RAM_USE_CLASS_1
05EF: 60 22    MOV   REG[34],A     (0244)    mov   reg[Timer8_COMPARE_REG], A
                                   (0245)    RAM_EPILOGUE RAM_USE_CLASS_1
05F1: 7F       RET                 (0246)    ret
                                   (0247) 
                                   (0248) .ENDSECTION
                                   (0249) 
                                   (0250) 
                                   (0251) .SECTION
                                   (0252) ;-----------------------------------------------------------------------------
                                   (0253) ;  FUNCTION NAME: Timer8_bReadCompareValue
                                   (0254) ;
                                   (0255) ;  DESCRIPTION:
                                   (0256) ;     Reads the Compare register.
                                   (0257) ;-----------------------------------------------------------------------------
                                   (0258) ;
                                   (0259) ;  ARGUMENTS:    None
                                   (0260) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                   (0261) ;  SIDE EFFECTS: 
                                   (0262) ;    The A and X registers may be modified by this or future implementations
                                   (0263) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0264) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0265) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0266) ;    functions.
                                   (0267) ;
                                   (0268)  Timer8_bReadCompareValue:
                                   (0269) _Timer8_bReadCompareValue:
                                   (0270)  bTimer8_ReadCompareValue:                       ; this name deprecated
                                   (0271) _bTimer8_ReadCompareValue:                       ; this name deprecated
                                   (0272)    RAM_PROLOGUE RAM_USE_CLASS_1
05F2: 5D 22    MOV   A,REG[34]     (0273)    mov   A, reg[Timer8_COMPARE_REG]
                                   (0274)    RAM_EPILOGUE RAM_USE_CLASS_1
05F4: 7F       RET                 (0275)    ret
                                   (0276) 
                                   (0277) .ENDSECTION
                                   (0278) 
                                   (0279) 
                                   (0280) .SECTION
                                   (0281) ;-----------------------------------------------------------------------------
                                   (0282) ;  FUNCTION NAME: Timer8_bReadTimerSaveCV
                                   (0283) ;
                                   (0284) ;  DESCRIPTION:
                                   (0285) ;     Returns the value in the Count register (DR0), preserving the
                                   (0286) ;     value in the compare register (DR2).
                                   (0287) ;-----------------------------------------------------------------------------
                                   (0288) ;
                                   (0289) ;  ARGUMENTS: None
                                   (0290) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                   (0291) ;  SIDE EFFECTS:
                                   (0292) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                   (0293) ;     2) If enabled, Global interrupts are momentarily disabled.
                                   (0294) ;     3) The user module is stopped momentarily while the compare value is
                                   (0295) ;        restored.  This may cause the Count register to miss one or more
                                   (0296) ;        counts depending on the input clock speed.
                                   (0297) ;     4) The A and X registers may be modified by this or future implementations
                                   (0298) ;        of this function.  The same is true for all RAM page pointer registers in
                                   (0299) ;        the Large Memory Model.  When necessary, it is the calling function's
                                   (0300) ;        responsibility to perserve their values across calls to fastcall16 
                                   (0301) ;        functions.
                                   (0302) ;
                                   (0303) ;  THEORY of OPERATION:
                                   (0304) ;     1) Read and save the Compare register.
                                   (0305) ;     2) Read the Count register, causing its data to be latched into
                                   (0306) ;        the Compare register.
                                   (0307) ;     3) Read and save the Counter value, now in the Compare register,
                                   (0308) ;        to the buffer.
                                   (0309) ;     4) Disable global interrupts
                                   (0310) ;     5) Halt the timer
                                   (0311) ;     6) Restore the Compare register values
                                   (0312) ;     7) Start the Timer again
                                   (0313) ;     8) Restore global interrupt state
                                   (0314) ;
                                   (0315)  Timer8_bReadTimerSaveCV:
                                   (0316) _Timer8_bReadTimerSaveCV:
                                   (0317)  bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                   (0318) _bTimer8_ReadTimerSaveCV:                        ; this name deprecated
                                   (0319)  bTimer8_ReadCounter:                            ; this name deprecated
                                   (0320) _bTimer8_ReadCounter:                            ; this name deprecated
                                   (0321) 
                                   (0322) CpuFlags:      equ   0
                                   (0323) bCount:        equ   1
                                   (0324) 
                                   (0325)    RAM_PROLOGUE RAM_USE_CLASS_2
05F5: 4F       MOV   X,SP          (0326)    mov   X, SP                                   ; X <- stack frame pointer
05F6: 38 02    ADD   SP,2          (0327)    add   SP, 2                                   ; Reserve space for flags, count
05F8: 5D 23    MOV   A,REG[35]     (0328)    mov   A, reg[Timer8_CONTROL_REG]              ; save the Control register
05FA: 08       PUSH  A             (0329)    push  A
05FB: 5D 22    MOV   A,REG[34]     (0330)    mov   A, reg[Timer8_COMPARE_REG]              ; save the Compare register
05FD: 08       PUSH  A             (0331)    push  A
05FE: 5D 20    MOV   A,REG[32]     (0332)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                   (0333)                                                  ; This may cause an interrupt!
0600: 5D 22    MOV   A,REG[34]     (0334)    mov   A, reg[Timer8_COMPARE_REG]              ; Now grab DR2 (DR0) and save
0602: 54 01    MOV   [X+1],A       (0335)    mov   [X+bCount], A
0604: 50 00    MOV   A,0           (0336)    mov   A, 0                                    ; Guess the global interrupt state
0606: 49 F7 01 TST   REG[247],1    (0337)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0609: A0 03    JZ    0x060D        (0338)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
060B: 50 01    MOV   A,1           (0339)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                   (0340) .SetupStatusFlag:                                ; and ...
060D: 54 00    MOV   [X+0],A       (0341)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
060F: 70 FE    AND   F,254         (0342)    M8C_DisableGInt                               ; Disable interrupts globally
0611: 41 23 FE AND   REG[35],254   (0343)    Timer8_Stop_M                                 ; Stop the timer
0614: 18       POP   A             (0344)    pop   A                                       ; Restore the Compare register
0615: 60 22    MOV   REG[34],A     (0345)    mov   reg[Timer8_COMPARE_REG], A
0617: 18       POP   A             (0346)    pop   A                                       ; restore start state of the timer
0618: 60 23    MOV   REG[35],A     (0347)    mov   reg[Timer8_CONTROL_REG], A
061A: 18       POP   A             (0348)    pop   A                                       ; Return result stored in stack frame
061B: 70 3F    AND   F,63
061D: 71 C0    OR    F,192         (0349)    RAM_EPILOGUE RAM_USE_CLASS_2
061F: 7E       RETI                (0350)    reti                                          ; Flag Reg <- StackFrame[0]
                                   (0351) 
                                   (0352) .ENDSECTION
                                   (0353) 
                                   (0354) 
                                   (0355) .SECTION
                                   (0356) ;-----------------------------------------------------------------------------
                                   (0357) ;  FUNCTION NAME: Timer8_bReadTimer
                                   (0358) ;
                                   (0359) ;  DESCRIPTION:
                                   (0360) ;     Performs a software capture of the Count register.  A synchronous
                                   (0361) ;     read of the Count register is performed.  The timer is NOT stopped.
                                   (0362) ;
                                   (0363) ;     WARNING - this will cause loss of data in the Compare register.
                                   (0364) ;-----------------------------------------------------------------------------
                                   (0365) ;
                                   (0366) ;  ARGUMENTS:    None
                                   (0367) ;  RETURNS:      fastcall16 BYTE bCount, (value of DR0 in the A register)
                                   (0368) ;  SIDE EFFECTS:
                                   (0369) ;    May cause an interrupt.
                                   (0370) ;
                                   (0371) ;    The A and X registers may be modified by this or future implementations
                                   (0372) ;    of this function.  The same is true for all RAM page pointer registers in
                                   (0373) ;    the Large Memory Model.  When necessary, it is the calling function's
                                   (0374) ;    responsibility to perserve their values across calls to fastcall16 
                                   (0375) ;    functions.
                                   (0376) ;
                                   (0377) ;  THEORY of OPERATION:
                                   (0378) ;     1) Read the Count register - this causes the count value to be
                                   (0379) ;        latched into the Compare register.
                                   (0380) ;     2) Read and return the Count register values from the Compare
                                   (0381) ;        registers into the return buffer.
                                   (0382) ;
                                   (0383)  Timer8_bReadTimer:
                                   (0384) _Timer8_bReadTimer:
                                   (0385)  bTimer8_ReadTimer:                              ; this name deprecated
                                   (0386) _bTimer8_ReadTimer:                              ; this name deprecated
                                   (0387)  bTimer8_CaptureCounter:                         ; this name deprecated
                                   (0388) _bTimer8_CaptureCounter:                         ; this name deprecated
                                   (0389) 
                                   (0390)    RAM_PROLOGUE RAM_USE_CLASS_1
0620: 5D 20    MOV   A,REG[32]     (0391)    mov   A, reg[Timer8_COUNTER_REG]              ; synchronous copy DR2 <- DR0
                                   (0392)                                                  ; This may cause an interrupt!
0622: 5D 22    MOV   A,REG[34]     (0393)    mov   A, reg[Timer8_COMPARE_REG]              ; Return DR2 (actually DR0)
                                   (0394)    RAM_EPILOGUE RAM_USE_CLASS_1
0624: 7F       RET                 (0395)    ret

FILE: .\trabajo.h
(0001) //Prototipos de la libreria del PSoC de trabajo
(0002) void Inicio();
(0003) void Ejecucion();
(0004) char Dato();
(0005) void Deteccion();
(0006) void Disparo();
(0007) void Unico();
(0008) void Intervalometro();
(0009) void TimeLapse();
(0010) 
(0011) //Variables globales del PSoC de trabajo
(0012) char Ent1=0;	//Barrera 1 12V
(0013) char Ent2=0;	//Barrera 2 12V
(0014) char Ent3=0;	//Microfono A/D 5V
(0015) char Ent4=0;	//Digital 0/1 5V
(0016) char Cam1=0, Cam2=0, Fla1=0, Fla2=0, Fla3=0, Fla4=0;
(0017) char Uni=0, Inter=0, Tilap=0;
(0018) 
(0019) //******************************************************************************
(0020) //******************************************************************************
(0021) 
(0022) //Esta funcion esperara continuamente una informacion que le llegara por
(0023) //la comunicacion del puerto serie que hemos incorporado al
(0024) //proyecto, la informacion que reciba hara de selector para las tareas
(0025) //que tiene programadas
(0026) 
(0027) void Inicio()
(0028) {	
__text_start:
_Inicio:
  coms                 --> X+0
0625: 10       PUSH  X
0626: 4F       MOV   X,SP
0627: 38 01    ADD   SP,1
(0029) 	char coms;
(0030) 	
(0031) 	for(;;)
(0032) 	{
(0033) 		coms=Dato();
0629: 90 70    CALL  _Dato
062B: 62 D0 00 MOV   REG[208],0
062E: 54 00    MOV   [X+0],A
(0034) 		if(coms==9) Ejecucion();
0630: 3D 00 09 CMP   [X+0],9
0633: BF F5    JNZ   0x0629
0635: 90 06    CALL  _Ejecucion
0637: 8F F1    JMP   0x0629
0639: 38 FF    ADD   SP,255
063B: 20       POP   X
063C: 7F       RET   
(0035) 		//Dejo espacio en caso de querer implementar el testeo del microfo a traves de la UART
(0036) 	}
(0037) }
(0038) 
(0039) //******************************************************************************
(0040) //******************************************************************************
(0041) 
(0042) //Funcion que recivira las tranmision de la UART y las asignara a las diferentes
(0043) //variables para poderlas usar en nuestro programa
(0044) 
(0045) void Ejecucion()
(0046) {
(0047) 	Ent1=Dato();
_Ejecucion:
063D: 90 5C    CALL  _Dato
063F: 62 D0 00 MOV   REG[208],0
0642: 53 14    MOV   [Ent1],A
(0048) 	Ent2=Dato();
0644: 90 55    CALL  _Dato
0646: 62 D0 00 MOV   REG[208],0
0649: 53 15    MOV   [Ent2],A
(0049) 	Ent3=Dato();
064B: 90 4E    CALL  _Dato
064D: 62 D0 00 MOV   REG[208],0
0650: 53 16    MOV   [Ent3],A
(0050) 	Ent4=Dato();
0652: 90 47    CALL  _Dato
0654: 62 D0 00 MOV   REG[208],0
0657: 53 17    MOV   [Ent4],A
(0051) 	Cam1=Dato();
0659: 90 40    CALL  _Dato
065B: 62 D0 00 MOV   REG[208],0
065E: 53 18    MOV   [Cam1],A
(0052) 	Cam2=Dato();
0660: 90 39    CALL  _Dato
0662: 62 D0 00 MOV   REG[208],0
0665: 53 1B    MOV   [Cam2],A
(0053) 	Fla1=Dato();
0667: 90 32    CALL  _Dato
0669: 62 D0 00 MOV   REG[208],0
066C: 53 1C    MOV   [Fla1],A
(0054) 	Fla2=Dato();
066E: 90 2B    CALL  _Dato
0670: 62 D0 00 MOV   REG[208],0
0673: 53 1D    MOV   [Fla2],A
(0055) 	Fla3=Dato();
0675: 90 24    CALL  _Dato
0677: 62 D0 00 MOV   REG[208],0
067A: 53 1E    MOV   [Fla3],A
(0056) 	Fla4=Dato();
067C: 90 1D    CALL  _Dato
067E: 62 D0 00 MOV   REG[208],0
0681: 53 1F    MOV   [Fla4],A
(0057) 	Uni=Dato();
0683: 90 16    CALL  _Dato
0685: 62 D0 00 MOV   REG[208],0
0688: 53 20    MOV   [Uni],A
(0058) 	Inter=Dato();
068A: 90 0F    CALL  _Dato
068C: 62 D0 00 MOV   REG[208],0
068F: 53 21    MOV   [Inter],A
(0059) 	Tilap=Dato();
0691: 90 08    CALL  _Dato
0693: 62 D0 00 MOV   REG[208],0
0696: 53 1A    MOV   [Tilap],A
(0060) 	Deteccion();
0698: 90 2C    CALL  _Deteccion
(0061) }
069A: 7F       RET   
(0062) 
(0063) //******************************************************************************
(0064) //******************************************************************************
(0065) 
(0066) //Funcion de soporte que devolvera lo que reciva por la UART
(0067) //y enviara una confirmacion para que se envie el siguiente dato
(0068) 
(0069) char Dato()
(0070) {
_Dato:
  confirma             --> X+1
  recibido             --> X+0
069B: 10       PUSH  X
069C: 4F       MOV   X,SP
069D: 38 02    ADD   SP,2
(0071) 	char recibido, confirma;
(0072) 	
(0073) 	do
(0074) 	{
(0075) 		recibido=UART_cGetChar();	//Esta se espera a que llegue un byte. Ver tambien UART_cReadChar()
069F: 10       PUSH  X
06A0: 7C 04 8C LCALL 0x048C
06A3: 62 D0 00 MOV   REG[208],0
06A6: 20       POP   X
06A7: 54 00    MOV   [X+0],A
(0076) 		UART_PutChar(recibido);		//Devolvemos el valor para la confirmacion confirmacion
06A9: 10       PUSH  X
06AA: 52 00    MOV   A,[X+0]
06AC: 7C 04 84 LCALL 0x0484
(0077) 		confirma=UART_cGetChar();	//Resultado de la confirmacion
06AF: 7C 04 8C LCALL 0x048C
06B2: 62 D0 00 MOV   REG[208],0
06B5: 20       POP   X
06B6: 54 01    MOV   [X+1],A
(0078) 	}while(confirma!=5);
06B8: 3D 01 05 CMP   [X+1],5
06BB: BF E3    JNZ   0x069F
(0079) 	return recibido;
06BD: 52 00    MOV   A,[X+0]
06BF: 62 D0 00 MOV   REG[208],0
06C2: 38 FE    ADD   SP,254
06C4: 20       POP   X
06C5: 7F       RET   
(0080) }
(0081) 
(0082) //******************************************************************************
(0083) //******************************************************************************
(0084) 
(0085) //Funcion de bucl que mira si alguna entreada del PSoC de treabajo 
(0086) //se activa segun lo especificado
(0087) //Devolvera el numero de la entrada que se haya activado
(0088) 
(0089) void Deteccion()	
(0090) {
_Deteccion:
  sensor               --> X+0
06C6: 10       PUSH  X
06C7: 4F       MOV   X,SP
06C8: 38 01    ADD   SP,1
(0091) 	char sensor=0;
06CA: 56 00 00 MOV   [X+0],0
(0092) 	
(0093) 	PRT0DR=0xAA;	//Activo las resistencias de pull-up de los detectores
06CD: 62 00 AA MOV   REG[0],170
(0094) 	
(0095) 	do
(0096) 	{
(0097) 		if(Ent1==1)if(PRT0DR & 0x80==0x80)sensor=1;			//La entrada 1 consta de una barrera a 12V
06D0: 62 D0 00 MOV   REG[208],0
06D3: 3C 14 01 CMP   [Ent1],1
06D6: B0 43    JNZ   0x071A
06D8: 49 00 01 TST   REG[0],1
06DB: A0 06    JZ    0x06E2
06DD: 56 00 01 MOV   [X+0],1
06E0: 80 39    JMP   0x071A
(0098) 															//entrada en HighZ y con un divisor de tension
(0099) 		else if(Ent2==1)if(PRT0DR & 0x20==0x20)sensor=2;	//La entrada 2 consta de una barrera a 12V
06E2: 62 D0 00 MOV   REG[208],0
06E5: 3C 15 01 CMP   [Ent2],1
06E8: B0 31    JNZ   0x071A
06EA: 49 00 01 TST   REG[0],1
06ED: A0 06    JZ    0x06F4
06EF: 56 00 02 MOV   [X+0],2
06F2: 80 27    JMP   0x071A
(0100) 															//entrada en HighZ y con un divisor de tension
(0101) 		else if(Ent3==1)					//La entrada 3 consta de un microfono regulable
06F4: 62 D0 00 MOV   REG[208],0
06F7: 3C 16 01 CMP   [Ent3],1
06FA: B0 0D    JNZ   0x0708
(0102) 		{									//mediante programacion a 5V
(0103) 			if(PRT0DR & 0x08==0x00)			//entrada con conversor analogico/digital
06FC: 50 00    MOV   A,0
06FE: A0 1B    JZ    0x071A
(0104) 			{
(0105) 				sensor=3;
0700: 56 00 03 MOV   [X+0],3
(0106) 				PRT0DR=PRT0DR | 0x08;
0703: 43 00 08 OR    REG[0],8
(0107) 			}
(0108) 		}											
0706: 80 13    JMP   0x071A
(0109) 		else if(Ent4==1)					//La entrada 4 consta de diferentes posibilidades 
0708: 62 D0 00 MOV   REG[208],0
070B: 3C 17 01 CMP   [Ent4],1
070E: B0 0B    JNZ   0x071A
(0110) 		{									//laser, infrarojos, presion, etc a 5V
(0111) 			if(PRT0DR & 0x02==0x00)
0710: 50 00    MOV   A,0
0712: A0 07    JZ    0x071A
(0112) 			{
(0113) 				sensor=4;
0714: 56 00 04 MOV   [X+0],4
(0114) 				PRT0DR=PRT0DR | 0x02;	//Recarga de la resistencia
0717: 43 00 02 OR    REG[0],2
(0115) 			}
(0116) 		}
(0117) 	}while(sensor==0);
071A: 3D 00 00 CMP   [X+0],0
071D: AF B2    JZ    0x06D0
(0118) 	Disparo();
071F: 90 04    CALL  _Disparo
(0119) }
0721: 38 FF    ADD   SP,255
0723: 20       POP   X
0724: 7F       RET   
(0120) 
(0121) //******************************************************************************
(0122) //******************************************************************************
(0123) 
(0124) //Funcion que gestionara los tipos de disparos al activarse dependiendo de  la informacion
(0125) //de las variables que le hemos mandado actuara de una manera u otra
(0126) 
(0127) void Disparo()
(0128) {
(0129) 	if(Uni==1) Unico();
_Disparo:
0725: 62 D0 00 MOV   REG[208],0
0728: 3C 20 01 CMP   [Uni],1
072B: B0 05    JNZ   0x0731
072D: 90 19    CALL  _Unico
072F: 80 17    JMP   0x0747
(0130) 	else if(Inter==1) Intervalometro();
0731: 62 D0 00 MOV   REG[208],0
0734: 3C 21 01 CMP   [Inter],1
0737: B0 05    JNZ   0x073D
0739: 90 38    CALL  _Intervalometro
073B: 80 0B    JMP   0x0747
(0131) 	else if (Tilap==1) TimeLapse();
073D: 62 D0 00 MOV   REG[208],0
0740: 3C 1A 01 CMP   [Tilap],1
0743: B0 03    JNZ   0x0747
0745: 90 34    CALL  _TimeLapse
(0132) 	//En caso de no haber seleccionado ningun modo de disparo
(0133) }
0747: 7F       RET   
(0134) 
(0135) //******************************************************************************
(0136) //******************************************************************************
(0137) 
(0138) //Funcion de disparo unico, dispara todos los actuadores a la vez
(0139) 
(0140) void Unico()
(0141) {
_Unico:
  x                    --> X+0
0748: 10       PUSH  X
0749: 4F       MOV   X,SP
074A: 38 02    ADD   SP,2
(0142) 	int x;
(0143) 	
(0144) 	PRT0DR=PRT0DR | 0x55; 	//Activacion de todas las salidas del puerto 0
074C: 43 00 55 OR    REG[0],85
(0145) 	PRT2DR=PRT2DR | 0x55;	//Activacion de todas las salidas del puerto 2
074F: 43 08 55 OR    REG[8],85
(0146) 	for(x=0;x<300;x++);		//Tiempo para que actuen 
0752: 56 01 00 MOV   [X+1],0
0755: 56 00 00 MOV   [X+0],0
0758: 77 01    INC   [X+1]
075A: 0F 00 00 ADC   [X+0],0
075D: 52 01    MOV   A,[X+1]
075F: 11 2C    SUB   A,44
0761: 52 00    MOV   A,[X+0]
0763: 31 80    XOR   A,128
0765: 19 81    SBB   A,129
0767: CF F0    JC    0x0758
(0147) 	PRT0DR=PRT0DR & 0xAA;	//Desactivacion de las salidas del puerto 0
0769: 41 00 AA AND   REG[0],170
(0148) 	PRT2DR=PRT2DR & 0xAA;	//Desactivacion de las salidas del puerto 2
076C: 41 08 AA AND   REG[8],170
(0149) 	//Inicio();  ??
(0150) }
076F: 38 FE    ADD   SP,254
0771: 20       POP   X
0772: 7F       RET   
(0151) 
(0152) //******************************************************************************
(0153) //******************************************************************************
(0154) 
(0155) //Funcion de Intevalometro
(0156) 
(0157) void Intervalometro()
(0158) {
_Intervalometro:
  x                    --> X+0
0773: 10       PUSH  X
0774: 4F       MOV   X,SP
0775: 38 02    ADD   SP,2
(0159) 	int x;
(0160) 	
(0161) 	// A la espera de la conf 
(0162) 	//Inicio();  ??
(0163) }
0777: 38 FE    ADD   SP,254
0779: 20       POP   X
077A: 7F       RET   
(0164) 
(0165) //******************************************************************************
(0166) //******************************************************************************
(0167) 
(0168) //Funcion de Intevalometro
(0169) 
(0170) void TimeLapse()
(0171) {
_TimeLapse:
  x                    --> X+0
077B: 10       PUSH  X
077C: 4F       MOV   X,SP
077D: 38 02    ADD   SP,2
(0172) 	int x;
(0173) 	
(0174) 	// A la espera de la conf
(0175) 	//Inicio();  ??
(0176) }077F: 38 FE    ADD   SP,254
0781: 20       POP   X
0782: 7F       RET   

FILE: .\main.c
(0001) //----------------------------------------------------------------------------
(0002) // PSoC de trabajo del proyecto PhotoSOC
(0003) // 
(0004) // TxD en P1.4 y RxD en P1.6.  19200 baudios sin paridad
(0005) //----------------------------------------------------------------------------
(0006) 
(0007) #include <m8c.h>        // part specific constants and macros
(0008) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0009) #include "stdlib.h"
(0010) #include "trabajo.h"
(0011) 
(0012) void main()
(0013) {	char x;
_main:
  a                    --> X+3
  num                  --> X+1
  x                    --> X+0
0783: 10       PUSH  X
0784: 4F       MOV   X,SP
0785: 38 0D    ADD   SP,13
(0014) 	int num;
(0015) 	char a[10];
(0016) 	Timer8_WritePeriod(156);		//Este valor es Fosc/Baudios/8
0787: 10       PUSH  X
0788: 50 9C    MOV   A,156
078A: 7C 05 EC LCALL 0x05EC
(0017) 	Timer8_WriteCompareValue(156/2);
078D: 50 4E    MOV   A,78
078F: 7C 05 EF LCALL 0x05EF
(0018) 	Timer8_Start();
0792: 7C 05 E4 LCALL 0x05E4
(0019) 	
(0020) 	UART_Start(UART_PARITY_NONE);
0795: 50 00    MOV   A,0
0797: 7C 04 10 LCALL 0x0410
079A: 20       POP   X
(0021) 	
(0022) 	//falta activar las direntes entradas 
(0023) 	// y variables
(0024) 	
(0025) 	for(;;) Inicio();
FILE: <library>
079B: 9E 88    CALL  __text_start
079D: 8F FD    JMP   0x079B
079F: 38 F3    ADD   SP,243
07A1: 20       POP   X
07A2: 8F FF    JMP   0x07A2
--------------------------------------------------------------------------------


PSoC Designer Version: 4.4.1184

Copyright (C) 1994 - 2001 ImageCraft
ImageCraft, 706 Colorado Ave., Suite 10-88, Palo Alto, CA 94303
info@imagecraft.com, phone (650) 493-9326 FAX (650) 493-9329
http://www.imagecraft.com
lcc source code (C) 1995, by David R. Hanson and AT&T. Reproduced by permission.
Code Compressor V1.09
ICCM8C version V1.69A
