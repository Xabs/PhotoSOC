//*****************************************************************************
//*****************************************************************************
//  FILENAME: Timer8.h
//   Version: 2.5, Updated on 2006/06/19 at 11:15:48
//  Generated by PSoC Designer ver 4.4  b1884 : 14 Jan, 2007
//
//  DESCRIPTION: Timer8 User Module C Language interface file
//               for the 22/24/27/29xxx PSoC family of devices
//-----------------------------------------------------------------------------
//  Copyright (c) Cypress MicroSystems 2000-2004. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************

#include <m8c.h>

#pragma fastcall16 Timer8_EnableInt                 //                 Proxy 1
#pragma fastcall16 Timer8_DisableInt                //                 Proxy 1
#pragma fastcall16 Timer8_Start                     //                 Proxy 1
#pragma fastcall16 Timer8_Stop                      //                 Proxy 1
#pragma fastcall16 Timer8_bReadTimer                // Read  DR0       Proxy 1
#pragma fastcall16 Timer8_bReadTimerSaveCV          // Read  DR0       Proxy 2
#pragma fastcall16 Timer8_WritePeriod               // Write DR1       Proxy 1
#pragma fastcall16 Timer8_bReadCompareValue         // Read  DR2       Proxy 1
#pragma fastcall16 Timer8_WriteCompareValue         // Write DR2       Proxy 1

// The following symbols are deprecated.
// They may be omitted in future releases
//
#pragma fastcall16 bTimer8_ReadCounter              // Read  DR0 "Obsolete"
#pragma fastcall16 bTimer8_CaptureCounter           // Read  DR0 "Obsolete"
#pragma fastcall16 bTimer8_ReadTimer                // Read  DR0 (Deprecated)
#pragma fastcall16 bTimer8_ReadTimerSaveCV          // Read  DR0 (Deprecated)
#pragma fastcall16 bTimer8_ReadCompareValue         // Read  DR2 (Deprecated)


//-------------------------------------------------
// Prototypes of the Timer8 API.
//-------------------------------------------------

extern void Timer8_EnableInt(void);
extern void Timer8_DisableInt(void);
extern void Timer8_Start(void);
extern void Timer8_Stop(void);
extern BYTE Timer8_bReadTimer(void);
extern BYTE Timer8_bReadTimerSaveCV(void);
extern void Timer8_WritePeriod(BYTE bPeriod);
extern BYTE Timer8_bReadCompareValue(void);
extern void Timer8_WriteCompareValue(BYTE bCompareValue);

// The following functions are deprecated.
// They may be omitted in future releases
//
extern BYTE bTimer8_ReadCompareValue(void);       // Deprecated
extern BYTE bTimer8_ReadTimerSaveCV(void);        // Deprecated
extern BYTE bTimer8_ReadCounter(void);            // Obsolete
extern BYTE bTimer8_ReadTimer(void);              // Deprecated
extern BYTE bTimer8_CaptureCounter(void);         // Obsolete


//--------------------------------------------------
// Constants for Timer8 API's.
//--------------------------------------------------

#define Timer8_CONTROL_REG_START_BIT           ( 0x01 )
#define Timer8_INT_REG_ADDR                    ( 0x0e1 )
#define Timer8_INT_MASK                        ( 0x01 )


//--------------------------------------------------
// Constants for Timer8 user defined values
//--------------------------------------------------

#define Timer8_PERIOD                          ( 0x00 )
#define Timer8_COMPARE_VALUE                   ( 0x00 )


//-------------------------------------------------
// Register Addresses for Timer8
//-------------------------------------------------

#pragma ioport  Timer8_COUNTER_REG: 0x020                  //DR0 Count register
BYTE            Timer8_COUNTER_REG;
#pragma ioport  Timer8_PERIOD_REG:  0x021                  //DR1 Period register
BYTE            Timer8_PERIOD_REG;
#pragma ioport  Timer8_COMPARE_REG: 0x022                  //DR2 Compare register
BYTE            Timer8_COMPARE_REG;
#pragma ioport  Timer8_CONTROL_REG: 0x023                  //Control register
BYTE            Timer8_CONTROL_REG;
#pragma ioport  Timer8_FUNC_REG:    0x120                  //Function register
BYTE            Timer8_FUNC_REG;
#pragma ioport  Timer8_INPUT_REG:   0x121                  //Input register
BYTE            Timer8_INPUT_REG;
#pragma ioport  Timer8_OUTPUT_REG:  0x122                  //Output register
BYTE            Timer8_OUTPUT_REG;
#pragma ioport  Timer8_INT_REG:       0x0e1                //Interrupt Mask Register
BYTE            Timer8_INT_REG;


//-------------------------------------------------
// Timer8 Macro 'Functions'
//-------------------------------------------------

#define Timer8_Start_M \
   ( Timer8_CONTROL_REG |=  Timer8_CONTROL_REG_START_BIT )

#define Timer8_Stop_M  \
   ( Timer8_CONTROL_REG &= ~Timer8_CONTROL_REG_START_BIT )

#define Timer8_EnableInt_M   \
   M8C_EnableIntMask(  Timer8_INT_REG, Timer8_INT_MASK )

#define Timer8_DisableInt_M  \
   M8C_DisableIntMask( Timer8_INT_REG, Timer8_INT_MASK )


// end of file Timer8.h
