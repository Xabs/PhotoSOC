 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./comunicaciones.h
 0000                   .dbfunc e envia _envia fV
 0000           ;   envia_recibe -> X+2
 0000           ; envia_contador -> X+1
 0000           ; envia_confirmacion -> X+0
 0000           ;     envia_dato -> X-4
 0000           _envia::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3803              add SP,3
 0004                   .dbline 19
 0004           ; //----------------------------------------------------------------//
 0004           ; //     Proyecto de GS Desarrollo Productos Electronicos EPSS    //
 0004           ; //                   By Albert Sagol & Xavi Vicient                         //
 0004           ; //                 PhotoSoC - Controlador fotográfico                   //
 0004           ; //----------------------------------------------------------------//
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "stdlib.h"
 0004           ; #include "comunicaciones.h"   // Libreria creada por Albert y Xavi para el proyecto
 0004           ; 
 0004           ; 
 0004           ; void main()
 0004           ; {     
 0004           ; 
 0004           ; unsigned char prueba1,prueba2,prueba3;
 0004           ; 
 0004           ; //- Inicializacion de parametros basicos del sistema al encender      
 0004           ;       Timer8_WritePeriod(156);                //Este valor es Fosc/Baudios/8
 0004                   .dbline 22
 0004           ;       Timer8_WriteCompareValue(156/2);
 0004           ;       Timer8_Start();
 0004           ;       
 0004 560000            mov [X+0],0
 0007                   .dbline 23
 0007           ;       UART_Start(UART_PARITY_NONE);
 0007 560100            mov [X+1],0
 000A 8037              xjmp L3
 000C           L2:
 000C                   .dbline 26
 000C           ;       
 000C           ; 
 000C           ; // Envio de datos
 000C                   .dbline 27
 000C           ; 
 000C 10                push X
 000D 52FC              mov A,[X-4]
 000F 7C0000            xcall _UART_PutChar
 0012                   .dbline 28
 0012           ;       prueba1=65;
 0012 7C0000            xcall _UART_cGetChar
 0015 62D000            mov REG[0xd0],>__r0
 0018 20                pop X
 0019 5402              mov [X+2],A
 001B                   .dbline 30
 001B           ;       prueba2=66;
 001B           ;       prueba3=67;
 001B 5202              mov A,[X+2]
 001D 3BFC              cmp A,[X-4]
 001F B004              jnz L5
 0021                   .dbline 30
 0021 56004F            mov [X+0],79
 0024           L5:
 0024                   .dbline 31
 0024           ;       
 0024 10                push X
 0025 5200              mov A,[X+0]
 0027 7C0000            xcall _UART_PutChar
 002A 20                pop X
 002B                   .dbline 32
 002B           ;       envia(prueba1);
 002B 5201              mov A,[X+1]
 002D 62D000            mov REG[0xd0],>__r0
 0030 5300              mov [__r0],A
 0032 0101              add A,1
 0034 5401              mov [X+1],A
 0036 5100              mov A,[__r0]
 0038 5401              mov [X+1],A
 003A                   .dbline 33
 003A           ;       envia(prueba2);
 003A 3D010A            cmp [X+1],10
 003D B004              jnz L7
 003F                   .dbline 33
 003F 560001            mov [X+0],1
 0042           L7:
 0042                   .dbline 34
 0042           L3:
 0042                   .dbline 25
 0042 3D0000            cmp [X+0],0
 0045 AFC6              jz L2
 0047                   .dbline -2
 0047                   .dbline 35
 0047           ;       envia(prueba3);
 0047           ;       
 0047           L1:
 0047 38FD              add SP,-3
 0049 20                pop X
 004A                   .dbline 0 ; func end
 004A 7F                ret
 004B                   .dbsym l envia_recibe 2 c
 004B                   .dbsym l envia_contador 1 c
 004B                   .dbsym l envia_confirmacion 0 c
 004B                   .dbsym l envia_dato -4 c
 004B                   .dbend
 004B                   .dbfunc e recibe _recibe fc
 004B           ;    recibe_dato -> X+2
 004B           ; recibe_contador -> X+1
 004B           ; recibe_confirmacion -> X+0
 004B           _recibe::
 004B                   .dbline -1
 004B 10                push X
 004C 4F                mov X,SP
 004D 3803              add SP,3
 004F                   .dbline 50
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F           ; }
 004F                   .dbline 53
 004F           ; }
 004F           ; }
 004F           ; }
 004F 560000            mov [X+0],0
 0052                   .dbline 54
 0052           ; }
 0052 560100            mov [X+1],0
 0055 803A              xjmp L11
 0057           L10:
 0057                   .dbline 57
 0057           ; }
 0057           ; }
 0057           ; }
 0057                   .dbline 58
 0057           ; }
 0057 10                push X
 0058 7C0000            xcall _UART_cGetChar
 005B 62D000            mov REG[0xd0],>__r0
 005E 20                pop X
 005F 5402              mov [X+2],A
 0061                   .dbline 59
 0061           ; }
 0061 10                push X
 0062 5202              mov A,[X+2]
 0064 7C0000            xcall _UART_PutChar
 0067                   .dbline 61
 0067           ; }
 0067           ; }
 0067 7C0000            xcall _UART_cGetChar
 006A 62D000            mov REG[0xd0],>__r0
 006D 20                pop X
 006E 5400              mov [X+0],A
 0070                   .dbline 62
 0070           ; }
 0070 3D004F            cmp [X+0],79
 0073 B005              jnz L13
 0075                   .dbline 62
 0075 5202              mov A,[X+2]
 0077 8022              xjmp L9
 0079           L13:
 0079                   .dbline 63
 0079           ; }
 0079 5201              mov A,[X+1]
 007B 62D000            mov REG[0xd0],>__r0
 007E 5300              mov [__r0],A
 0080 0101              add A,1
 0082 5401              mov [X+1],A
 0084 5100              mov A,[__r0]
 0086 5401              mov [X+1],A
 0088                   .dbline 64
 0088           ; }
 0088 3D010A            cmp [X+1],10
 008B B004              jnz L15
 008D                   .dbline 64
 008D 560001            mov [X+0],1
 0090           L15:
 0090                   .dbline 65
 0090           L11:
 0090                   .dbline 56
 0090 3D0000            cmp [X+0],0
 0093 AFC3              jz L10
 0095                   .dbline 66
 0095           ; }
 0095           ; }
 0095 62D000            mov REG[0xd0],>__r0
 0098 50FF              mov A,-1
 009A                   .dbline -2
 009A           L9:
 009A 38FD              add SP,-3
 009C 20                pop X
 009D                   .dbline 0 ; func end
 009D 7F                ret
 009E                   .dbsym l recibe_dato 2 c
 009E                   .dbsym l recibe_contador 1 c
 009E                   .dbsym l recibe_confirmacion 0 c
 009E                   .dbend
 009E                   .dbfile ./main.c
 009E                   .dbfunc e main _main fV
 009E           ;        prueba3 -> X+2
 009E           ;        prueba2 -> X+1
 009E           ;        prueba1 -> X+0
 009E           _main::
 009E                   .dbline -1
 009E 10                push X
 009F 4F                mov X,SP
 00A0 3803              add SP,3
 00A2                   .dbline 14
 00A2                   .dbline 19
 00A2 10                push X
 00A3 509C              mov A,-100
 00A5 7C0000            xcall _Timer8_WritePeriod
 00A8                   .dbline 20
 00A8 504E              mov A,78
 00AA 7C0000            xcall _Timer8_WriteCompareValue
 00AD                   .dbline 21
 00AD 7C0000            xcall _Timer8_Start
 00B0                   .dbline 23
 00B0 5000              mov A,0
 00B2 7C0000            xcall _UART_Start
 00B5 20                pop X
 00B6                   .dbline 28
 00B6 560041            mov [X+0],65
 00B9                   .dbline 29
 00B9 560142            mov [X+1],66
 00BC                   .dbline 30
 00BC 560243            mov [X+2],67
 00BF                   .dbline 32
 00BF 5200              mov A,[X+0]
 00C1 08                push A
 00C2 9F3C              xcall _envia
 00C4 38FF              add SP,-1
 00C6                   .dbline 33
 00C6 5201              mov A,[X+1]
 00C8 08                push A
 00C9 9F35              xcall _envia
 00CB                   .dbline 34
 00CB 5202              mov A,[X+2]
 00CD 08                push A
 00CE 9F30              xcall _envia
 00D0 38FE              add SP,-2
 00D2                   .dbline -2
 00D2                   .dbline 36
 00D2           L17:
 00D2 38FD              add SP,-3
 00D4 20                pop X
 00D5                   .dbline 0 ; func end
 00D5 8FFF              jmp .
 00D7                   .dbsym l prueba3 2 c
 00D7                   .dbsym l prueba2 1 c
 00D7                   .dbsym l prueba1 0 c
 00D7                   .dbend
